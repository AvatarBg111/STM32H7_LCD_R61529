
stm32h750_r61529_tft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005734  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d7c  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006748  08006748  00016748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800674c  0800674c  0001674c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  24000000  08006750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000118  2400001c  0800676c  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000134  0800676c  00020134  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013768  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000276c  00000000  00000000  000337f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010e8  00000000  00000000  00035f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d12  00000000  00000000  00037050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037754  00000000  00000000  00037d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001613b  00000000  00000000  0006f4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016135c  00000000  00000000  000855f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000046d0  00000000  00000000  001e6950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005b  00000000  00000000  001eb020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400001c 	.word	0x2400001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080059b4 	.word	0x080059b4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000020 	.word	0x24000020
 80002d4:	080059b4 	.word	0x080059b4

080002d8 <Init_FT5436>:

struct touch_info_f{
	uint16_t point[MAX_TOUCH_POINTS][2];
};

void Init_FT5436(void){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af02      	add	r7, sp, #8
	uint8_t initialization_arr[] = {0x00, 0x00, 0x88, 0x0E};
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <Init_FT5436+0x4c>)
 80002e0:	607b      	str	r3, [r7, #4]

	FT5436_RESET_ACTIVE;
 80002e2:	2200      	movs	r2, #0
 80002e4:	2180      	movs	r1, #128	; 0x80
 80002e6:	4810      	ldr	r0, [pc, #64]	; (8000328 <Init_FT5436+0x50>)
 80002e8:	f001 fcfe 	bl	8001ce8 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80002ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002f0:	f001 f9f2 	bl	80016d8 <HAL_Delay>
	FT5436_RESET_IDLE;
 80002f4:	2201      	movs	r2, #1
 80002f6:	2180      	movs	r1, #128	; 0x80
 80002f8:	480b      	ldr	r0, [pc, #44]	; (8000328 <Init_FT5436+0x50>)
 80002fa:	f001 fcf5 	bl	8001ce8 <HAL_GPIO_WritePin>

	if(HAL_I2C_Master_Transmit(&hi2c4, 0x38 << 1, initialization_arr, 4, 1000) != HAL_OK){
 80002fe:	1d3a      	adds	r2, r7, #4
 8000300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	2304      	movs	r3, #4
 8000308:	2170      	movs	r1, #112	; 0x70
 800030a:	4808      	ldr	r0, [pc, #32]	; (800032c <Init_FT5436+0x54>)
 800030c:	f001 fdba 	bl	8001e84 <HAL_I2C_Master_Transmit>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <Init_FT5436+0x42>
		Error_Handler();
 8000316:	f000 fef9 	bl	800110c <Error_Handler>
	}
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	0e880000 	.word	0x0e880000
 8000328:	58020000 	.word	0x58020000
 800032c:	24000038 	.word	0x24000038

08000330 <touch_move>:

void touch_move(void){
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af02      	add	r7, sp, #8
	uint8_t data_arr[] = {0x00};
 8000336:	2300      	movs	r3, #0
 8000338:	713b      	strb	r3, [r7, #4]

	if(HAL_I2C_Master_Transmit(&hi2c4, 0x38 << 1, data_arr, 1, 1000) != HAL_OK){
 800033a:	1d3a      	adds	r2, r7, #4
 800033c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2301      	movs	r3, #1
 8000344:	2170      	movs	r1, #112	; 0x70
 8000346:	4806      	ldr	r0, [pc, #24]	; (8000360 <touch_move+0x30>)
 8000348:	f001 fd9c 	bl	8001e84 <HAL_I2C_Master_Transmit>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <touch_move+0x26>
		Error_Handler();
 8000352:	f000 fedb 	bl	800110c <Error_Handler>
	}
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	24000038 	.word	0x24000038

08000364 <Lcd_Write>:
PC7   ------> FMC_NE1
PD4   ------> FMC_NOE
PD5   ------> FMC_NWE
*/

__inline void Lcd_Write(uint16_t index, uint8_t type){
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	460a      	mov	r2, r1
 800036e:	80fb      	strh	r3, [r7, #6]
 8000370:	4613      	mov	r3, r2
 8000372:	717b      	strb	r3, [r7, #5]
	uint32_t MASK_GPIOD = 0x0;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
	uint32_t MASK_GPIOE = 0x0;
 8000378:	2300      	movs	r3, #0
 800037a:	613b      	str	r3, [r7, #16]

	if(type == COMMAND){
 800037c:	797b      	ldrb	r3, [r7, #5]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d106      	bne.n	8000390 <Lcd_Write+0x2c>
		RS_ACTIVE;
 8000382:	2200      	movs	r2, #0
 8000384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000388:	485b      	ldr	r0, [pc, #364]	; (80004f8 <Lcd_Write+0x194>)
 800038a:	f001 fcad 	bl	8001ce8 <HAL_GPIO_WritePin>
 800038e:	e008      	b.n	80003a2 <Lcd_Write+0x3e>
	}else if(type == DATA){
 8000390:	797b      	ldrb	r3, [r7, #5]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d105      	bne.n	80003a2 <Lcd_Write+0x3e>
		RS_IDLE;
 8000396:	2201      	movs	r2, #1
 8000398:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800039c:	4856      	ldr	r0, [pc, #344]	; (80004f8 <Lcd_Write+0x194>)
 800039e:	f001 fca3 	bl	8001ce8 <HAL_GPIO_WritePin>
	}

	//Chip select
	CS_ACTIVE;
 80003a2:	2200      	movs	r2, #0
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	4855      	ldr	r0, [pc, #340]	; (80004fc <Lcd_Write+0x198>)
 80003a8:	f001 fc9e 	bl	8001ce8 <HAL_GPIO_WritePin>

	//Write enable
	WR_ACTIVE;
 80003ac:	2200      	movs	r2, #0
 80003ae:	2120      	movs	r1, #32
 80003b0:	4851      	ldr	r0, [pc, #324]	; (80004f8 <Lcd_Write+0x194>)
 80003b2:	f001 fc99 	bl	8001ce8 <HAL_GPIO_WritePin>


	//BIT 0
	if(index & 0x0001)
 80003b6:	88fb      	ldrh	r3, [r7, #6]
 80003b8:	f003 0301 	and.w	r3, r3, #1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d004      	beq.n	80003ca <Lcd_Write+0x66>
		MASK_GPIOD |= GPIO_PIN_14;
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	e003      	b.n	80003d2 <Lcd_Write+0x6e>
	else
		MASK_GPIOD |= (uint32_t)GPIO_PIN_14 << 16;
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80003d0:	617b      	str	r3, [r7, #20]

	//BIT 1
	if(index & 0x0002)
 80003d2:	88fb      	ldrh	r3, [r7, #6]
 80003d4:	f003 0302 	and.w	r3, r3, #2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d004      	beq.n	80003e6 <Lcd_Write+0x82>
		MASK_GPIOD |= GPIO_PIN_15;
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	e003      	b.n	80003ee <Lcd_Write+0x8a>
	else
		MASK_GPIOD |= (uint32_t)GPIO_PIN_15 << 16;
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003ec:	617b      	str	r3, [r7, #20]

	//BIT 2
	if(index & 0x0004)
 80003ee:	88fb      	ldrh	r3, [r7, #6]
 80003f0:	f003 0304 	and.w	r3, r3, #4
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d004      	beq.n	8000402 <Lcd_Write+0x9e>
		MASK_GPIOD |= GPIO_PIN_0;
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	617b      	str	r3, [r7, #20]
 8000400:	e003      	b.n	800040a <Lcd_Write+0xa6>
	else
		MASK_GPIOD |= (uint32_t)GPIO_PIN_0 << 16;
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000408:	617b      	str	r3, [r7, #20]

	//BIT 3
	if(index & 0x0008)
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	f003 0308 	and.w	r3, r3, #8
 8000410:	2b00      	cmp	r3, #0
 8000412:	d004      	beq.n	800041e <Lcd_Write+0xba>
		MASK_GPIOD |= GPIO_PIN_1;
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	f043 0302 	orr.w	r3, r3, #2
 800041a:	617b      	str	r3, [r7, #20]
 800041c:	e003      	b.n	8000426 <Lcd_Write+0xc2>
	else
		MASK_GPIOD |= (uint32_t)GPIO_PIN_1 << 16;
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000424:	617b      	str	r3, [r7, #20]

	//BIT 13
	if(index & 0x2000)
 8000426:	88fb      	ldrh	r3, [r7, #6]
 8000428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800042c:	2b00      	cmp	r3, #0
 800042e:	d004      	beq.n	800043a <Lcd_Write+0xd6>
		MASK_GPIOD |= GPIO_PIN_8;
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000436:	617b      	str	r3, [r7, #20]
 8000438:	e003      	b.n	8000442 <Lcd_Write+0xde>
	else
		MASK_GPIOD |= (uint32_t)GPIO_PIN_8 << 16;
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000440:	617b      	str	r3, [r7, #20]

	//BIT 14
	if(index & 0x4000)
 8000442:	88fb      	ldrh	r3, [r7, #6]
 8000444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000448:	2b00      	cmp	r3, #0
 800044a:	d004      	beq.n	8000456 <Lcd_Write+0xf2>
		MASK_GPIOD |= GPIO_PIN_9;
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	e003      	b.n	800045e <Lcd_Write+0xfa>
	else
		MASK_GPIOD |= (uint32_t)GPIO_PIN_9 << 16;
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800045c:	617b      	str	r3, [r7, #20]

	//BIT 15
	if(index & 0x8000)
 800045e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000462:	2b00      	cmp	r3, #0
 8000464:	da04      	bge.n	8000470 <Lcd_Write+0x10c>
		MASK_GPIOD |= GPIO_PIN_10;
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	e003      	b.n	8000478 <Lcd_Write+0x114>
	else
		MASK_GPIOD |= (uint32_t)GPIO_PIN_10 << 16;
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000476:	617b      	str	r3, [r7, #20]

	//BITS 4 - 12
	for(uint8_t i = 7; i <= 15; i++){
 8000478:	2307      	movs	r3, #7
 800047a:	73fb      	strb	r3, [r7, #15]
 800047c:	e01b      	b.n	80004b6 <Lcd_Write+0x152>
		if(index & (1 << (i - 3))){
 800047e:	88fa      	ldrh	r2, [r7, #6]
 8000480:	7bfb      	ldrb	r3, [r7, #15]
 8000482:	3b03      	subs	r3, #3
 8000484:	fa42 f303 	asr.w	r3, r2, r3
 8000488:	f003 0301 	and.w	r3, r3, #1
 800048c:	2b00      	cmp	r3, #0
 800048e:	d007      	beq.n	80004a0 <Lcd_Write+0x13c>
			MASK_GPIOE |= ((uint32_t)1 << i);
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	2201      	movs	r2, #1
 8000494:	fa02 f303 	lsl.w	r3, r2, r3
 8000498:	693a      	ldr	r2, [r7, #16]
 800049a:	4313      	orrs	r3, r2
 800049c:	613b      	str	r3, [r7, #16]
 800049e:	e007      	b.n	80004b0 <Lcd_Write+0x14c>
		}else{
			MASK_GPIOE |= ((uint32_t)1 << (i + 16));
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
 80004a2:	3310      	adds	r3, #16
 80004a4:	2201      	movs	r2, #1
 80004a6:	fa02 f303 	lsl.w	r3, r2, r3
 80004aa:	693a      	ldr	r2, [r7, #16]
 80004ac:	4313      	orrs	r3, r2
 80004ae:	613b      	str	r3, [r7, #16]
	for(uint8_t i = 7; i <= 15; i++){
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
 80004b2:	3301      	adds	r3, #1
 80004b4:	73fb      	strb	r3, [r7, #15]
 80004b6:	7bfb      	ldrb	r3, [r7, #15]
 80004b8:	2b0f      	cmp	r3, #15
 80004ba:	d9e0      	bls.n	800047e <Lcd_Write+0x11a>
		}
	}

	GPIOD->BSRR = MASK_GPIOD;
 80004bc:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <Lcd_Write+0x194>)
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR = MASK_GPIOE;
 80004c2:	4a0f      	ldr	r2, [pc, #60]	; (8000500 <Lcd_Write+0x19c>)
 80004c4:	693b      	ldr	r3, [r7, #16]
 80004c6:	6193      	str	r3, [r2, #24]

	//delay
	for(int i = 0; i < 10; i++);
 80004c8:	2300      	movs	r3, #0
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	e002      	b.n	80004d4 <Lcd_Write+0x170>
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	3301      	adds	r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	2b09      	cmp	r3, #9
 80004d8:	ddf9      	ble.n	80004ce <Lcd_Write+0x16a>

	//Chip un-select
	CS_IDLE;
 80004da:	2201      	movs	r2, #1
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	4807      	ldr	r0, [pc, #28]	; (80004fc <Lcd_Write+0x198>)
 80004e0:	f001 fc02 	bl	8001ce8 <HAL_GPIO_WritePin>

	//Write disable
	WR_IDLE;
 80004e4:	2201      	movs	r2, #1
 80004e6:	2120      	movs	r1, #32
 80004e8:	4803      	ldr	r0, [pc, #12]	; (80004f8 <Lcd_Write+0x194>)
 80004ea:	f001 fbfd 	bl	8001ce8 <HAL_GPIO_WritePin>
}
 80004ee:	bf00      	nop
 80004f0:	3718      	adds	r7, #24
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	58020c00 	.word	0x58020c00
 80004fc:	58020800 	.word	0x58020800
 8000500:	58021000 	.word	0x58021000

08000504 <Lcd_Write_Reg>:

__inline void Lcd_Write_Reg(uint16_t index){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	80fb      	strh	r3, [r7, #6]
	//*(uint16_t *) (LCD_REG) = index;
	Lcd_Write(index, COMMAND);
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff ff26 	bl	8000364 <Lcd_Write>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <Lcd_Write_Data>:
__inline void Lcd_Write_Data(uint16_t data){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	80fb      	strh	r3, [r7, #6]
    //*(uint16_t *) (LCD_DATA)= data;
	Lcd_Write(data, DATA);
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	2101      	movs	r1, #1
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ff18 	bl	8000364 <Lcd_Write>
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <ili9481_SetAddrWindow>:

//  =====================================================================
void ili9481_SetAddrWindow(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2){
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4604      	mov	r4, r0
 8000544:	4608      	mov	r0, r1
 8000546:	4611      	mov	r1, r2
 8000548:	461a      	mov	r2, r3
 800054a:	4623      	mov	r3, r4
 800054c:	80fb      	strh	r3, [r7, #6]
 800054e:	4603      	mov	r3, r0
 8000550:	80bb      	strh	r3, [r7, #4]
 8000552:	460b      	mov	r3, r1
 8000554:	807b      	strh	r3, [r7, #2]
 8000556:	4613      	mov	r3, r2
 8000558:	803b      	strh	r3, [r7, #0]
	Lcd_Write_Reg(0x2A);//Column Addres Set
 800055a:	202a      	movs	r0, #42	; 0x2a
 800055c:	f7ff ffd2 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(x1 >> 8);
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	0a1b      	lsrs	r3, r3, #8
 8000564:	b29b      	uxth	r3, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ffda 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(x1 & 0xFF);
 800056c:	88fb      	ldrh	r3, [r7, #6]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	b29b      	uxth	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ffd4 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(x2 >> 8);
 8000578:	887b      	ldrh	r3, [r7, #2]
 800057a:	0a1b      	lsrs	r3, r3, #8
 800057c:	b29b      	uxth	r3, r3
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff ffce 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(x2 & 0xFF);
 8000584:	887b      	ldrh	r3, [r7, #2]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	b29b      	uxth	r3, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ffc8 	bl	8000520 <Lcd_Write_Data>

	Lcd_Write_Reg(0x2B);//Page Addres Set
 8000590:	202b      	movs	r0, #43	; 0x2b
 8000592:	f7ff ffb7 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(y1 >> 8);
 8000596:	88bb      	ldrh	r3, [r7, #4]
 8000598:	0a1b      	lsrs	r3, r3, #8
 800059a:	b29b      	uxth	r3, r3
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ffbf 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(y1 & 0xFF);
 80005a2:	88bb      	ldrh	r3, [r7, #4]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ffb9 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(y2 >> 8);
 80005ae:	883b      	ldrh	r3, [r7, #0]
 80005b0:	0a1b      	lsrs	r3, r3, #8
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ffb3 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(y2 & 0xFF);
 80005ba:	883b      	ldrh	r3, [r7, #0]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	b29b      	uxth	r3, r3
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff ffad 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Reg(0x2C);
 80005c6:	202c      	movs	r0, #44	; 0x2c
 80005c8:	f7ff ff9c 	bl	8000504 <Lcd_Write_Reg>
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd90      	pop	{r4, r7, pc}

080005d4 <Init_Disp>:

//  =====================================================================
void Init_Disp(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	RD_IDLE;
 80005d8:	2201      	movs	r2, #1
 80005da:	2110      	movs	r1, #16
 80005dc:	48fc      	ldr	r0, [pc, #1008]	; (80009d0 <Init_Disp+0x3fc>)
 80005de:	f001 fb83 	bl	8001ce8 <HAL_GPIO_WritePin>
	RESET_IDLE;
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e8:	48fa      	ldr	r0, [pc, #1000]	; (80009d4 <Init_Disp+0x400>)
 80005ea:	f001 fb7d 	bl	8001ce8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005ee:	2064      	movs	r0, #100	; 0x64
 80005f0:	f001 f872 	bl	80016d8 <HAL_Delay>
	RESET_ACTIVE;
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fa:	48f6      	ldr	r0, [pc, #984]	; (80009d4 <Init_Disp+0x400>)
 80005fc:	f001 fb74 	bl	8001ce8 <HAL_GPIO_WritePin>
	HAL_Delay(800);
 8000600:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000604:	f001 f868 	bl	80016d8 <HAL_Delay>
	RESET_IDLE;
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060e:	48f1      	ldr	r0, [pc, #964]	; (80009d4 <Init_Disp+0x400>)
 8000610:	f001 fb6a 	bl	8001ce8 <HAL_GPIO_WritePin>
	HAL_Delay(800);
 8000614:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000618:	f001 f85e 	bl	80016d8 <HAL_Delay>

	Lcd_Write_Reg(0x01); // reset
 800061c:	2001      	movs	r0, #1
 800061e:	f7ff ff71 	bl	8000504 <Lcd_Write_Reg>
	HAL_Delay(20);
 8000622:	2014      	movs	r0, #20
 8000624:	f001 f858 	bl	80016d8 <HAL_Delay>
	// digitalWrite(PIN_CSX, LOW); //chip enable
	Lcd_Write_Reg(0x11); //exit sleep mode;
 8000628:	2011      	movs	r0, #17
 800062a:	f7ff ff6b 	bl	8000504 <Lcd_Write_Reg>
	HAL_Delay(200);
 800062e:	20c8      	movs	r0, #200	; 0xc8
 8000630:	f001 f852 	bl	80016d8 <HAL_Delay>
	Lcd_Write_Reg(0xB0); //manufacturer command access protect
 8000634:	20b0      	movs	r0, #176	; 0xb0
 8000636:	f7ff ff65 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x04); //allow access to additional manufacturer's commands
 800063a:	2004      	movs	r0, #4
 800063c:	f7ff ff70 	bl	8000520 <Lcd_Write_Data>
	HAL_Delay(1);
 8000640:	2001      	movs	r0, #1
 8000642:	f001 f849 	bl	80016d8 <HAL_Delay>

	Lcd_Write_Reg(0xB3); //Frame Memory Access and Interface Setting
 8000646:	20b3      	movs	r0, #179	; 0xb3
 8000648:	f7ff ff5c 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x02); // reset start position of a window area address...
 800064c:	2002      	movs	r0, #2
 800064e:	f7ff ff67 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00); //TE pin is used. TE signal is output every frame.
 8000652:	2000      	movs	r0, #0
 8000654:	f7ff ff64 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00); // empty according to the datasheet - does nothing;
 8000658:	2000      	movs	r0, #0
 800065a:	f7ff ff61 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00); // convert 16/18 bits to 24bits data by writing zeroes to LSBs. Sets image data write/read format(?)
 800065e:	2000      	movs	r0, #0
 8000660:	f7ff ff5e 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);  // ???? (not needed?)
 8000664:	2000      	movs	r0, #0
 8000666:	f7ff ff5b 	bl	8000520 <Lcd_Write_Data>
	HAL_Delay(1);
 800066a:	2001      	movs	r0, #1
 800066c:	f001 f834 	bl	80016d8 <HAL_Delay>

	Lcd_Write_Reg(0xB4); //Display Mode
 8000670:	20b4      	movs	r0, #180	; 0xb4
 8000672:	f7ff ff47 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x00); //Uses internal oscillator
 8000676:	2000      	movs	r0, #0
 8000678:	f7ff ff52 	bl	8000520 <Lcd_Write_Data>
	HAL_Delay(1);
 800067c:	2001      	movs	r0, #1
 800067e:	f001 f82b 	bl	80016d8 <HAL_Delay>

	/**/
	Lcd_Write_Reg(0xC0); // Panel Driving Setting;
 8000682:	20c0      	movs	r0, #192	; 0xc0
 8000684:	f7ff ff3e 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x03); // Output polarity is inverted. Left/right interchanging scan. Forward scan. BGR mode (depends on other settings). S960 ? S1 (depends)
 8000688:	2003      	movs	r0, #3
 800068a:	f7ff ff49 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0xDF); // Number of lines for driver to drive - 480.
 800068e:	20df      	movs	r0, #223	; 0xdf
 8000690:	f7ff ff46 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x40); // Scan start position - Gate1. (depend on other param);
 8000694:	2040      	movs	r0, #64	; 0x40
 8000696:	f7ff ff43 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x10); // Dot inversion. Dot inversion in not-lit display area. If 0x13 - both will be set to 'column inversion'.
 800069a:	2010      	movs	r0, #16
 800069c:	f7ff ff40 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00); // settings for non-lit display area...
 80006a0:	2000      	movs	r0, #0
 80006a2:	f7ff ff3d 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x01); // 3 frame scan interval in non-display area...
 80006a6:	2001      	movs	r0, #1
 80006a8:	f7ff ff3a 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00); // Source output level in retrace period...
 80006ac:	2000      	movs	r0, #0
 80006ae:	f7ff ff37 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x55);//54 . Internal clock divider = 5 (low and high periods).
 80006b2:	2055      	movs	r0, #85	; 0x55
 80006b4:	f7ff ff34 	bl	8000520 <Lcd_Write_Data>

	Lcd_Write_Reg(0xC1); //Display Timing Setting for Normal Mode
 80006b8:	20c1      	movs	r0, #193	; 0xc1
 80006ba:	f7ff ff23 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x07); // Clock devider = 12. 14MHz/12. Used by display circuit and step-up circuit.
 80006be:	2007      	movs	r0, #7
 80006c0:	f7ff ff2e 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x27); // These bits set the number of clocks in 1 line period. 0x27 - 39 clocks.
 80006c4:	2027      	movs	r0, #39	; 0x27
 80006c6:	f7ff ff2b 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x08); // Number of back porch lines. 0x08 - 8 lines.
 80006ca:	2008      	movs	r0, #8
 80006cc:	f7ff ff28 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x08); // Number of front porch lines. 0x08 - 8lines.
 80006d0:	2008      	movs	r0, #8
 80006d2:	f7ff ff25 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00); // Spacial configuriation mode 1 (?). 1 line inversion mode (?).
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff ff22 	bl	8000520 <Lcd_Write_Data>

	Lcd_Write_Reg(0xC4); // Source/Gate Driving Timing Setting
 80006dc:	20c4      	movs	r0, #196	; 0xc4
 80006de:	f7ff ff11 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x57); // falling position (stop) of gate driver - 4 clocks... gate start position - 8 clocks...
 80006e2:	2057      	movs	r0, #87	; 0x57
 80006e4:	f7ff ff1c 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00); // nothing to set up according to the datasheet
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff ff19 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x05); // Source precharge period (GND) - 5 clocks.
 80006ee:	2005      	movs	r0, #5
 80006f0:	f7ff ff16 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x03); // source precharge period (VCI) - 3 clocks.
 80006f4:	2003      	movs	r0, #3
 80006f6:	f7ff ff13 	bl	8000520 <Lcd_Write_Data>

	Lcd_Write_Reg(0xC6); //DPI polarity control
 80006fa:	20c6      	movs	r0, #198	; 0xc6
 80006fc:	f7ff ff02 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x04); // VSYNC -Active Low. HSYNC - Active Low. DE pin enable data write in when DE=1. Reads data on the rising edge of the PCLK signal.
 8000700:	2004      	movs	r0, #4
 8000702:	f7ff ff0d 	bl	8000520 <Lcd_Write_Data>

	//----Gamma setting start-----
	Lcd_Write_Reg(0xC8);
 8000706:	20c8      	movs	r0, #200	; 0xc8
 8000708:	f7ff fefc 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x03);
 800070c:	2003      	movs	r0, #3
 800070e:	f7ff ff07 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 8000712:	2012      	movs	r0, #18
 8000714:	f7ff ff04 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x1A);
 8000718:	201a      	movs	r0, #26
 800071a:	f7ff ff01 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x24);
 800071e:	2024      	movs	r0, #36	; 0x24
 8000720:	f7ff fefe 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x32);
 8000724:	2032      	movs	r0, #50	; 0x32
 8000726:	f7ff fefb 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x4B);
 800072a:	204b      	movs	r0, #75	; 0x4b
 800072c:	f7ff fef8 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x3B);
 8000730:	203b      	movs	r0, #59	; 0x3b
 8000732:	f7ff fef5 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x29);
 8000736:	2029      	movs	r0, #41	; 0x29
 8000738:	f7ff fef2 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x1F);
 800073c:	201f      	movs	r0, #31
 800073e:	f7ff feef 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x18);
 8000742:	2018      	movs	r0, #24
 8000744:	f7ff feec 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 8000748:	2012      	movs	r0, #18
 800074a:	f7ff fee9 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x04);
 800074e:	2004      	movs	r0, #4
 8000750:	f7ff fee6 	bl	8000520 <Lcd_Write_Data>

	Lcd_Write_Data(0x03);
 8000754:	2003      	movs	r0, #3
 8000756:	f7ff fee3 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 800075a:	2012      	movs	r0, #18
 800075c:	f7ff fee0 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x1A);
 8000760:	201a      	movs	r0, #26
 8000762:	f7ff fedd 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x24);
 8000766:	2024      	movs	r0, #36	; 0x24
 8000768:	f7ff feda 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x32);
 800076c:	2032      	movs	r0, #50	; 0x32
 800076e:	f7ff fed7 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x4B);
 8000772:	204b      	movs	r0, #75	; 0x4b
 8000774:	f7ff fed4 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x3B);
 8000778:	203b      	movs	r0, #59	; 0x3b
 800077a:	f7ff fed1 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x29);
 800077e:	2029      	movs	r0, #41	; 0x29
 8000780:	f7ff fece 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x1F);
 8000784:	201f      	movs	r0, #31
 8000786:	f7ff fecb 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x18);
 800078a:	2018      	movs	r0, #24
 800078c:	f7ff fec8 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 8000790:	2012      	movs	r0, #18
 8000792:	f7ff fec5 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x04);
 8000796:	2004      	movs	r0, #4
 8000798:	f7ff fec2 	bl	8000520 <Lcd_Write_Data>

	Lcd_Write_Reg(0xC9);
 800079c:	20c9      	movs	r0, #201	; 0xc9
 800079e:	f7ff feb1 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x03);
 80007a2:	2003      	movs	r0, #3
 80007a4:	f7ff febc 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 80007a8:	2012      	movs	r0, #18
 80007aa:	f7ff feb9 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x1A);
 80007ae:	201a      	movs	r0, #26
 80007b0:	f7ff feb6 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x24);
 80007b4:	2024      	movs	r0, #36	; 0x24
 80007b6:	f7ff feb3 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x32);
 80007ba:	2032      	movs	r0, #50	; 0x32
 80007bc:	f7ff feb0 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x4B);
 80007c0:	204b      	movs	r0, #75	; 0x4b
 80007c2:	f7ff fead 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x3B);
 80007c6:	203b      	movs	r0, #59	; 0x3b
 80007c8:	f7ff feaa 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x29);
 80007cc:	2029      	movs	r0, #41	; 0x29
 80007ce:	f7ff fea7 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x1F);
 80007d2:	201f      	movs	r0, #31
 80007d4:	f7ff fea4 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x18);
 80007d8:	2018      	movs	r0, #24
 80007da:	f7ff fea1 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 80007de:	2012      	movs	r0, #18
 80007e0:	f7ff fe9e 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x04);
 80007e4:	2004      	movs	r0, #4
 80007e6:	f7ff fe9b 	bl	8000520 <Lcd_Write_Data>

	Lcd_Write_Data(0x03);
 80007ea:	2003      	movs	r0, #3
 80007ec:	f7ff fe98 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 80007f0:	2012      	movs	r0, #18
 80007f2:	f7ff fe95 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x1A);
 80007f6:	201a      	movs	r0, #26
 80007f8:	f7ff fe92 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x24);
 80007fc:	2024      	movs	r0, #36	; 0x24
 80007fe:	f7ff fe8f 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x32);
 8000802:	2032      	movs	r0, #50	; 0x32
 8000804:	f7ff fe8c 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x4B);
 8000808:	204b      	movs	r0, #75	; 0x4b
 800080a:	f7ff fe89 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x3B);
 800080e:	203b      	movs	r0, #59	; 0x3b
 8000810:	f7ff fe86 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x29);
 8000814:	2029      	movs	r0, #41	; 0x29
 8000816:	f7ff fe83 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x1F);
 800081a:	201f      	movs	r0, #31
 800081c:	f7ff fe80 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x18);
 8000820:	2018      	movs	r0, #24
 8000822:	f7ff fe7d 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 8000826:	2012      	movs	r0, #18
 8000828:	f7ff fe7a 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x04);
 800082c:	2004      	movs	r0, #4
 800082e:	f7ff fe77 	bl	8000520 <Lcd_Write_Data>

	Lcd_Write_Reg(0xCA);
 8000832:	20ca      	movs	r0, #202	; 0xca
 8000834:	f7ff fe66 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x03);
 8000838:	2003      	movs	r0, #3
 800083a:	f7ff fe71 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 800083e:	2012      	movs	r0, #18
 8000840:	f7ff fe6e 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x1A);
 8000844:	201a      	movs	r0, #26
 8000846:	f7ff fe6b 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x24);
 800084a:	2024      	movs	r0, #36	; 0x24
 800084c:	f7ff fe68 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x32);
 8000850:	2032      	movs	r0, #50	; 0x32
 8000852:	f7ff fe65 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x4B);
 8000856:	204b      	movs	r0, #75	; 0x4b
 8000858:	f7ff fe62 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x3B);
 800085c:	203b      	movs	r0, #59	; 0x3b
 800085e:	f7ff fe5f 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x29);
 8000862:	2029      	movs	r0, #41	; 0x29
 8000864:	f7ff fe5c 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x1F);
 8000868:	201f      	movs	r0, #31
 800086a:	f7ff fe59 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x18);
 800086e:	2018      	movs	r0, #24
 8000870:	f7ff fe56 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 8000874:	2012      	movs	r0, #18
 8000876:	f7ff fe53 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x04);
 800087a:	2004      	movs	r0, #4
 800087c:	f7ff fe50 	bl	8000520 <Lcd_Write_Data>

	Lcd_Write_Data(0x03);
 8000880:	2003      	movs	r0, #3
 8000882:	f7ff fe4d 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 8000886:	2012      	movs	r0, #18
 8000888:	f7ff fe4a 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x1A);
 800088c:	201a      	movs	r0, #26
 800088e:	f7ff fe47 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x24);
 8000892:	2024      	movs	r0, #36	; 0x24
 8000894:	f7ff fe44 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x32);
 8000898:	2032      	movs	r0, #50	; 0x32
 800089a:	f7ff fe41 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x4B);
 800089e:	204b      	movs	r0, #75	; 0x4b
 80008a0:	f7ff fe3e 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x3B);
 80008a4:	203b      	movs	r0, #59	; 0x3b
 80008a6:	f7ff fe3b 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x29);
 80008aa:	2029      	movs	r0, #41	; 0x29
 80008ac:	f7ff fe38 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x1F);
 80008b0:	201f      	movs	r0, #31
 80008b2:	f7ff fe35 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x18);
 80008b6:	2018      	movs	r0, #24
 80008b8:	f7ff fe32 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 80008bc:	2012      	movs	r0, #18
 80008be:	f7ff fe2f 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x04);
 80008c2:	2004      	movs	r0, #4
 80008c4:	f7ff fe2c 	bl	8000520 <Lcd_Write_Data>
	/**/
	//---Gamma setting end--------

	/**/
	Lcd_Write_Reg(0xD0); // Power (charge pump) settings
 80008c8:	20d0      	movs	r0, #208	; 0xd0
 80008ca:	f7ff fe1b 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x99);//DC4~1//A5. Set up clock cycle of the internal step up controller.
 80008ce:	2099      	movs	r0, #153	; 0x99
 80008d0:	f7ff fe26 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x06);//BT // Set Voltage step up factor.
 80008d4:	2006      	movs	r0, #6
 80008d6:	f7ff fe23 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x08);// default according to the datasheet - does nothing.
 80008da:	2008      	movs	r0, #8
 80008dc:	f7ff fe20 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x20);// VCN step up cycles.
 80008e0:	2020      	movs	r0, #32
 80008e2:	f7ff fe1d 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x29);//VC1, VC2// VCI3 voltage = 2.70V;  VCI2 voltage = 3.8V.
 80008e6:	2029      	movs	r0, #41	; 0x29
 80008e8:	f7ff fe1a 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x04);// default
 80008ec:	2004      	movs	r0, #4
 80008ee:	f7ff fe17 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x01);// default
 80008f2:	2001      	movs	r0, #1
 80008f4:	f7ff fe14 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);// default
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff fe11 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x08);// default
 80008fe:	2008      	movs	r0, #8
 8000900:	f7ff fe0e 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x01);// default
 8000904:	2001      	movs	r0, #1
 8000906:	f7ff fe0b 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);// default
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fe08 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x06);// default
 8000910:	2006      	movs	r0, #6
 8000912:	f7ff fe05 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x01);// default
 8000916:	2001      	movs	r0, #1
 8000918:	f7ff fe02 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);// default
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff fdff 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);// default
 8000922:	2000      	movs	r0, #0
 8000924:	f7ff fdfc 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x20);// default
 8000928:	2020      	movs	r0, #32
 800092a:	f7ff fdf9 	bl	8000520 <Lcd_Write_Data>
	/**/

	Lcd_Write_Reg(0xD1);//VCOM setting
 800092e:	20d1      	movs	r0, #209	; 0xd1
 8000930:	f7ff fde8 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x00);//disable write to VDC[7:0].
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff fdf3 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x20);//45 38 VPLVL// voltage of ? correction registers for positive polarity
 800093a:	2020      	movs	r0, #32
 800093c:	f7ff fdf0 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x20);//45 38 VNLVL// voltage of ? correction registers for negative polarity
 8000940:	2020      	movs	r0, #32
 8000942:	f7ff fded 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x15);//32 2A VCOMDC// VNLVL x 0.063
 8000946:	2015      	movs	r0, #21
 8000948:	f7ff fdea 	bl	8000520 <Lcd_Write_Data>

	Lcd_Write_Reg(0xE0);//NVM Access Control
 800094c:	20e0      	movs	r0, #224	; 0xe0
 800094e:	f7ff fdd9 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x00);//NVM access is disabled
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff fde4 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);//Erase operation (disabled).
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff fde1 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);//TE pin works as tearing effect pin.
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff fdde 	bl	8000520 <Lcd_Write_Data>
	// should be one more Lcd_Write_Data(0x00); according to the datasheet.

	Lcd_Write_Reg(0xE1); //set_DDB_write_control
 8000964:	20e1      	movs	r0, #225	; 0xe1
 8000966:	f7ff fdcd 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x00);
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fdd8 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff fdd5 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff fdd2 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);
 800097c:	2000      	movs	r0, #0
 800097e:	f7ff fdcf 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff fdcc 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fdc9 	bl	8000520 <Lcd_Write_Data>

	Lcd_Write_Reg(0xE2); //NVM Load Control
 800098e:	20e2      	movs	r0, #226	; 0xe2
 8000990:	f7ff fdb8 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x00); // does not execute data load from the NVM to each command
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff fdc3 	bl	8000520 <Lcd_Write_Data>

	Lcd_Write_Reg(0x36); //set_address_mode
 800099a:	2036      	movs	r0, #54	; 0x36
 800099c:	f7ff fdb2 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x20|0x00|0x01); // data is not flipped in any way?
 80009a0:	2021      	movs	r0, #33	; 0x21
 80009a2:	f7ff fdbd 	bl	8000520 <Lcd_Write_Data>

	Lcd_Write_Reg(0x3A); // set_pixel_format
 80009a6:	203a      	movs	r0, #58	; 0x3a
 80009a8:	f7ff fdac 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x55);// 16-Bit/pixel = 55h, 24-bit/pixel = 77h
 80009ac:	2055      	movs	r0, #85	; 0x55
 80009ae:	f7ff fdb7 	bl	8000520 <Lcd_Write_Data>

	Lcd_Write_Reg(0x2A); //set_column_address
 80009b2:	202a      	movs	r0, #42	; 0x2a
 80009b4:	f7ff fda6 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x00); // starts from 0th frame buffer address
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff fdb1 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff fdae 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x01);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fdab 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0xDF);//320 - uses all columns
 80009ca:	20df      	movs	r0, #223	; 0xdf
 80009cc:	e004      	b.n	80009d8 <Init_Disp+0x404>
 80009ce:	bf00      	nop
 80009d0:	58020c00 	.word	0x58020c00
 80009d4:	58020400 	.word	0x58020400
 80009d8:	f7ff fda2 	bl	8000520 <Lcd_Write_Data>

	Lcd_Write_Reg(0x2B); //set_page_address
 80009dc:	202b      	movs	r0, #43	; 0x2b
 80009de:	f7ff fd91 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data(0x00); // starts from 0th frame buffer address
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fd9c 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff fd99 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x01);
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff fd96 	bl	8000520 <Lcd_Write_Data>
	Lcd_Write_Data(0x3F);//480 - uses all lines in the frame buffer
 80009f4:	203f      	movs	r0, #63	; 0x3f
 80009f6:	f7ff fd93 	bl	8000520 <Lcd_Write_Data>
	//  Lcd_Write_Data(0x00); // starts from 0th frame buffer address
	//  Lcd_Write_Data(0x00);
	//  Lcd_Write_Data(0x01);
	//  Lcd_Write_Data(0xDF);//480 - uses all lines in the frame buffer

	Lcd_Write_Reg(0x29); //set_display_on - This command causes the display module to start displaying the image data on the display device.
 80009fa:	2029      	movs	r0, #41	; 0x29
 80009fc:	f7ff fd82 	bl	8000504 <Lcd_Write_Reg>
	HAL_Delay(20);
 8000a00:	2014      	movs	r0, #20
 8000a02:	f000 fe69 	bl	80016d8 <HAL_Delay>
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop

08000a0c <ili9481_Flood>:
//         Lcd_Write_Data (color);
//       }
//    }
//}
// =====================================================================
void ili9481_Flood(uint16_t color,uint32_t len){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	80fb      	strh	r3, [r7, #6]
	uint16_t blocks;
	uint8_t i;

	//HAL_SRAM_Write_16b(&hsram1, (uint32_t*)(LCD_REG), &reg1, 1);
	//HAL_SRAM_Write_16b(&hsram1, (uint32_t*)(LCD_DATA), color_arr, 1);
	Lcd_Write_Reg(0x2C);
 8000a18:	202c      	movs	r0, #44	; 0x2c
 8000a1a:	f7ff fd73 	bl	8000504 <Lcd_Write_Reg>
	Lcd_Write_Data (color);
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fd7d 	bl	8000520 <Lcd_Write_Data>

	len--;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	603b      	str	r3, [r7, #0]
	blocks=(uint16_t)(len/64);//64pixels/blocks
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	099b      	lsrs	r3, r3, #6
 8000a30:	81fb      	strh	r3, [r7, #14]
	while(blocks--)
 8000a32:	e01b      	b.n	8000a6c <ili9481_Flood+0x60>
	{
		i=16;
 8000a34:	2310      	movs	r3, #16
 8000a36:	737b      	strb	r3, [r7, #13]
		do
		{
			//HAL_SRAM_Write_16b(&hsram1, (uint32_t*)(LCD_DATA), color_arr, 5);
			Lcd_Write_Data (color);
 8000a38:	88fb      	ldrh	r3, [r7, #6]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fd70 	bl	8000520 <Lcd_Write_Data>
			Lcd_Write_Data (color);
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fd6c 	bl	8000520 <Lcd_Write_Data>
			Lcd_Write_Data (color);
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fd68 	bl	8000520 <Lcd_Write_Data>
			Lcd_Write_Data (color);
 8000a50:	88fb      	ldrh	r3, [r7, #6]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fd64 	bl	8000520 <Lcd_Write_Data>
			Lcd_Write_Data (color);
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fd60 	bl	8000520 <Lcd_Write_Data>
		}while(--i);
 8000a60:	7b7b      	ldrb	r3, [r7, #13]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	737b      	strb	r3, [r7, #13]
 8000a66:	7b7b      	ldrb	r3, [r7, #13]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1e5      	bne.n	8000a38 <ili9481_Flood+0x2c>
	while(blocks--)
 8000a6c:	89fb      	ldrh	r3, [r7, #14]
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	81fa      	strh	r2, [r7, #14]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1de      	bne.n	8000a34 <ili9481_Flood+0x28>
	}
	//Fill any remaining pixels (1 to 64);
	for(i=(uint8_t)len&63;i--;){
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a7e:	737b      	strb	r3, [r7, #13]
 8000a80:	e003      	b.n	8000a8a <ili9481_Flood+0x7e>
		Lcd_Write_Data(color);
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fd4b 	bl	8000520 <Lcd_Write_Data>
	for(i=(uint8_t)len&63;i--;){
 8000a8a:	7b7b      	ldrb	r3, [r7, #13]
 8000a8c:	1e5a      	subs	r2, r3, #1
 8000a8e:	737a      	strb	r2, [r7, #13]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1f6      	bne.n	8000a82 <ili9481_Flood+0x76>
	}
	//HAL_SRAM_Write_16b(&hsram1, (uint32_t*)(LCD_DATA), color_arr, len & 63);
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <ili9481_FillScreen>:
// =====================================================================
void ili9481_FillScreen(uint16_t color)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	80fb      	strh	r3, [r7, #6]
        ili9481_SetAddrWindow(0,0,X_SIZE-1,Y_SIZE-1); //
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <ili9481_FillScreen+0x44>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <ili9481_FillScreen+0x48>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fd3d 	bl	800053c <ili9481_SetAddrWindow>
        ili9481_Flood(color,(long)X_SIZE*(long)Y_SIZE);
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <ili9481_FillScreen+0x44>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <ili9481_FillScreen+0x48>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	fb02 f303 	mul.w	r3, r2, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff98 	bl	8000a0c <ili9481_Flood>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	24000008 	.word	0x24000008
 8000ae8:	2400000a 	.word	0x2400000a

08000aec <r61529_WriteChar>:
		ili9481_DrawPixel(x0+y,y0-x,color);
		ili9481_DrawPixel(x0-y,y0-x,color);
	}
}

static void r61529_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor){
 8000aec:	b082      	sub	sp, #8
 8000aee:	b590      	push	{r4, r7, lr}
 8000af0:	b087      	sub	sp, #28
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000af6:	4603      	mov	r3, r0
 8000af8:	80fb      	strh	r3, [r7, #6]
 8000afa:	460b      	mov	r3, r1
 8000afc:	80bb      	strh	r3, [r7, #4]
 8000afe:	4613      	mov	r3, r2
 8000b00:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ili9481_SetAddrWindow(x, y, x+font.width-1, y+font.height-1);
 8000b02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	b29c      	uxth	r4, r3
 8000b12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	88bb      	ldrh	r3, [r7, #4]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	88b9      	ldrh	r1, [r7, #4]
 8000b24:	88f8      	ldrh	r0, [r7, #6]
 8000b26:	4622      	mov	r2, r4
 8000b28:	f7ff fd08 	bl	800053c <ili9481_SetAddrWindow>

    for(i = 0; i < font.height; i++){
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e02d      	b.n	8000b8e <r61529_WriteChar+0xa2>
        b = font.data[(ch - 32) * font.height + i];
 8000b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	3b20      	subs	r3, #32
 8000b38:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8000b3c:	fb01 f303 	mul.w	r3, r1, r3
 8000b40:	4619      	mov	r1, r3
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	440b      	add	r3, r1
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
        for(j = 0; j < font.width; j++){
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	e013      	b.n	8000b7c <r61529_WriteChar+0x90>
            if((b << j) & 0x8000){
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d004      	beq.n	8000b6e <r61529_WriteChar+0x82>
                Lcd_Write_Data(color);
 8000b64:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fcda 	bl	8000520 <Lcd_Write_Data>
 8000b6c:	e003      	b.n	8000b76 <r61529_WriteChar+0x8a>
            }else{
                Lcd_Write_Data(bgcolor);
 8000b6e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fcd5 	bl	8000520 <Lcd_Write_Data>
        for(j = 0; j < font.width; j++){
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b80:	461a      	mov	r2, r3
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d3e5      	bcc.n	8000b54 <r61529_WriteChar+0x68>
    for(i = 0; i < font.height; i++){
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b92:	461a      	mov	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d3cb      	bcc.n	8000b32 <r61529_WriteChar+0x46>
            }
        }
    }
}
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	371c      	adds	r7, #28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ba6:	b002      	add	sp, #8
 8000ba8:	4770      	bx	lr
	...

08000bac <r61529_WriteString>:

void r61529_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor){
 8000bac:	b082      	sub	sp, #8
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af04      	add	r7, sp, #16
 8000bb4:	603a      	str	r2, [r7, #0]
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	4603      	mov	r3, r0
 8000bba:	80fb      	strh	r3, [r7, #6]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	80bb      	strh	r3, [r7, #4]
    while(*str){
 8000bc0:	e031      	b.n	8000c26 <r61529_WriteString+0x7a>
        if(x + font.width >= X_SIZE){
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	7d3a      	ldrb	r2, [r7, #20]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a1d      	ldr	r2, [pc, #116]	; (8000c40 <r61529_WriteString+0x94>)
 8000bca:	8812      	ldrh	r2, [r2, #0]
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	db15      	blt.n	8000bfc <r61529_WriteString+0x50>
            x = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000bd4:	7d7b      	ldrb	r3, [r7, #21]
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	88bb      	ldrh	r3, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	80bb      	strh	r3, [r7, #4]

            if(y + font.height >= Y_SIZE){
 8000bde:	88bb      	ldrh	r3, [r7, #4]
 8000be0:	7d7a      	ldrb	r2, [r7, #21]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <r61529_WriteString+0x98>)
 8000be6:	8812      	ldrh	r2, [r2, #0]
 8000be8:	4293      	cmp	r3, r2
 8000bea:	da21      	bge.n	8000c30 <r61529_WriteString+0x84>
                break;
            }

            if(*str == ' '){
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b20      	cmp	r3, #32
 8000bf2:	d103      	bne.n	8000bfc <r61529_WriteString+0x50>
                // skip spaces in the beginning of the new line
                str++;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	603b      	str	r3, [r7, #0]
                continue;
 8000bfa:	e014      	b.n	8000c26 <r61529_WriteString+0x7a>
            }
        }

        r61529_WriteChar(x, y, *str, font, color, bgcolor);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	781a      	ldrb	r2, [r3, #0]
 8000c00:	88b9      	ldrh	r1, [r7, #4]
 8000c02:	88f8      	ldrh	r0, [r7, #6]
 8000c04:	8c3b      	ldrh	r3, [r7, #32]
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	8bbb      	ldrh	r3, [r7, #28]
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	f7ff ff6b 	bl	8000aec <r61529_WriteChar>
        x += font.width;
 8000c16:	7d3b      	ldrb	r3, [r7, #20]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	80fb      	strh	r3, [r7, #6]
        str++;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	603b      	str	r3, [r7, #0]
    while(*str){
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1c9      	bne.n	8000bc2 <r61529_WriteString+0x16>
    }
}
 8000c2e:	e000      	b.n	8000c32 <r61529_WriteString+0x86>
                break;
 8000c30:	bf00      	nop
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c3c:	b002      	add	sp, #8
 8000c3e:	4770      	bx	lr
 8000c40:	24000008 	.word	0x24000008
 8000c44:	2400000a 	.word	0x2400000a

08000c48 <MCU_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MCU_Init(){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af04      	add	r7, sp, #16
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
	PD0   ------> FMC_D2
	PD1   ------> FMC_D3
	PD4   ------> FMC_NOE
	PD5   ------> FMC_NWE
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c5c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000c60:	607b      	str	r3, [r7, #4]
							|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4823      	ldr	r0, [pc, #140]	; (8000d00 <MCU_Init+0xb8>)
 8000c74:	f000 fe70 	bl	8001958 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000c78:	f64c 7333 	movw	r3, #53043	; 0xcf33
 8000c7c:	607b      	str	r3, [r7, #4]
							|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	481d      	ldr	r0, [pc, #116]	; (8000d04 <MCU_Init+0xbc>)
 8000c90:	f000 fe62 	bl	8001958 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4817      	ldr	r0, [pc, #92]	; (8000d08 <MCU_Init+0xc0>)
 8000caa:	f000 fe55 	bl	8001958 <HAL_GPIO_Init>


	/*--------------------------------------------------------------------------*/
	/*--------------------------------------------------------------------------*/
	/*--------------------------------------------------------------------------*/
	HAL_NVIC_SetPriority(SysTick_IRQn, 0x0, 0x0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb6:	f000 fe1a 	bl	80018ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SysTick_IRQn);
 8000cba:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbe:	f000 fe30 	bl	8001922 <HAL_NVIC_EnableIRQ>

	/** Initialize human interfaces */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000cc2:	2108      	movs	r1, #8
 8000cc4:	4811      	ldr	r0, [pc, #68]	; (8000d0c <MCU_Init+0xc4>)
 8000cc6:	f004 f803 	bl	8004cd0 <HAL_TIM_PWM_Start>
	Init_FT5436();
 8000cca:	f7ff fb05 	bl	80002d8 <Init_FT5436>
	Init_Disp();
 8000cce:	f7ff fc81 	bl	80005d4 <Init_Disp>

	/** Draw on screen **/
	ili9481_FillScreen(WHITE);
 8000cd2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cd6:	f7ff fee3 	bl	8000aa0 <ili9481_FillScreen>
	r61529_WriteString(170, 150, "Hello, World!", Font_11x18, BLACK, WHITE);
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <MCU_Init+0xc8>)
 8000cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce0:	9202      	str	r2, [sp, #8]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	9201      	str	r2, [sp, #4]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	9200      	str	r2, [sp, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <MCU_Init+0xcc>)
 8000cee:	2196      	movs	r1, #150	; 0x96
 8000cf0:	20aa      	movs	r0, #170	; 0xaa
 8000cf2:	f7ff ff5b 	bl	8000bac <r61529_WriteString>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	58021000 	.word	0x58021000
 8000d04:	58020c00 	.word	0x58020c00
 8000d08:	58020800 	.word	0x58020800
 8000d0c:	2400008c 	.word	0x2400008c
 8000d10:	24000000 	.word	0x24000000
 8000d14:	080059cc 	.word	0x080059cc

08000d18 <Blink_LED>:

void Blink_LED(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	if(wait_ms_ch(0, 2000)){	//750
 8000d1c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 fbc9 	bl	80014b8 <wait_ms_ch>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d011      	beq.n	8000d50 <Blink_LED+0x38>
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) != GPIO_PIN_SET){
 8000d2c:	2108      	movs	r1, #8
 8000d2e:	4809      	ldr	r0, [pc, #36]	; (8000d54 <Blink_LED+0x3c>)
 8000d30:	f000 ffc2 	bl	8001cb8 <HAL_GPIO_ReadPin>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d005      	beq.n	8000d46 <Blink_LED+0x2e>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <Blink_LED+0x3c>)
 8000d40:	f000 ffd2 	bl	8001ce8 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
		}else{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
		}
	}
}
 8000d44:	e004      	b.n	8000d50 <Blink_LED+0x38>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2108      	movs	r1, #8
 8000d4a:	4802      	ldr	r0, [pc, #8]	; (8000d54 <Blink_LED+0x3c>)
 8000d4c:	f000 ffcc 	bl	8001ce8 <HAL_GPIO_WritePin>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58021000 	.word	0x58021000

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5c:	f000 fc2a 	bl	80015b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d60:	f000 f80c 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d64:	f000 f920 	bl	8000fa8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d68:	f000 f8c4 	bl	8000ef4 <MX_TIM2_Init>
  MX_I2C4_Init();
 8000d6c:	f000 f882 	bl	8000e74 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  MCU_Init();
 8000d70:	f7ff ff6a 	bl	8000c48 <MCU_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  Blink_LED();
 8000d74:	f7ff ffd0 	bl	8000d18 <Blink_LED>
 8000d78:	e7fc      	b.n	8000d74 <main+0x1c>
	...

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b09c      	sub	sp, #112	; 0x70
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	224c      	movs	r2, #76	; 0x4c
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f004 fde6 	bl	800595c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2220      	movs	r2, #32
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f004 fde0 	bl	800595c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f001 fc0d 	bl	80025bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <SystemClock_Config+0xf0>)
 8000da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000daa:	4a30      	ldr	r2, [pc, #192]	; (8000e6c <SystemClock_Config+0xf0>)
 8000dac:	f023 0301 	bic.w	r3, r3, #1
 8000db0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <SystemClock_Config+0xf0>)
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <SystemClock_Config+0xf4>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dc4:	4a2a      	ldr	r2, [pc, #168]	; (8000e70 <SystemClock_Config+0xf4>)
 8000dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <SystemClock_Config+0xf4>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dd8:	bf00      	nop
 8000dda:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <SystemClock_Config+0xf4>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000de6:	d1f8      	bne.n	8000dda <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de8:	2302      	movs	r3, #2
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df0:	2340      	movs	r3, #64	; 0x40
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df4:	2302      	movs	r3, #2
 8000df6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000dfc:	2320      	movs	r3, #32
 8000dfe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000e00:	2378      	movs	r3, #120	; 0x78
 8000e02:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 8000e08:	2310      	movs	r3, #16
 8000e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000e10:	2304      	movs	r3, #4
 8000e12:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 fc05 	bl	8002630 <HAL_RCC_OscConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e2c:	f000 f96e 	bl	800110c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e30:	233f      	movs	r3, #63	; 0x3f
 8000e32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e34:	2303      	movs	r3, #3
 8000e36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2102      	movs	r1, #2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f002 f845 	bl	8002ee4 <HAL_RCC_ClockConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000e60:	f000 f954 	bl	800110c <Error_Handler>
  }
}
 8000e64:	bf00      	nop
 8000e66:	3770      	adds	r7, #112	; 0x70
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	58000400 	.word	0x58000400
 8000e70:	58024800 	.word	0x58024800

08000e74 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <MX_I2C4_Init+0x74>)
 8000e7a:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <MX_I2C4_Init+0x78>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x107075B0;
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <MX_I2C4_Init+0x74>)
 8000e80:	4a1b      	ldr	r2, [pc, #108]	; (8000ef0 <MX_I2C4_Init+0x7c>)
 8000e82:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <MX_I2C4_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MX_I2C4_Init+0x74>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <MX_I2C4_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_I2C4_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_I2C4_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_I2C4_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_I2C4_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000eae:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <MX_I2C4_Init+0x74>)
 8000eb0:	f000 ff58 	bl	8001d64 <HAL_I2C_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000eba:	f000 f927 	bl	800110c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec2:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <MX_I2C4_Init+0x74>)
 8000ec4:	f001 fae2 	bl	800248c <HAL_I2CEx_ConfigAnalogFilter>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8000ece:	f000 f91d 	bl	800110c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_I2C4_Init+0x74>)
 8000ed6:	f001 fb24 	bl	8002522 <HAL_I2CEx_ConfigDigitalFilter>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8000ee0:	f000 f914 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	24000038 	.word	0x24000038
 8000eec:	58001c00 	.word	0x58001c00
 8000ef0:	107075b0 	.word	0x107075b0

08000ef4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
 8000f14:	615a      	str	r2, [r3, #20]
 8000f16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_TIM2_Init+0xb0>)
 8000f1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50;
 8000f20:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <MX_TIM2_Init+0xb0>)
 8000f22:	2232      	movs	r2, #50	; 0x32
 8000f24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_TIM2_Init+0xb0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19650 - 1;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_TIM2_Init+0xb0>)
 8000f2e:	f644 42c1 	movw	r2, #19649	; 0x4cc1
 8000f32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_TIM2_Init+0xb0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_TIM2_Init+0xb0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f40:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <MX_TIM2_Init+0xb0>)
 8000f42:	f003 fe6d 	bl	8004c20 <HAL_TIM_PWM_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000f4c:	f000 f8de 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <MX_TIM2_Init+0xb0>)
 8000f60:	f004 fc6e 	bl	8005840 <HAL_TIMEx_MasterConfigSynchronization>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000f6a:	f000 f8cf 	bl	800110c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6e:	2360      	movs	r3, #96	; 0x60
 8000f70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9825;
 8000f72:	f242 6361 	movw	r3, #9825	; 0x2661
 8000f76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	2208      	movs	r2, #8
 8000f84:	4619      	mov	r1, r3
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <MX_TIM2_Init+0xb0>)
 8000f88:	f003 ffb0 	bl	8004eec <HAL_TIM_PWM_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000f92:	f000 f8bb 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f96:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <MX_TIM2_Init+0xb0>)
 8000f98:	f000 f974 	bl	8001284 <HAL_TIM_MspPostInit>

}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	; 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2400008c 	.word	0x2400008c

08000fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fbe:	4b4f      	ldr	r3, [pc, #316]	; (80010fc <MX_GPIO_Init+0x154>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a4d      	ldr	r2, [pc, #308]	; (80010fc <MX_GPIO_Init+0x154>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b4b      	ldr	r3, [pc, #300]	; (80010fc <MX_GPIO_Init+0x154>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b47      	ldr	r3, [pc, #284]	; (80010fc <MX_GPIO_Init+0x154>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	4a46      	ldr	r2, [pc, #280]	; (80010fc <MX_GPIO_Init+0x154>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fec:	4b43      	ldr	r3, [pc, #268]	; (80010fc <MX_GPIO_Init+0x154>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b40      	ldr	r3, [pc, #256]	; (80010fc <MX_GPIO_Init+0x154>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	4a3e      	ldr	r2, [pc, #248]	; (80010fc <MX_GPIO_Init+0x154>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100a:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <MX_GPIO_Init+0x154>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001018:	4b38      	ldr	r3, [pc, #224]	; (80010fc <MX_GPIO_Init+0x154>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	4a37      	ldr	r2, [pc, #220]	; (80010fc <MX_GPIO_Init+0x154>)
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001028:	4b34      	ldr	r3, [pc, #208]	; (80010fc <MX_GPIO_Init+0x154>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	4b31      	ldr	r3, [pc, #196]	; (80010fc <MX_GPIO_Init+0x154>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	4a2f      	ldr	r2, [pc, #188]	; (80010fc <MX_GPIO_Init+0x154>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001046:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <MX_GPIO_Init+0x154>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2108      	movs	r1, #8
 8001058:	4829      	ldr	r0, [pc, #164]	; (8001100 <MX_GPIO_Init+0x158>)
 800105a:	f000 fe45 	bl	8001ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FT5436_RESET_GPIO_Port, FT5436_RESET_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	4828      	ldr	r0, [pc, #160]	; (8001104 <MX_GPIO_Init+0x15c>)
 8001064:	f000 fe40 	bl	8001ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R16529_RESET_GPIO_Port, R16529_RESET_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106e:	4826      	ldr	r0, [pc, #152]	; (8001108 <MX_GPIO_Init+0x160>)
 8001070:	f000 fe3a 	bl	8001ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001074:	2308      	movs	r3, #8
 8001076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	481d      	ldr	r0, [pc, #116]	; (8001100 <MX_GPIO_Init+0x158>)
 800108c:	f000 fc64 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001090:	2340      	movs	r3, #64	; 0x40
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001094:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	4817      	ldr	r0, [pc, #92]	; (8001104 <MX_GPIO_Init+0x15c>)
 80010a6:	f000 fc57 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : FT5436_RESET_Pin */
  GPIO_InitStruct.Pin = FT5436_RESET_Pin;
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FT5436_RESET_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4810      	ldr	r0, [pc, #64]	; (8001104 <MX_GPIO_Init+0x15c>)
 80010c2:	f000 fc49 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : R16529_RESET_Pin */
  GPIO_InitStruct.Pin = R16529_RESET_Pin;
 80010c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R16529_RESET_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	480a      	ldr	r0, [pc, #40]	; (8001108 <MX_GPIO_Init+0x160>)
 80010e0:	f000 fc3a 	bl	8001958 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2101      	movs	r1, #1
 80010e8:	2017      	movs	r0, #23
 80010ea:	f000 fc00 	bl	80018ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010ee:	2017      	movs	r0, #23
 80010f0:	f000 fc17 	bl	8001922 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	; 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	58024400 	.word	0x58024400
 8001100:	58021000 	.word	0x58021000
 8001104:	58020000 	.word	0x58020000
 8001108:	58020400 	.word	0x58020400

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_MspInit+0x30>)
 8001120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001124:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_MspInit+0x30>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_MspInit+0x30>)
 8001130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	58024400 	.word	0x58024400

0800114c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b0ba      	sub	sp, #232	; 0xe8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	22c0      	movs	r2, #192	; 0xc0
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f004 fbf5 	bl	800595c <memset>
  if(hi2c->Instance==I2C4)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a30      	ldr	r2, [pc, #192]	; (8001238 <HAL_I2C_MspInit+0xec>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d158      	bne.n	800122e <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800117c:	f04f 0210 	mov.w	r2, #16
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001188:	2320      	movs	r3, #32
 800118a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 800118c:	23a0      	movs	r3, #160	; 0xa0
 800118e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001190:	2302      	movs	r3, #2
 8001192:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 8;
 8001198:	2308      	movs	r3, #8
 800119a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 800119c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PLL3;
 80011aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 f9c4 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 80011c2:	f7ff ffa3 	bl	800110c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_I2C_MspInit+0xf0>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011cc:	4a1b      	ldr	r2, [pc, #108]	; (800123c <HAL_I2C_MspInit+0xf0>)
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_I2C_MspInit+0xf0>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011e4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ec:	2312      	movs	r3, #18
 80011ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80011fe:	2304      	movs	r3, #4
 8001200:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001204:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001208:	4619      	mov	r1, r3
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <HAL_I2C_MspInit+0xf4>)
 800120c:	f000 fba4 	bl	8001958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_I2C_MspInit+0xf0>)
 8001212:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <HAL_I2C_MspInit+0xf0>)
 8001218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_I2C_MspInit+0xf0>)
 8001222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800122e:	bf00      	nop
 8001230:	37e8      	adds	r7, #232	; 0xe8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	58001c00 	.word	0x58001c00
 800123c:	58024400 	.word	0x58024400
 8001240:	58020c00 	.word	0x58020c00

08001244 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001254:	d10e      	bne.n	8001274 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_TIM_PWM_MspInit+0x3c>)
 8001258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800125c:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_TIM_PWM_MspInit+0x3c>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_TIM_PWM_MspInit+0x3c>)
 8001268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	58024400 	.word	0x58024400

08001284 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a4:	d11f      	bne.n	80012e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_TIM_MspPostInit+0x6c>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_TIM_MspPostInit+0x6c>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_TIM_MspPostInit+0x6c>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	4619      	mov	r1, r3
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <HAL_TIM_MspPostInit+0x70>)
 80012e2:	f000 fb39 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58020400 	.word	0x58020400

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <NMI_Handler+0x4>

080012fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler+0x4>

0800130a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler+0x4>

08001316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001344:	f000 f9a8 	bl	8001698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	2108      	movs	r1, #8
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <EXTI9_5_IRQHandler+0x1c>)
 8001356:	f000 fcc7 	bl	8001ce8 <HAL_GPIO_WritePin>
  touch_move();
 800135a:	f7fe ffe9 	bl	8000330 <touch_move>

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800135e:	2040      	movs	r0, #64	; 0x40
 8001360:	f000 fcdb 	bl	8001d1a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	58021000 	.word	0x58021000

0800136c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001370:	4b37      	ldr	r3, [pc, #220]	; (8001450 <SystemInit+0xe4>)
 8001372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001376:	4a36      	ldr	r2, [pc, #216]	; (8001450 <SystemInit+0xe4>)
 8001378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800137c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001380:	4b34      	ldr	r3, [pc, #208]	; (8001454 <SystemInit+0xe8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 030f 	and.w	r3, r3, #15
 8001388:	2b06      	cmp	r3, #6
 800138a:	d807      	bhi.n	800139c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800138c:	4b31      	ldr	r3, [pc, #196]	; (8001454 <SystemInit+0xe8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 030f 	bic.w	r3, r3, #15
 8001394:	4a2f      	ldr	r2, [pc, #188]	; (8001454 <SystemInit+0xe8>)
 8001396:	f043 0307 	orr.w	r3, r3, #7
 800139a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800139c:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <SystemInit+0xec>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a2d      	ldr	r2, [pc, #180]	; (8001458 <SystemInit+0xec>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <SystemInit+0xec>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <SystemInit+0xec>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4929      	ldr	r1, [pc, #164]	; (8001458 <SystemInit+0xec>)
 80013b4:	4b29      	ldr	r3, [pc, #164]	; (800145c <SystemInit+0xf0>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <SystemInit+0xe8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d007      	beq.n	80013d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <SystemInit+0xe8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 030f 	bic.w	r3, r3, #15
 80013ce:	4a21      	ldr	r2, [pc, #132]	; (8001454 <SystemInit+0xe8>)
 80013d0:	f043 0307 	orr.w	r3, r3, #7
 80013d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <SystemInit+0xec>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <SystemInit+0xec>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <SystemInit+0xec>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <SystemInit+0xec>)
 80013ea:	4a1d      	ldr	r2, [pc, #116]	; (8001460 <SystemInit+0xf4>)
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <SystemInit+0xec>)
 80013f0:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <SystemInit+0xf8>)
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <SystemInit+0xec>)
 80013f6:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <SystemInit+0xfc>)
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <SystemInit+0xec>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <SystemInit+0xec>)
 8001402:	4a19      	ldr	r2, [pc, #100]	; (8001468 <SystemInit+0xfc>)
 8001404:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <SystemInit+0xec>)
 8001408:	2200      	movs	r2, #0
 800140a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <SystemInit+0xec>)
 800140e:	4a16      	ldr	r2, [pc, #88]	; (8001468 <SystemInit+0xfc>)
 8001410:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <SystemInit+0xec>)
 8001414:	2200      	movs	r2, #0
 8001416:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <SystemInit+0xec>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <SystemInit+0xec>)
 800141e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001422:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <SystemInit+0xec>)
 8001426:	2200      	movs	r2, #0
 8001428:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <SystemInit+0x100>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <SystemInit+0x104>)
 8001430:	4013      	ands	r3, r2
 8001432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001436:	d202      	bcs.n	800143e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <SystemInit+0x108>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <SystemInit+0x10c>)
 8001440:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001444:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00
 8001454:	52002000 	.word	0x52002000
 8001458:	58024400 	.word	0x58024400
 800145c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001460:	02020200 	.word	0x02020200
 8001464:	01ff0000 	.word	0x01ff0000
 8001468:	01010280 	.word	0x01010280
 800146c:	5c001000 	.word	0x5c001000
 8001470:	ffff0000 	.word	0xffff0000
 8001474:	51008108 	.word	0x51008108
 8001478:	52004000 	.word	0x52004000

0800147c <GetSysTickTimer_ms>:

/* Private function prototypes -----------------------------------------------*/

// return the systicks as milliseconds
inline uint32_t GetSysTickTimer_ms(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
    return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <GetSysTickTimer_ms+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	24000130 	.word	0x24000130

08001494 <reset_wait_ms_ch>:
void clear_wait_ms_ch(uint8_t channel){

    msResetFlag_ch[channel] = 1;
}

void reset_wait_ms_ch(uint8_t channel){
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]

  msWaitTime_ch[channel] = GetSysTickTimer_ms();
 800149e:	79fc      	ldrb	r4, [r7, #7]
 80014a0:	f7ff ffec 	bl	800147c <GetSysTickTimer_ms>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a03      	ldr	r2, [pc, #12]	; (80014b4 <reset_wait_ms_ch+0x20>)
 80014a8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd90      	pop	{r4, r7, pc}
 80014b4:	240000e8 	.word	0x240000e8

080014b8 <wait_ms_ch>:
void set_wait_ms_ch(uint8_t channel, uint32_t time){

    msWaitTime_ch[channel] = time;
}

uint8_t wait_ms_ch(uint8_t channel, uint32_t time){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
    static uint32_t start, end;

    if(msResetFlag_ch[channel]){
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	4a22      	ldr	r2, [pc, #136]	; (8001550 <wait_ms_ch+0x98>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <wait_ms_ch+0x26>

      msResetFlag_ch[channel] = 0;
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	4a1f      	ldr	r2, [pc, #124]	; (8001550 <wait_ms_ch+0x98>)
 80014d2:	2100      	movs	r1, #0
 80014d4:	54d1      	strb	r1, [r2, r3]
      reset_wait_ms_ch(channel);
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ffdb 	bl	8001494 <reset_wait_ms_ch>
    }

    start = msWaitTime_ch[channel];
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	4a1c      	ldr	r2, [pc, #112]	; (8001554 <wait_ms_ch+0x9c>)
 80014e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e6:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <wait_ms_ch+0xa0>)
 80014e8:	6013      	str	r3, [r2, #0]
    end = start + time;
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <wait_ms_ch+0xa0>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	4a1a      	ldr	r2, [pc, #104]	; (800155c <wait_ms_ch+0xa4>)
 80014f4:	6013      	str	r3, [r2, #0]
    if(start < end){
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <wait_ms_ch+0xa0>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <wait_ms_ch+0xa4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d20c      	bcs.n	800151c <wait_ms_ch+0x64>
      if(GetSysTickTimer_ms() >= end){
 8001502:	f7ff ffbb 	bl	800147c <GetSysTickTimer_ms>
 8001506:	4602      	mov	r2, r0
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <wait_ms_ch+0xa4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d319      	bcc.n	8001544 <wait_ms_ch+0x8c>
        reset_wait_ms_ch(channel);
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ffbe 	bl	8001494 <reset_wait_ms_ch>
        return (1);
 8001518:	2301      	movs	r3, #1
 800151a:	e014      	b.n	8001546 <wait_ms_ch+0x8e>
      }
    }else{
      if((GetSysTickTimer_ms() < start) && (GetSysTickTimer_ms() > end)){
 800151c:	f7ff ffae 	bl	800147c <GetSysTickTimer_ms>
 8001520:	4602      	mov	r2, r0
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <wait_ms_ch+0xa0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d20c      	bcs.n	8001544 <wait_ms_ch+0x8c>
 800152a:	f7ff ffa7 	bl	800147c <GetSysTickTimer_ms>
 800152e:	4602      	mov	r2, r0
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <wait_ms_ch+0xa4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d905      	bls.n	8001544 <wait_ms_ch+0x8c>
        reset_wait_ms_ch(channel);
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ffaa 	bl	8001494 <reset_wait_ms_ch>
        return (1);
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <wait_ms_ch+0x8e>
      }
    }
    return (0);
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	240000d8 	.word	0x240000d8
 8001554:	240000e8 	.word	0x240000e8
 8001558:	24000128 	.word	0x24000128
 800155c:	2400012c 	.word	0x2400012c

08001560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001598 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001564:	f7ff ff02 	bl	800136c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800156a:	490d      	ldr	r1, [pc, #52]	; (80015a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800156c:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001580:	4c0a      	ldr	r4, [pc, #40]	; (80015ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158e:	f004 f9ed 	bl	800596c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001592:	f7ff fbe1 	bl	8000d58 <main>
  bx  lr
 8001596:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001598:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800159c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015a0:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 80015a4:	08006750 	.word	0x08006750
  ldr r2, =_sbss
 80015a8:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 80015ac:	24000134 	.word	0x24000134

080015b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC3_IRQHandler>
	...

080015b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ba:	2003      	movs	r0, #3
 80015bc:	f000 f98c 	bl	80018d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015c0:	f001 fe46 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 80015c4:	4602      	mov	r2, r0
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_Init+0x68>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	4913      	ldr	r1, [pc, #76]	; (8001620 <HAL_Init+0x6c>)
 80015d2:	5ccb      	ldrb	r3, [r1, r3]
 80015d4:	f003 031f 	and.w	r3, r3, #31
 80015d8:	fa22 f303 	lsr.w	r3, r2, r3
 80015dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_Init+0x68>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <HAL_Init+0x6c>)
 80015e8:	5cd3      	ldrb	r3, [r2, r3]
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	fa22 f303 	lsr.w	r3, r2, r3
 80015f4:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <HAL_Init+0x70>)
 80015f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <HAL_Init+0x74>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015fe:	200f      	movs	r0, #15
 8001600:	f000 f814 	bl	800162c <HAL_InitTick>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e002      	b.n	8001614 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800160e:	f7ff fd83 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	58024400 	.word	0x58024400
 8001620:	08006738 	.word	0x08006738
 8001624:	24000010 	.word	0x24000010
 8001628:	2400000c 	.word	0x2400000c

0800162c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001634:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_InitTick+0x60>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e021      	b.n	8001684 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_InitTick+0x64>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_InitTick+0x60>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001652:	fbb2 f3f3 	udiv	r3, r2, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f971 	bl	800193e <HAL_SYSTICK_Config>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e00e      	b.n	8001684 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	d80a      	bhi.n	8001682 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166c:	2200      	movs	r2, #0
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f000 f93b 	bl	80018ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001678:	4a06      	ldr	r2, [pc, #24]	; (8001694 <HAL_InitTick+0x68>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e000      	b.n	8001684 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	24000018 	.word	0x24000018
 8001690:	2400000c 	.word	0x2400000c
 8001694:	24000014 	.word	0x24000014

08001698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_IncTick+0x20>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_IncTick+0x24>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <HAL_IncTick+0x24>)
 80016aa:	6013      	str	r3, [r2, #0]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	24000018 	.word	0x24000018
 80016bc:	24000130 	.word	0x24000130

080016c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <HAL_GetTick+0x14>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	24000130 	.word	0x24000130

080016d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e0:	f7ff ffee 	bl	80016c0 <HAL_GetTick>
 80016e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f0:	d005      	beq.n	80016fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_Delay+0x44>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016fe:	bf00      	nop
 8001700:	f7ff ffde 	bl	80016c0 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	429a      	cmp	r2, r3
 800170e:	d8f7      	bhi.n	8001700 <HAL_Delay+0x28>
  {
  }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	24000018 	.word	0x24000018

08001720 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_GetREVID+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	0c1b      	lsrs	r3, r3, #16
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	5c001000 	.word	0x5c001000

08001738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <__NVIC_SetPriorityGrouping+0x40>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001754:	4013      	ands	r3, r2
 8001756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <__NVIC_SetPriorityGrouping+0x44>)
 8001762:	4313      	orrs	r3, r2
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <__NVIC_SetPriorityGrouping+0x40>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00
 800177c:	05fa0000 	.word	0x05fa0000

08001780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <__NVIC_GetPriorityGrouping+0x18>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	0a1b      	lsrs	r3, r3, #8
 800178a:	f003 0307 	and.w	r3, r3, #7
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	db0b      	blt.n	80017c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	f003 021f 	and.w	r2, r3, #31
 80017b4:	4907      	ldr	r1, [pc, #28]	; (80017d4 <__NVIC_EnableIRQ+0x38>)
 80017b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	2001      	movs	r0, #1
 80017be:	fa00 f202 	lsl.w	r2, r0, r2
 80017c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000e100 	.word	0xe000e100

080017d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	db0a      	blt.n	8001802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	490c      	ldr	r1, [pc, #48]	; (8001824 <__NVIC_SetPriority+0x4c>)
 80017f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	440b      	add	r3, r1
 80017fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001800:	e00a      	b.n	8001818 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4908      	ldr	r1, [pc, #32]	; (8001828 <__NVIC_SetPriority+0x50>)
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	3b04      	subs	r3, #4
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	440b      	add	r3, r1
 8001816:	761a      	strb	r2, [r3, #24]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000e100 	.word	0xe000e100
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f1c3 0307 	rsb	r3, r3, #7
 8001846:	2b04      	cmp	r3, #4
 8001848:	bf28      	it	cs
 800184a:	2304      	movcs	r3, #4
 800184c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3304      	adds	r3, #4
 8001852:	2b06      	cmp	r3, #6
 8001854:	d902      	bls.n	800185c <NVIC_EncodePriority+0x30>
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3b03      	subs	r3, #3
 800185a:	e000      	b.n	800185e <NVIC_EncodePriority+0x32>
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	f04f 32ff 	mov.w	r2, #4294967295
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	401a      	ands	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43d9      	mvns	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	4313      	orrs	r3, r2
         );
}
 8001886:	4618      	mov	r0, r3
 8001888:	3724      	adds	r7, #36	; 0x24
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a4:	d301      	bcc.n	80018aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00f      	b.n	80018ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <SysTick_Config+0x40>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b2:	210f      	movs	r1, #15
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f7ff ff8e 	bl	80017d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <SysTick_Config+0x40>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c2:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <SysTick_Config+0x40>)
 80018c4:	2207      	movs	r2, #7
 80018c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	e000e010 	.word	0xe000e010

080018d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff29 	bl	8001738 <__NVIC_SetPriorityGrouping>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff40 	bl	8001780 <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff90 	bl	800182c <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5f 	bl	80017d8 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff33 	bl	800179c <__NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffa4 	bl	8001894 <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001966:	4b89      	ldr	r3, [pc, #548]	; (8001b8c <HAL_GPIO_Init+0x234>)
 8001968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800196a:	e194      	b.n	8001c96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2101      	movs	r1, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8186 	beq.w	8001c90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b01      	cmp	r3, #1
 800198e:	d005      	beq.n	800199c <HAL_GPIO_Init+0x44>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d130      	bne.n	80019fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019d2:	2201      	movs	r2, #1
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	f003 0201 	and.w	r2, r3, #1
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d017      	beq.n	8001a3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d123      	bne.n	8001a8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	08da      	lsrs	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3208      	adds	r2, #8
 8001a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	08da      	lsrs	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3208      	adds	r2, #8
 8001a88:	69b9      	ldr	r1, [r7, #24]
 8001a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0203 	and.w	r2, r3, #3
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80e0 	beq.w	8001c90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <HAL_GPIO_Init+0x238>)
 8001ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ad6:	4a2e      	ldr	r2, [pc, #184]	; (8001b90 <HAL_GPIO_Init+0x238>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_GPIO_Init+0x238>)
 8001ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aee:	4a29      	ldr	r2, [pc, #164]	; (8001b94 <HAL_GPIO_Init+0x23c>)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a20      	ldr	r2, [pc, #128]	; (8001b98 <HAL_GPIO_Init+0x240>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d052      	beq.n	8001bc0 <HAL_GPIO_Init+0x268>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a1f      	ldr	r2, [pc, #124]	; (8001b9c <HAL_GPIO_Init+0x244>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d031      	beq.n	8001b86 <HAL_GPIO_Init+0x22e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <HAL_GPIO_Init+0x248>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d02b      	beq.n	8001b82 <HAL_GPIO_Init+0x22a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ba4 <HAL_GPIO_Init+0x24c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d025      	beq.n	8001b7e <HAL_GPIO_Init+0x226>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <HAL_GPIO_Init+0x250>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d01f      	beq.n	8001b7a <HAL_GPIO_Init+0x222>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	; (8001bac <HAL_GPIO_Init+0x254>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d019      	beq.n	8001b76 <HAL_GPIO_Init+0x21e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a1a      	ldr	r2, [pc, #104]	; (8001bb0 <HAL_GPIO_Init+0x258>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_GPIO_Init+0x21a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_GPIO_Init+0x25c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00d      	beq.n	8001b6e <HAL_GPIO_Init+0x216>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <HAL_GPIO_Init+0x260>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d007      	beq.n	8001b6a <HAL_GPIO_Init+0x212>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a17      	ldr	r2, [pc, #92]	; (8001bbc <HAL_GPIO_Init+0x264>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_GPIO_Init+0x20e>
 8001b62:	2309      	movs	r3, #9
 8001b64:	e02d      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b66:	230a      	movs	r3, #10
 8001b68:	e02b      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b6a:	2308      	movs	r3, #8
 8001b6c:	e029      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b6e:	2307      	movs	r3, #7
 8001b70:	e027      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b72:	2306      	movs	r3, #6
 8001b74:	e025      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b76:	2305      	movs	r3, #5
 8001b78:	e023      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	e021      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e01f      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e01d      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e01b      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b8a:	bf00      	nop
 8001b8c:	58000080 	.word	0x58000080
 8001b90:	58024400 	.word	0x58024400
 8001b94:	58000400 	.word	0x58000400
 8001b98:	58020000 	.word	0x58020000
 8001b9c:	58020400 	.word	0x58020400
 8001ba0:	58020800 	.word	0x58020800
 8001ba4:	58020c00 	.word	0x58020c00
 8001ba8:	58021000 	.word	0x58021000
 8001bac:	58021400 	.word	0x58021400
 8001bb0:	58021800 	.word	0x58021800
 8001bb4:	58021c00 	.word	0x58021c00
 8001bb8:	58022000 	.word	0x58022000
 8001bbc:	58022400 	.word	0x58022400
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	f002 0203 	and.w	r2, r2, #3
 8001bc8:	0092      	lsls	r2, r2, #2
 8001bca:	4093      	lsls	r3, r2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd2:	4938      	ldr	r1, [pc, #224]	; (8001cb4 <HAL_GPIO_Init+0x35c>)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	3301      	adds	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f47f ae63 	bne.w	800196c <HAL_GPIO_Init+0x14>
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	bf00      	nop
 8001caa:	3724      	adds	r7, #36	; 0x24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	58000400 	.word	0x58000400

08001cb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	887b      	ldrh	r3, [r7, #2]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
 8001cd4:	e001      	b.n	8001cda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cf8:	787b      	ldrb	r3, [r7, #1]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d04:	e003      	b.n	8001d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	041a      	lsls	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	619a      	str	r2, [r3, #24]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 f804 	bl	8001d4e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e07f      	b.n	8001e76 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff f9de 	bl	800114c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2224      	movs	r2, #36	; 0x24
 8001d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001db4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d107      	bne.n	8001dde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	e006      	b.n	8001dec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001dea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d104      	bne.n	8001dfe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <HAL_I2C_Init+0x11c>)
 8001e0a:	430b      	orrs	r3, r1
 8001e0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69d9      	ldr	r1, [r3, #28]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1a      	ldr	r2, [r3, #32]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	02008000 	.word	0x02008000

08001e84 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	460b      	mov	r3, r1
 8001e92:	817b      	strh	r3, [r7, #10]
 8001e94:	4613      	mov	r3, r2
 8001e96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	f040 80da 	bne.w	800205a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_I2C_Master_Transmit+0x30>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e0d3      	b.n	800205c <HAL_I2C_Master_Transmit+0x1d8>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ebc:	f7ff fc00 	bl	80016c0 <HAL_GetTick>
 8001ec0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2319      	movs	r3, #25
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f8f0 	bl	80020b4 <I2C_WaitOnFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0be      	b.n	800205c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2221      	movs	r2, #33	; 0x21
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2210      	movs	r2, #16
 8001eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	893a      	ldrh	r2, [r7, #8]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2bff      	cmp	r3, #255	; 0xff
 8001f0e:	d90e      	bls.n	8001f2e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	22ff      	movs	r2, #255	; 0xff
 8001f14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	8979      	ldrh	r1, [r7, #10]
 8001f1e:	4b51      	ldr	r3, [pc, #324]	; (8002064 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 fa7e 	bl	8002428 <I2C_TransferConfig>
 8001f2c:	e06c      	b.n	8002008 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	8979      	ldrh	r1, [r7, #10]
 8001f40:	4b48      	ldr	r3, [pc, #288]	; (8002064 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 fa6d 	bl	8002428 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001f4e:	e05b      	b.n	8002008 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	6a39      	ldr	r1, [r7, #32]
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 f8fc 	bl	8002152 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e07b      	b.n	800205c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d034      	beq.n	8002008 <HAL_I2C_Master_Transmit+0x184>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d130      	bne.n	8002008 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	2200      	movs	r2, #0
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f87f 	bl	80020b4 <I2C_WaitOnFlagUntilTimeout>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e04d      	b.n	800205c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2bff      	cmp	r3, #255	; 0xff
 8001fc8:	d90e      	bls.n	8001fe8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	22ff      	movs	r2, #255	; 0xff
 8001fce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	8979      	ldrh	r1, [r7, #10]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 fa21 	bl	8002428 <I2C_TransferConfig>
 8001fe6:	e00f      	b.n	8002008 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	8979      	ldrh	r1, [r7, #10]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 fa10 	bl	8002428 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d19e      	bne.n	8001f50 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	6a39      	ldr	r1, [r7, #32]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 f8e2 	bl	80021e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e01a      	b.n	800205c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2220      	movs	r2, #32
 800202c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_I2C_Master_Transmit+0x1e4>)
 800203a:	400b      	ands	r3, r1
 800203c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e000      	b.n	800205c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800205a:	2302      	movs	r3, #2
  }
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	80002000 	.word	0x80002000
 8002068:	fe00e800 	.word	0xfe00e800

0800206c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b02      	cmp	r3, #2
 8002080:	d103      	bne.n	800208a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2200      	movs	r2, #0
 8002088:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d007      	beq.n	80020a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	619a      	str	r2, [r3, #24]
  }
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c4:	e031      	b.n	800212a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d02d      	beq.n	800212a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ce:	f7ff faf7 	bl	80016c0 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d302      	bcc.n	80020e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d122      	bne.n	800212a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	4013      	ands	r3, r2
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	bf0c      	ite	eq
 80020f4:	2301      	moveq	r3, #1
 80020f6:	2300      	movne	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d113      	bne.n	800212a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f043 0220 	orr.w	r2, r3, #32
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699a      	ldr	r2, [r3, #24]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4013      	ands	r3, r2
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	429a      	cmp	r2, r3
 8002138:	bf0c      	ite	eq
 800213a:	2301      	moveq	r3, #1
 800213c:	2300      	movne	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	429a      	cmp	r2, r3
 8002146:	d0be      	beq.n	80020c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800215e:	e033      	b.n	80021c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f87f 	bl	8002268 <I2C_IsErrorOccurred>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e031      	b.n	80021d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217a:	d025      	beq.n	80021c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217c:	f7ff faa0 	bl	80016c0 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	429a      	cmp	r2, r3
 800218a:	d302      	bcc.n	8002192 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d11a      	bne.n	80021c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b02      	cmp	r3, #2
 800219e:	d013      	beq.n	80021c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	f043 0220 	orr.w	r2, r3, #32
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e007      	b.n	80021d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d1c4      	bne.n	8002160 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021ec:	e02f      	b.n	800224e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 f838 	bl	8002268 <I2C_IsErrorOccurred>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e02d      	b.n	800225e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002202:	f7ff fa5d 	bl	80016c0 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	429a      	cmp	r2, r3
 8002210:	d302      	bcc.n	8002218 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d11a      	bne.n	800224e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	2b20      	cmp	r3, #32
 8002224:	d013      	beq.n	800224e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f043 0220 	orr.w	r2, r3, #32
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e007      	b.n	800225e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b20      	cmp	r3, #32
 800225a:	d1c8      	bne.n	80021ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	d068      	beq.n	8002366 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2210      	movs	r2, #16
 800229a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800229c:	e049      	b.n	8002332 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d045      	beq.n	8002332 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022a6:	f7ff fa0b 	bl	80016c0 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d302      	bcc.n	80022bc <I2C_IsErrorOccurred+0x54>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d13a      	bne.n	8002332 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022de:	d121      	bne.n	8002324 <I2C_IsErrorOccurred+0xbc>
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022e6:	d01d      	beq.n	8002324 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d01a      	beq.n	8002324 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80022fe:	f7ff f9df 	bl	80016c0 <HAL_GetTick>
 8002302:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002304:	e00e      	b.n	8002324 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002306:	f7ff f9db 	bl	80016c0 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b19      	cmp	r3, #25
 8002312:	d907      	bls.n	8002324 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	f043 0320 	orr.w	r3, r3, #32
 800231a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002322:	e006      	b.n	8002332 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b20      	cmp	r3, #32
 8002330:	d1e9      	bne.n	8002306 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b20      	cmp	r3, #32
 800233e:	d003      	beq.n	8002348 <I2C_IsErrorOccurred+0xe0>
 8002340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0aa      	beq.n	800229e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800234c:	2b00      	cmp	r3, #0
 800234e:	d103      	bne.n	8002358 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2220      	movs	r2, #32
 8002356:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	f043 0304 	orr.w	r3, r3, #4
 800235e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00b      	beq.n	8002390 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002388:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	f043 0308 	orr.w	r3, r3, #8
 80023a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00b      	beq.n	80023d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	f043 0302 	orr.w	r3, r3, #2
 80023c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80023d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d01c      	beq.n	8002416 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f7ff fe45 	bl	800206c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6859      	ldr	r1, [r3, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <I2C_IsErrorOccurred+0x1bc>)
 80023ee:	400b      	ands	r3, r1
 80023f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800241a:	4618      	mov	r0, r3
 800241c:	3728      	adds	r7, #40	; 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	fe00e800 	.word	0xfe00e800

08002428 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	817b      	strh	r3, [r7, #10]
 8002436:	4613      	mov	r3, r2
 8002438:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800243a:	897b      	ldrh	r3, [r7, #10]
 800243c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002440:	7a7b      	ldrb	r3, [r7, #9]
 8002442:	041b      	lsls	r3, r3, #16
 8002444:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002448:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	4313      	orrs	r3, r2
 8002452:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002456:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	0d5b      	lsrs	r3, r3, #21
 8002462:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <I2C_TransferConfig+0x60>)
 8002468:	430b      	orrs	r3, r1
 800246a:	43db      	mvns	r3, r3
 800246c:	ea02 0103 	and.w	r1, r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	430a      	orrs	r2, r1
 8002478:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800247a:	bf00      	nop
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	03ff63ff 	.word	0x03ff63ff

0800248c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d138      	bne.n	8002514 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e032      	b.n	8002516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2224      	movs	r2, #36	; 0x24
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6819      	ldr	r1, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e000      	b.n	8002516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002514:	2302      	movs	r3, #2
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b20      	cmp	r3, #32
 8002536:	d139      	bne.n	80025ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002542:	2302      	movs	r3, #2
 8002544:	e033      	b.n	80025ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2224      	movs	r2, #36	; 0x24
 8002552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002574:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_PWREx_ConfigSupply+0x70>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d00a      	beq.n	80025e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <HAL_PWREx_ConfigSupply+0x70>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d001      	beq.n	80025e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e01f      	b.n	8002622 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e01d      	b.n	8002622 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_PWREx_ConfigSupply+0x70>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f023 0207 	bic.w	r2, r3, #7
 80025ee:	490f      	ldr	r1, [pc, #60]	; (800262c <HAL_PWREx_ConfigSupply+0x70>)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025f6:	f7ff f863 	bl	80016c0 <HAL_GetTick>
 80025fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025fc:	e009      	b.n	8002612 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025fe:	f7ff f85f 	bl	80016c0 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800260c:	d901      	bls.n	8002612 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e007      	b.n	8002622 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_PWREx_ConfigSupply+0x70>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800261a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261e:	d1ee      	bne.n	80025fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	58024800 	.word	0x58024800

08002630 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08c      	sub	sp, #48	; 0x30
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d102      	bne.n	8002644 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	f000 bc48 	b.w	8002ed4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8088 	beq.w	8002762 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002652:	4b99      	ldr	r3, [pc, #612]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800265c:	4b96      	ldr	r3, [pc, #600]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	2b10      	cmp	r3, #16
 8002666:	d007      	beq.n	8002678 <HAL_RCC_OscConfig+0x48>
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	2b18      	cmp	r3, #24
 800266c:	d111      	bne.n	8002692 <HAL_RCC_OscConfig+0x62>
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d10c      	bne.n	8002692 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	4b8f      	ldr	r3, [pc, #572]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d06d      	beq.n	8002760 <HAL_RCC_OscConfig+0x130>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d169      	bne.n	8002760 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f000 bc21 	b.w	8002ed4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269a:	d106      	bne.n	80026aa <HAL_RCC_OscConfig+0x7a>
 800269c:	4b86      	ldr	r3, [pc, #536]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a85      	ldr	r2, [pc, #532]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80026a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	e02e      	b.n	8002708 <HAL_RCC_OscConfig+0xd8>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10c      	bne.n	80026cc <HAL_RCC_OscConfig+0x9c>
 80026b2:	4b81      	ldr	r3, [pc, #516]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a80      	ldr	r2, [pc, #512]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80026b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	4b7e      	ldr	r3, [pc, #504]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a7d      	ldr	r2, [pc, #500]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80026c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e01d      	b.n	8002708 <HAL_RCC_OscConfig+0xd8>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0xc0>
 80026d6:	4b78      	ldr	r3, [pc, #480]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a77      	ldr	r2, [pc, #476]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80026dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b75      	ldr	r3, [pc, #468]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a74      	ldr	r2, [pc, #464]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e00b      	b.n	8002708 <HAL_RCC_OscConfig+0xd8>
 80026f0:	4b71      	ldr	r3, [pc, #452]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a70      	ldr	r2, [pc, #448]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80026f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b6e      	ldr	r3, [pc, #440]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a6d      	ldr	r2, [pc, #436]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 8002702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d013      	beq.n	8002738 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe ffd6 	bl	80016c0 <HAL_GetTick>
 8002714:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7fe ffd2 	bl	80016c0 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e3d4      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800272a:	4b63      	ldr	r3, [pc, #396]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0xe8>
 8002736:	e014      	b.n	8002762 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe ffc2 	bl	80016c0 <HAL_GetTick>
 800273c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7fe ffbe 	bl	80016c0 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e3c0      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002752:	4b59      	ldr	r3, [pc, #356]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x110>
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80ca 	beq.w	8002904 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002770:	4b51      	ldr	r3, [pc, #324]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002778:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800277a:	4b4f      	ldr	r3, [pc, #316]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <HAL_RCC_OscConfig+0x166>
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	2b18      	cmp	r3, #24
 800278a:	d156      	bne.n	800283a <HAL_RCC_OscConfig+0x20a>
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d151      	bne.n	800283a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002796:	4b48      	ldr	r3, [pc, #288]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x17e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e392      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027ae:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 0219 	bic.w	r2, r3, #25
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	493f      	ldr	r1, [pc, #252]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe ff7e 	bl	80016c0 <HAL_GetTick>
 80027c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c8:	f7fe ff7a 	bl	80016c0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e37c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e6:	f7fe ff9b 	bl	8001720 <HAL_GetREVID>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d817      	bhi.n	8002824 <HAL_RCC_OscConfig+0x1f4>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d108      	bne.n	800280e <HAL_RCC_OscConfig+0x1de>
 80027fc:	4b2e      	ldr	r3, [pc, #184]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002804:	4a2c      	ldr	r2, [pc, #176]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 8002806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800280c:	e07a      	b.n	8002904 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280e:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	031b      	lsls	r3, r3, #12
 800281c:	4926      	ldr	r1, [pc, #152]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002822:	e06f      	b.n	8002904 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002824:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	061b      	lsls	r3, r3, #24
 8002832:	4921      	ldr	r1, [pc, #132]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002838:	e064      	b.n	8002904 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d047      	beq.n	80028d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002842:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 0219 	bic.w	r2, r3, #25
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	491a      	ldr	r1, [pc, #104]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 8002850:	4313      	orrs	r3, r2
 8002852:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe ff34 	bl	80016c0 <HAL_GetTick>
 8002858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285c:	f7fe ff30 	bl	80016c0 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e332      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	f7fe ff51 	bl	8001720 <HAL_GetREVID>
 800287e:	4603      	mov	r3, r0
 8002880:	f241 0203 	movw	r2, #4099	; 0x1003
 8002884:	4293      	cmp	r3, r2
 8002886:	d819      	bhi.n	80028bc <HAL_RCC_OscConfig+0x28c>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	2b40      	cmp	r3, #64	; 0x40
 800288e:	d108      	bne.n	80028a2 <HAL_RCC_OscConfig+0x272>
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002898:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 800289a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289e:	6053      	str	r3, [r2, #4]
 80028a0:	e030      	b.n	8002904 <HAL_RCC_OscConfig+0x2d4>
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	031b      	lsls	r3, r3, #12
 80028b0:	4901      	ldr	r1, [pc, #4]	; (80028b8 <HAL_RCC_OscConfig+0x288>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
 80028b6:	e025      	b.n	8002904 <HAL_RCC_OscConfig+0x2d4>
 80028b8:	58024400 	.word	0x58024400
 80028bc:	4b9a      	ldr	r3, [pc, #616]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	4997      	ldr	r1, [pc, #604]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
 80028d0:	e018      	b.n	8002904 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d2:	4b95      	ldr	r3, [pc, #596]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a94      	ldr	r2, [pc, #592]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe feef 	bl	80016c0 <HAL_GetTick>
 80028e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e6:	f7fe feeb 	bl	80016c0 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e2ed      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028f8:	4b8b      	ldr	r3, [pc, #556]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80a9 	beq.w	8002a64 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002912:	4b85      	ldr	r3, [pc, #532]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800291a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800291c:	4b82      	ldr	r3, [pc, #520]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b08      	cmp	r3, #8
 8002926:	d007      	beq.n	8002938 <HAL_RCC_OscConfig+0x308>
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b18      	cmp	r3, #24
 800292c:	d13a      	bne.n	80029a4 <HAL_RCC_OscConfig+0x374>
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d135      	bne.n	80029a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002938:	4b7b      	ldr	r3, [pc, #492]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_OscConfig+0x320>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	2b80      	cmp	r3, #128	; 0x80
 800294a:	d001      	beq.n	8002950 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e2c1      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002950:	f7fe fee6 	bl	8001720 <HAL_GetREVID>
 8002954:	4603      	mov	r3, r0
 8002956:	f241 0203 	movw	r2, #4099	; 0x1003
 800295a:	4293      	cmp	r3, r2
 800295c:	d817      	bhi.n	800298e <HAL_RCC_OscConfig+0x35e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	2b20      	cmp	r3, #32
 8002964:	d108      	bne.n	8002978 <HAL_RCC_OscConfig+0x348>
 8002966:	4b70      	ldr	r3, [pc, #448]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800296e:	4a6e      	ldr	r2, [pc, #440]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002974:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002976:	e075      	b.n	8002a64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002978:	4b6b      	ldr	r3, [pc, #428]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	069b      	lsls	r3, r3, #26
 8002986:	4968      	ldr	r1, [pc, #416]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800298c:	e06a      	b.n	8002a64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800298e:	4b66      	ldr	r3, [pc, #408]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	061b      	lsls	r3, r3, #24
 800299c:	4962      	ldr	r1, [pc, #392]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a2:	e05f      	b.n	8002a64 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d042      	beq.n	8002a32 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029ac:	4b5e      	ldr	r3, [pc, #376]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a5d      	ldr	r2, [pc, #372]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 80029b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe fe82 	bl	80016c0 <HAL_GetTick>
 80029bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029c0:	f7fe fe7e 	bl	80016c0 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e280      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029d2:	4b55      	ldr	r3, [pc, #340]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029de:	f7fe fe9f 	bl	8001720 <HAL_GetREVID>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d817      	bhi.n	8002a1c <HAL_RCC_OscConfig+0x3ec>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d108      	bne.n	8002a06 <HAL_RCC_OscConfig+0x3d6>
 80029f4:	4b4c      	ldr	r3, [pc, #304]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029fc:	4a4a      	ldr	r2, [pc, #296]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 80029fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a02:	6053      	str	r3, [r2, #4]
 8002a04:	e02e      	b.n	8002a64 <HAL_RCC_OscConfig+0x434>
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	069b      	lsls	r3, r3, #26
 8002a14:	4944      	ldr	r1, [pc, #272]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
 8002a1a:	e023      	b.n	8002a64 <HAL_RCC_OscConfig+0x434>
 8002a1c:	4b42      	ldr	r3, [pc, #264]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	061b      	lsls	r3, r3, #24
 8002a2a:	493f      	ldr	r1, [pc, #252]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60cb      	str	r3, [r1, #12]
 8002a30:	e018      	b.n	8002a64 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a32:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a3c      	ldr	r2, [pc, #240]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7fe fe3f 	bl	80016c0 <HAL_GetTick>
 8002a42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a46:	f7fe fe3b 	bl	80016c0 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e23d      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a58:	4b33      	ldr	r3, [pc, #204]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f0      	bne.n	8002a46 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d036      	beq.n	8002ade <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d019      	beq.n	8002aac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7c:	4a2a      	ldr	r2, [pc, #168]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fe fe1c 	bl	80016c0 <HAL_GetTick>
 8002a88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7fe fe18 	bl	80016c0 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e21a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x45c>
 8002aaa:	e018      	b.n	8002ade <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aac:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fe02 	bl	80016c0 <HAL_GetTick>
 8002abc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac0:	f7fe fdfe 	bl	80016c0 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e200      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d039      	beq.n	8002b5e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01c      	beq.n	8002b2c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002af8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002afc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002afe:	f7fe fddf 	bl	80016c0 <HAL_GetTick>
 8002b02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b06:	f7fe fddb 	bl	80016c0 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e1dd      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <HAL_RCC_OscConfig+0x4f8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x4d6>
 8002b24:	e01b      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
 8002b26:	bf00      	nop
 8002b28:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b2c:	4b9b      	ldr	r3, [pc, #620]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a9a      	ldr	r2, [pc, #616]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b38:	f7fe fdc2 	bl	80016c0 <HAL_GetTick>
 8002b3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b40:	f7fe fdbe 	bl	80016c0 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1c0      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b52:	4b92      	ldr	r3, [pc, #584]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8081 	beq.w	8002c6e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b6c:	4b8c      	ldr	r3, [pc, #560]	; (8002da0 <HAL_RCC_OscConfig+0x770>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a8b      	ldr	r2, [pc, #556]	; (8002da0 <HAL_RCC_OscConfig+0x770>)
 8002b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b78:	f7fe fda2 	bl	80016c0 <HAL_GetTick>
 8002b7c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b80:	f7fe fd9e 	bl	80016c0 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e1a0      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b92:	4b83      	ldr	r3, [pc, #524]	; (8002da0 <HAL_RCC_OscConfig+0x770>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d106      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x584>
 8002ba6:	4b7d      	ldr	r3, [pc, #500]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	4a7c      	ldr	r2, [pc, #496]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb2:	e02d      	b.n	8002c10 <HAL_RCC_OscConfig+0x5e0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x5a6>
 8002bbc:	4b77      	ldr	r3, [pc, #476]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	4a76      	ldr	r2, [pc, #472]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc8:	4b74      	ldr	r3, [pc, #464]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	4a73      	ldr	r2, [pc, #460]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002bce:	f023 0304 	bic.w	r3, r3, #4
 8002bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd4:	e01c      	b.n	8002c10 <HAL_RCC_OscConfig+0x5e0>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x5c8>
 8002bde:	4b6f      	ldr	r3, [pc, #444]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	4a6e      	ldr	r2, [pc, #440]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bea:	4b6c      	ldr	r3, [pc, #432]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	4a6b      	ldr	r2, [pc, #428]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCC_OscConfig+0x5e0>
 8002bf8:	4b68      	ldr	r3, [pc, #416]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	4a67      	ldr	r2, [pc, #412]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	6713      	str	r3, [r2, #112]	; 0x70
 8002c04:	4b65      	ldr	r3, [pc, #404]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	4a64      	ldr	r2, [pc, #400]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002c0a:	f023 0304 	bic.w	r3, r3, #4
 8002c0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d015      	beq.n	8002c44 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c18:	f7fe fd52 	bl	80016c0 <HAL_GetTick>
 8002c1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c20:	f7fe fd4e 	bl	80016c0 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e14e      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c36:	4b59      	ldr	r3, [pc, #356]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0ee      	beq.n	8002c20 <HAL_RCC_OscConfig+0x5f0>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c44:	f7fe fd3c 	bl	80016c0 <HAL_GetTick>
 8002c48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c4a:	e00a      	b.n	8002c62 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fd38 	bl	80016c0 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e138      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c62:	4b4e      	ldr	r3, [pc, #312]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1ee      	bne.n	8002c4c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 812d 	beq.w	8002ed2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c78:	4b48      	ldr	r3, [pc, #288]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c80:	2b18      	cmp	r3, #24
 8002c82:	f000 80bd 	beq.w	8002e00 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	f040 809e 	bne.w	8002dcc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c90:	4b42      	ldr	r3, [pc, #264]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a41      	ldr	r2, [pc, #260]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fd10 	bl	80016c0 <HAL_GetTick>
 8002ca0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7fe fd0c 	bl	80016c0 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e10e      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cb6:	4b39      	ldr	r3, [pc, #228]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc2:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cc6:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <HAL_RCC_OscConfig+0x774>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cd2:	0112      	lsls	r2, r2, #4
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	4931      	ldr	r1, [pc, #196]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	628b      	str	r3, [r1, #40]	; 0x28
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cea:	3b01      	subs	r3, #1
 8002cec:	025b      	lsls	r3, r3, #9
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	041b      	lsls	r3, r3, #16
 8002cfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d04:	3b01      	subs	r3, #1
 8002d06:	061b      	lsls	r3, r3, #24
 8002d08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d0c:	4923      	ldr	r1, [pc, #140]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d12:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d16:	4a21      	ldr	r2, [pc, #132]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d1e:	4b1f      	ldr	r3, [pc, #124]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d22:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <HAL_RCC_OscConfig+0x778>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d2a:	00d2      	lsls	r2, r2, #3
 8002d2c:	491b      	ldr	r1, [pc, #108]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d32:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	f023 020c 	bic.w	r2, r3, #12
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4917      	ldr	r1, [pc, #92]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d44:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	f023 0202 	bic.w	r2, r3, #2
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d50:	4912      	ldr	r1, [pc, #72]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	4a10      	ldr	r2, [pc, #64]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	4a0d      	ldr	r2, [pc, #52]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a04      	ldr	r2, [pc, #16]	; (8002d9c <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d92:	f7fe fc95 	bl	80016c0 <HAL_GetTick>
 8002d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d98:	e011      	b.n	8002dbe <HAL_RCC_OscConfig+0x78e>
 8002d9a:	bf00      	nop
 8002d9c:	58024400 	.word	0x58024400
 8002da0:	58024800 	.word	0x58024800
 8002da4:	fffffc0c 	.word	0xfffffc0c
 8002da8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fe fc88 	bl	80016c0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e08a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dbe:	4b47      	ldr	r3, [pc, #284]	; (8002edc <HAL_RCC_OscConfig+0x8ac>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x77c>
 8002dca:	e082      	b.n	8002ed2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dcc:	4b43      	ldr	r3, [pc, #268]	; (8002edc <HAL_RCC_OscConfig+0x8ac>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a42      	ldr	r2, [pc, #264]	; (8002edc <HAL_RCC_OscConfig+0x8ac>)
 8002dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fc72 	bl	80016c0 <HAL_GetTick>
 8002ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe fc6e 	bl	80016c0 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e070      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002df2:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <HAL_RCC_OscConfig+0x8ac>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x7b0>
 8002dfe:	e068      	b.n	8002ed2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e00:	4b36      	ldr	r3, [pc, #216]	; (8002edc <HAL_RCC_OscConfig+0x8ac>)
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e06:	4b35      	ldr	r3, [pc, #212]	; (8002edc <HAL_RCC_OscConfig+0x8ac>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d031      	beq.n	8002e78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f003 0203 	and.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d12a      	bne.n	8002e78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d122      	bne.n	8002e78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d11a      	bne.n	8002e78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	0a5b      	lsrs	r3, r3, #9
 8002e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d111      	bne.n	8002e78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	0c1b      	lsrs	r3, r3, #16
 8002e58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d108      	bne.n	8002e78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	0e1b      	lsrs	r3, r3, #24
 8002e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e02b      	b.n	8002ed4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e7c:	4b17      	ldr	r3, [pc, #92]	; (8002edc <HAL_RCC_OscConfig+0x8ac>)
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e80:	08db      	lsrs	r3, r3, #3
 8002e82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d01f      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e92:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_RCC_OscConfig+0x8ac>)
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	4a11      	ldr	r2, [pc, #68]	; (8002edc <HAL_RCC_OscConfig+0x8ac>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e9e:	f7fe fc0f 	bl	80016c0 <HAL_GetTick>
 8002ea2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ea4:	bf00      	nop
 8002ea6:	f7fe fc0b 	bl	80016c0 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d0f9      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <HAL_RCC_OscConfig+0x8ac>)
 8002eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <HAL_RCC_OscConfig+0x8b0>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ebe:	00d2      	lsls	r2, r2, #3
 8002ec0:	4906      	ldr	r1, [pc, #24]	; (8002edc <HAL_RCC_OscConfig+0x8ac>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_OscConfig+0x8ac>)
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	4a04      	ldr	r2, [pc, #16]	; (8002edc <HAL_RCC_OscConfig+0x8ac>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3730      	adds	r7, #48	; 0x30
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	58024400 	.word	0x58024400
 8002ee0:	ffff0007 	.word	0xffff0007

08002ee4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e19c      	b.n	8003232 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef8:	4b8a      	ldr	r3, [pc, #552]	; (8003124 <HAL_RCC_ClockConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d910      	bls.n	8002f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f06:	4b87      	ldr	r3, [pc, #540]	; (8003124 <HAL_RCC_ClockConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 020f 	bic.w	r2, r3, #15
 8002f0e:	4985      	ldr	r1, [pc, #532]	; (8003124 <HAL_RCC_ClockConfig+0x240>)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f16:	4b83      	ldr	r3, [pc, #524]	; (8003124 <HAL_RCC_ClockConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e184      	b.n	8003232 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d010      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	4b7b      	ldr	r3, [pc, #492]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d908      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f44:	4b78      	ldr	r3, [pc, #480]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	4975      	ldr	r1, [pc, #468]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d010      	beq.n	8002f84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	4b70      	ldr	r3, [pc, #448]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d908      	bls.n	8002f84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f72:	4b6d      	ldr	r3, [pc, #436]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	496a      	ldr	r1, [pc, #424]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d010      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699a      	ldr	r2, [r3, #24]
 8002f94:	4b64      	ldr	r3, [pc, #400]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d908      	bls.n	8002fb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fa0:	4b61      	ldr	r3, [pc, #388]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	495e      	ldr	r1, [pc, #376]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d010      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	4b59      	ldr	r3, [pc, #356]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d908      	bls.n	8002fe0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fce:	4b56      	ldr	r3, [pc, #344]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	4953      	ldr	r1, [pc, #332]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d010      	beq.n	800300e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	4b4d      	ldr	r3, [pc, #308]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d908      	bls.n	800300e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffc:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f023 020f 	bic.w	r2, r3, #15
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4947      	ldr	r1, [pc, #284]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 800300a:	4313      	orrs	r3, r2
 800300c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d055      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800301a:	4b43      	ldr	r3, [pc, #268]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	4940      	ldr	r1, [pc, #256]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8003028:	4313      	orrs	r3, r2
 800302a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d107      	bne.n	8003044 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003034:	4b3c      	ldr	r3, [pc, #240]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d121      	bne.n	8003084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0f6      	b.n	8003232 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d107      	bne.n	800305c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800304c:	4b36      	ldr	r3, [pc, #216]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d115      	bne.n	8003084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0ea      	b.n	8003232 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d107      	bne.n	8003074 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003064:	4b30      	ldr	r3, [pc, #192]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0de      	b.n	8003232 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003074:	4b2c      	ldr	r3, [pc, #176]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0d6      	b.n	8003232 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003084:	4b28      	ldr	r3, [pc, #160]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f023 0207 	bic.w	r2, r3, #7
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4925      	ldr	r1, [pc, #148]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 8003092:	4313      	orrs	r3, r2
 8003094:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003096:	f7fe fb13 	bl	80016c0 <HAL_GetTick>
 800309a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800309e:	f7fe fb0f 	bl	80016c0 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e0be      	b.n	8003232 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b4:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d1eb      	bne.n	800309e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	4b14      	ldr	r3, [pc, #80]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	429a      	cmp	r2, r3
 80030e0:	d208      	bcs.n	80030f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f023 020f 	bic.w	r2, r3, #15
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	490e      	ldr	r1, [pc, #56]	; (8003128 <HAL_RCC_ClockConfig+0x244>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_ClockConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d214      	bcs.n	800312c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <HAL_RCC_ClockConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 020f 	bic.w	r2, r3, #15
 800310a:	4906      	ldr	r1, [pc, #24]	; (8003124 <HAL_RCC_ClockConfig+0x240>)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b04      	ldr	r3, [pc, #16]	; (8003124 <HAL_RCC_ClockConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e086      	b.n	8003232 <HAL_RCC_ClockConfig+0x34e>
 8003124:	52002000 	.word	0x52002000
 8003128:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d010      	beq.n	800315a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	4b3f      	ldr	r3, [pc, #252]	; (800323c <HAL_RCC_ClockConfig+0x358>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003144:	429a      	cmp	r2, r3
 8003146:	d208      	bcs.n	800315a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003148:	4b3c      	ldr	r3, [pc, #240]	; (800323c <HAL_RCC_ClockConfig+0x358>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	4939      	ldr	r1, [pc, #228]	; (800323c <HAL_RCC_ClockConfig+0x358>)
 8003156:	4313      	orrs	r3, r2
 8003158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d010      	beq.n	8003188 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	4b34      	ldr	r3, [pc, #208]	; (800323c <HAL_RCC_ClockConfig+0x358>)
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003172:	429a      	cmp	r2, r3
 8003174:	d208      	bcs.n	8003188 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003176:	4b31      	ldr	r3, [pc, #196]	; (800323c <HAL_RCC_ClockConfig+0x358>)
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	492e      	ldr	r1, [pc, #184]	; (800323c <HAL_RCC_ClockConfig+0x358>)
 8003184:	4313      	orrs	r3, r2
 8003186:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b00      	cmp	r3, #0
 8003192:	d010      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	4b28      	ldr	r3, [pc, #160]	; (800323c <HAL_RCC_ClockConfig+0x358>)
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d208      	bcs.n	80031b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031a4:	4b25      	ldr	r3, [pc, #148]	; (800323c <HAL_RCC_ClockConfig+0x358>)
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	4922      	ldr	r1, [pc, #136]	; (800323c <HAL_RCC_ClockConfig+0x358>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d010      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <HAL_RCC_ClockConfig+0x358>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d208      	bcs.n	80031e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031d2:	4b1a      	ldr	r3, [pc, #104]	; (800323c <HAL_RCC_ClockConfig+0x358>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	4917      	ldr	r1, [pc, #92]	; (800323c <HAL_RCC_ClockConfig+0x358>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031e4:	f000 f834 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b14      	ldr	r3, [pc, #80]	; (800323c <HAL_RCC_ClockConfig+0x358>)
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	4912      	ldr	r1, [pc, #72]	; (8003240 <HAL_RCC_ClockConfig+0x35c>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003200:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_RCC_ClockConfig+0x358>)
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <HAL_RCC_ClockConfig+0x35c>)
 800320c:	5cd3      	ldrb	r3, [r2, r3]
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
 8003218:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <HAL_RCC_ClockConfig+0x360>)
 800321a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800321c:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <HAL_RCC_ClockConfig+0x364>)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <HAL_RCC_ClockConfig+0x368>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fa00 	bl	800162c <HAL_InitTick>
 800322c:	4603      	mov	r3, r0
 800322e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	58024400 	.word	0x58024400
 8003240:	08006738 	.word	0x08006738
 8003244:	24000010 	.word	0x24000010
 8003248:	2400000c 	.word	0x2400000c
 800324c:	24000014 	.word	0x24000014

08003250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003250:	b480      	push	{r7}
 8003252:	b089      	sub	sp, #36	; 0x24
 8003254:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003256:	4bb3      	ldr	r3, [pc, #716]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800325e:	2b18      	cmp	r3, #24
 8003260:	f200 8155 	bhi.w	800350e <HAL_RCC_GetSysClockFreq+0x2be>
 8003264:	a201      	add	r2, pc, #4	; (adr r2, 800326c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	080032d1 	.word	0x080032d1
 8003270:	0800350f 	.word	0x0800350f
 8003274:	0800350f 	.word	0x0800350f
 8003278:	0800350f 	.word	0x0800350f
 800327c:	0800350f 	.word	0x0800350f
 8003280:	0800350f 	.word	0x0800350f
 8003284:	0800350f 	.word	0x0800350f
 8003288:	0800350f 	.word	0x0800350f
 800328c:	080032f7 	.word	0x080032f7
 8003290:	0800350f 	.word	0x0800350f
 8003294:	0800350f 	.word	0x0800350f
 8003298:	0800350f 	.word	0x0800350f
 800329c:	0800350f 	.word	0x0800350f
 80032a0:	0800350f 	.word	0x0800350f
 80032a4:	0800350f 	.word	0x0800350f
 80032a8:	0800350f 	.word	0x0800350f
 80032ac:	080032fd 	.word	0x080032fd
 80032b0:	0800350f 	.word	0x0800350f
 80032b4:	0800350f 	.word	0x0800350f
 80032b8:	0800350f 	.word	0x0800350f
 80032bc:	0800350f 	.word	0x0800350f
 80032c0:	0800350f 	.word	0x0800350f
 80032c4:	0800350f 	.word	0x0800350f
 80032c8:	0800350f 	.word	0x0800350f
 80032cc:	08003303 	.word	0x08003303
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032d0:	4b94      	ldr	r3, [pc, #592]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d009      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032dc:	4b91      	ldr	r3, [pc, #580]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	08db      	lsrs	r3, r3, #3
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	4a90      	ldr	r2, [pc, #576]	; (8003528 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
 80032ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80032ee:	e111      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032f0:	4b8d      	ldr	r3, [pc, #564]	; (8003528 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032f2:	61bb      	str	r3, [r7, #24]
      break;
 80032f4:	e10e      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80032f6:	4b8d      	ldr	r3, [pc, #564]	; (800352c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032f8:	61bb      	str	r3, [r7, #24]
      break;
 80032fa:	e10b      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80032fc:	4b8c      	ldr	r3, [pc, #560]	; (8003530 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032fe:	61bb      	str	r3, [r7, #24]
      break;
 8003300:	e108      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003302:	4b88      	ldr	r3, [pc, #544]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800330c:	4b85      	ldr	r3, [pc, #532]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003316:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003318:	4b82      	ldr	r3, [pc, #520]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003322:	4b80      	ldr	r3, [pc, #512]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003326:	08db      	lsrs	r3, r3, #3
 8003328:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	fb02 f303 	mul.w	r3, r2, r3
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80e1 	beq.w	8003508 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b02      	cmp	r3, #2
 800334a:	f000 8083 	beq.w	8003454 <HAL_RCC_GetSysClockFreq+0x204>
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2b02      	cmp	r3, #2
 8003352:	f200 80a1 	bhi.w	8003498 <HAL_RCC_GetSysClockFreq+0x248>
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_RCC_GetSysClockFreq+0x114>
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d056      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003362:	e099      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003364:	4b6f      	ldr	r3, [pc, #444]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b00      	cmp	r3, #0
 800336e:	d02d      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003370:	4b6c      	ldr	r3, [pc, #432]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	08db      	lsrs	r3, r3, #3
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	4a6b      	ldr	r2, [pc, #428]	; (8003528 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
 8003380:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	ee07 3a90 	vmov	s15, r3
 8003388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339a:	4b62      	ldr	r3, [pc, #392]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003534 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80033ca:	e087      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003538 <HAL_RCC_GetSysClockFreq+0x2e8>
 80033da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033de:	4b51      	ldr	r3, [pc, #324]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80033f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003534 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800340e:	e065      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800353c <HAL_RCC_GetSysClockFreq+0x2ec>
 800341e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003422:	4b40      	ldr	r3, [pc, #256]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003432:	ed97 6a02 	vldr	s12, [r7, #8]
 8003436:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003534 <HAL_RCC_GetSysClockFreq+0x2e4>
 800343a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800343e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800344a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003452:	e043      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003540 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003466:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003476:	ed97 6a02 	vldr	s12, [r7, #8]
 800347a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003534 <HAL_RCC_GetSysClockFreq+0x2e4>
 800347e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800348a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800348e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003492:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003496:	e021      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800353c <HAL_RCC_GetSysClockFreq+0x2ec>
 80034a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034aa:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80034be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003534 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	0a5b      	lsrs	r3, r3, #9
 80034e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034e6:	3301      	adds	r3, #1
 80034e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	ee07 3a90 	vmov	s15, r3
 80034f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80034f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003500:	ee17 3a90 	vmov	r3, s15
 8003504:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003506:	e005      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]
      break;
 800350c:	e002      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800350e:	4b07      	ldr	r3, [pc, #28]	; (800352c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003510:	61bb      	str	r3, [r7, #24]
      break;
 8003512:	bf00      	nop
  }

  return sysclockfreq;
 8003514:	69bb      	ldr	r3, [r7, #24]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3724      	adds	r7, #36	; 0x24
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	58024400 	.word	0x58024400
 8003528:	03d09000 	.word	0x03d09000
 800352c:	003d0900 	.word	0x003d0900
 8003530:	017d7840 	.word	0x017d7840
 8003534:	46000000 	.word	0x46000000
 8003538:	4c742400 	.word	0x4c742400
 800353c:	4a742400 	.word	0x4a742400
 8003540:	4bbebc20 	.word	0x4bbebc20

08003544 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003548:	b0ca      	sub	sp, #296	; 0x128
 800354a:	af00      	add	r7, sp, #0
 800354c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003550:	2300      	movs	r3, #0
 8003552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003556:	2300      	movs	r3, #0
 8003558:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800355c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003568:	2500      	movs	r5, #0
 800356a:	ea54 0305 	orrs.w	r3, r4, r5
 800356e:	d049      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003576:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800357a:	d02f      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800357c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003580:	d828      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003586:	d01a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800358c:	d822      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003596:	d007      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003598:	e01c      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800359a:	4bb8      	ldr	r3, [pc, #736]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	4ab7      	ldr	r2, [pc, #732]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035a6:	e01a      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ac:	3308      	adds	r3, #8
 80035ae:	2102      	movs	r1, #2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 f9d1 	bl	8004958 <RCCEx_PLL2_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035bc:	e00f      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c2:	3328      	adds	r3, #40	; 0x28
 80035c4:	2102      	movs	r1, #2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 fa78 	bl	8004abc <RCCEx_PLL3_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035d2:	e004      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035da:	e000      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80035dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10a      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035e6:	4ba5      	ldr	r3, [pc, #660]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80035ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035f4:	4aa1      	ldr	r2, [pc, #644]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035f6:	430b      	orrs	r3, r1
 80035f8:	6513      	str	r3, [r2, #80]	; 0x50
 80035fa:	e003      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003600:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003610:	f04f 0900 	mov.w	r9, #0
 8003614:	ea58 0309 	orrs.w	r3, r8, r9
 8003618:	d047      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800361a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	2b04      	cmp	r3, #4
 8003622:	d82a      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003624:	a201      	add	r2, pc, #4	; (adr r2, 800362c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362a:	bf00      	nop
 800362c:	08003641 	.word	0x08003641
 8003630:	0800364f 	.word	0x0800364f
 8003634:	08003665 	.word	0x08003665
 8003638:	08003683 	.word	0x08003683
 800363c:	08003683 	.word	0x08003683
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003640:	4b8e      	ldr	r3, [pc, #568]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	4a8d      	ldr	r2, [pc, #564]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800364c:	e01a      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800364e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003652:	3308      	adds	r3, #8
 8003654:	2100      	movs	r1, #0
 8003656:	4618      	mov	r0, r3
 8003658:	f001 f97e 	bl	8004958 <RCCEx_PLL2_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003662:	e00f      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003668:	3328      	adds	r3, #40	; 0x28
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f001 fa25 	bl	8004abc <RCCEx_PLL3_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003678:	e004      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003680:	e000      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10a      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800368c:	4b7b      	ldr	r3, [pc, #492]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800368e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003690:	f023 0107 	bic.w	r1, r3, #7
 8003694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369a:	4a78      	ldr	r2, [pc, #480]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800369c:	430b      	orrs	r3, r1
 800369e:	6513      	str	r3, [r2, #80]	; 0x50
 80036a0:	e003      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80036b6:	f04f 0b00 	mov.w	fp, #0
 80036ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80036be:	d04c      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ca:	d030      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80036cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d0:	d829      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036d2:	2bc0      	cmp	r3, #192	; 0xc0
 80036d4:	d02d      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80036d6:	2bc0      	cmp	r3, #192	; 0xc0
 80036d8:	d825      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036da:	2b80      	cmp	r3, #128	; 0x80
 80036dc:	d018      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80036de:	2b80      	cmp	r3, #128	; 0x80
 80036e0:	d821      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80036e6:	2b40      	cmp	r3, #64	; 0x40
 80036e8:	d007      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80036ea:	e01c      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ec:	4b63      	ldr	r3, [pc, #396]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	4a62      	ldr	r2, [pc, #392]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036f8:	e01c      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036fe:	3308      	adds	r3, #8
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f001 f928 	bl	8004958 <RCCEx_PLL2_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800370e:	e011      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003714:	3328      	adds	r3, #40	; 0x28
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f001 f9cf 	bl	8004abc <RCCEx_PLL3_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003724:	e006      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800372c:	e002      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10a      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800373c:	4b4f      	ldr	r3, [pc, #316]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374a:	4a4c      	ldr	r2, [pc, #304]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800374c:	430b      	orrs	r3, r1
 800374e:	6513      	str	r3, [r2, #80]	; 0x50
 8003750:	e003      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003756:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800375a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800375e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003762:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003766:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800376a:	2300      	movs	r3, #0
 800376c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003770:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003774:	460b      	mov	r3, r1
 8003776:	4313      	orrs	r3, r2
 8003778:	d053      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800377a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800377e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003782:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003786:	d035      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003788:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800378c:	d82e      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800378e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003792:	d031      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003794:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003798:	d828      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800379a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800379e:	d01a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80037a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a4:	d822      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80037aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037ae:	d007      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80037b0:	e01c      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b2:	4b32      	ldr	r3, [pc, #200]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	4a31      	ldr	r2, [pc, #196]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037be:	e01c      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c4:	3308      	adds	r3, #8
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f001 f8c5 	bl	8004958 <RCCEx_PLL2_Config>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037d4:	e011      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037da:	3328      	adds	r3, #40	; 0x28
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 f96c 	bl	8004abc <RCCEx_PLL3_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037ea:	e006      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037f2:	e002      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037f4:	bf00      	nop
 80037f6:	e000      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10b      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003802:	4b1e      	ldr	r3, [pc, #120]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003806:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800380a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800380e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003812:	4a1a      	ldr	r2, [pc, #104]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003814:	430b      	orrs	r3, r1
 8003816:	6593      	str	r3, [r2, #88]	; 0x58
 8003818:	e003      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800381e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800382e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003832:	2300      	movs	r3, #0
 8003834:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003838:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800383c:	460b      	mov	r3, r1
 800383e:	4313      	orrs	r3, r2
 8003840:	d056      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003846:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800384a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800384e:	d038      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003850:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003854:	d831      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003856:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800385a:	d034      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800385c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003860:	d82b      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003862:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003866:	d01d      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800386c:	d825      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d006      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003872:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003878:	e01f      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800387a:	bf00      	nop
 800387c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003880:	4ba2      	ldr	r3, [pc, #648]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	4aa1      	ldr	r2, [pc, #644]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800388c:	e01c      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800388e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003892:	3308      	adds	r3, #8
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f001 f85e 	bl	8004958 <RCCEx_PLL2_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038a2:	e011      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a8:	3328      	adds	r3, #40	; 0x28
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f001 f905 	bl	8004abc <RCCEx_PLL3_Config>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038b8:	e006      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038c0:	e002      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10b      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038d0:	4b8e      	ldr	r3, [pc, #568]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038e0:	4a8a      	ldr	r2, [pc, #552]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038e2:	430b      	orrs	r3, r1
 80038e4:	6593      	str	r3, [r2, #88]	; 0x58
 80038e6:	e003      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80038fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003900:	2300      	movs	r3, #0
 8003902:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003906:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800390a:	460b      	mov	r3, r1
 800390c:	4313      	orrs	r3, r2
 800390e:	d03a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003916:	2b30      	cmp	r3, #48	; 0x30
 8003918:	d01f      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800391a:	2b30      	cmp	r3, #48	; 0x30
 800391c:	d819      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800391e:	2b20      	cmp	r3, #32
 8003920:	d00c      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003922:	2b20      	cmp	r3, #32
 8003924:	d815      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d019      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800392a:	2b10      	cmp	r3, #16
 800392c:	d111      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392e:	4b77      	ldr	r3, [pc, #476]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	4a76      	ldr	r2, [pc, #472]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800393a:	e011      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003940:	3308      	adds	r3, #8
 8003942:	2102      	movs	r1, #2
 8003944:	4618      	mov	r0, r3
 8003946:	f001 f807 	bl	8004958 <RCCEx_PLL2_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003950:	e006      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003958:	e002      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800395e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003960:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003968:	4b68      	ldr	r3, [pc, #416]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800396a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003976:	4a65      	ldr	r2, [pc, #404]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003978:	430b      	orrs	r3, r1
 800397a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800397c:	e003      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003982:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003992:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003996:	2300      	movs	r3, #0
 8003998:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800399c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4313      	orrs	r3, r2
 80039a4:	d051      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039b0:	d035      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80039b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039b6:	d82e      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039bc:	d031      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80039be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039c2:	d828      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c8:	d01a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80039ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ce:	d822      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80039d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d8:	d007      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80039da:	e01c      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039dc:	4b4b      	ldr	r3, [pc, #300]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	4a4a      	ldr	r2, [pc, #296]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039e8:	e01c      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ee:	3308      	adds	r3, #8
 80039f0:	2100      	movs	r1, #0
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 ffb0 	bl	8004958 <RCCEx_PLL2_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039fe:	e011      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a04:	3328      	adds	r3, #40	; 0x28
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 f857 	bl	8004abc <RCCEx_PLL3_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a14:	e006      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a1c:	e002      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a1e:	bf00      	nop
 8003a20:	e000      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a2c:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a30:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3a:	4a34      	ldr	r2, [pc, #208]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	6513      	str	r3, [r2, #80]	; 0x50
 8003a40:	e003      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a52:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003a56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003a60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003a64:	460b      	mov	r3, r1
 8003a66:	4313      	orrs	r3, r2
 8003a68:	d056      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a74:	d033      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a7a:	d82c      	bhi.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a80:	d02f      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a86:	d826      	bhi.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a8c:	d02b      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a92:	d820      	bhi.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a98:	d012      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a9e:	d81a      	bhi.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d022      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa8:	d115      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aae:	3308      	adds	r3, #8
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 ff50 	bl	8004958 <RCCEx_PLL2_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003abe:	e015      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac4:	3328      	adds	r3, #40	; 0x28
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fff7 	bl	8004abc <RCCEx_PLL3_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ad4:	e00a      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003adc:	e006      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ade:	bf00      	nop
 8003ae0:	e004      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e002      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ae6:	bf00      	nop
 8003ae8:	e000      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10d      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b02:	4a02      	ldr	r2, [pc, #8]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6513      	str	r3, [r2, #80]	; 0x50
 8003b08:	e006      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b0a:	bf00      	nop
 8003b0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003b24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b2e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4313      	orrs	r3, r2
 8003b36:	d055      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b44:	d033      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003b46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b4a:	d82c      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b50:	d02f      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b56:	d826      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b5c:	d02b      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b62:	d820      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b68:	d012      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b6e:	d81a      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d022      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b78:	d115      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b7e:	3308      	adds	r3, #8
 8003b80:	2101      	movs	r1, #1
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fee8 	bl	8004958 <RCCEx_PLL2_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b8e:	e015      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b94:	3328      	adds	r3, #40	; 0x28
 8003b96:	2101      	movs	r1, #1
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 ff8f 	bl	8004abc <RCCEx_PLL3_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bac:	e006      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bae:	bf00      	nop
 8003bb0:	e004      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bb2:	bf00      	nop
 8003bb4:	e002      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10b      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bc4:	4ba3      	ldr	r3, [pc, #652]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bd4:	4a9f      	ldr	r2, [pc, #636]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8003bda:	e003      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003be0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003bfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4313      	orrs	r3, r2
 8003c02:	d037      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c0e:	d00e      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c14:	d816      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d018      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c1e:	d111      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c20:	4b8c      	ldr	r3, [pc, #560]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	4a8b      	ldr	r2, [pc, #556]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c2c:	e00f      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c32:	3308      	adds	r3, #8
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fe8e 	bl	8004958 <RCCEx_PLL2_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c42:	e004      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c4a:	e000      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c56:	4b7f      	ldr	r3, [pc, #508]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4a7b      	ldr	r2, [pc, #492]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c66:	430b      	orrs	r3, r1
 8003c68:	6513      	str	r3, [r2, #80]	; 0x50
 8003c6a:	e003      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003c80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c84:	2300      	movs	r3, #0
 8003c86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4313      	orrs	r3, r2
 8003c92:	d039      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d81c      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003ce1 	.word	0x08003ce1
 8003ca8:	08003cb5 	.word	0x08003cb5
 8003cac:	08003cc3 	.word	0x08003cc3
 8003cb0:	08003ce1 	.word	0x08003ce1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb4:	4b67      	ldr	r3, [pc, #412]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	4a66      	ldr	r2, [pc, #408]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cc0:	e00f      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	2102      	movs	r1, #2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fe44 	bl	8004958 <RCCEx_PLL2_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cd6:	e004      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cde:	e000      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cea:	4b5a      	ldr	r3, [pc, #360]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cee:	f023 0103 	bic.w	r1, r3, #3
 8003cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf8:	4a56      	ldr	r2, [pc, #344]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cfe:	e003      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003d14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003d22:	460b      	mov	r3, r1
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f000 809f 	beq.w	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d2a:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a4a      	ldr	r2, [pc, #296]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d36:	f7fd fcc3 	bl	80016c0 <HAL_GetTick>
 8003d3a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d3e:	e00b      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d40:	f7fd fcbe 	bl	80016c0 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b64      	cmp	r3, #100	; 0x64
 8003d4e:	d903      	bls.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d56:	e005      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d58:	4b3f      	ldr	r3, [pc, #252]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0ed      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d179      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d6c:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d78:	4053      	eors	r3, r2
 8003d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d015      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d82:	4b34      	ldr	r3, [pc, #208]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d8e:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	4a30      	ldr	r2, [pc, #192]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d98:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d9a:	4b2e      	ldr	r3, [pc, #184]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	4a2d      	ldr	r2, [pc, #180]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003da6:	4a2b      	ldr	r2, [pc, #172]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dba:	d118      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fd fc80 	bl	80016c0 <HAL_GetTick>
 8003dc0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dc4:	e00d      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7fd fc7b 	bl	80016c0 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003dd0:	1ad2      	subs	r2, r2, r3
 8003dd2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d903      	bls.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003de0:	e005      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003de2:	4b1c      	ldr	r3, [pc, #112]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0eb      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003dee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d129      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e06:	d10e      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e08:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e18:	091a      	lsrs	r2, r3, #4
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	4a0d      	ldr	r2, [pc, #52]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6113      	str	r3, [r2, #16]
 8003e24:	e005      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e2c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e30:	6113      	str	r3, [r2, #16]
 8003e32:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e34:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e42:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e44:	430b      	orrs	r3, r1
 8003e46:	6713      	str	r3, [r2, #112]	; 0x70
 8003e48:	e00e      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003e52:	e009      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e54:	58024400 	.word	0x58024400
 8003e58:	58024800 	.word	0x58024800
 8003e5c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	f002 0301 	and.w	r3, r2, #1
 8003e74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f000 8089 	beq.w	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e90:	2b28      	cmp	r3, #40	; 0x28
 8003e92:	d86b      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e94:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003f75 	.word	0x08003f75
 8003ea0:	08003f6d 	.word	0x08003f6d
 8003ea4:	08003f6d 	.word	0x08003f6d
 8003ea8:	08003f6d 	.word	0x08003f6d
 8003eac:	08003f6d 	.word	0x08003f6d
 8003eb0:	08003f6d 	.word	0x08003f6d
 8003eb4:	08003f6d 	.word	0x08003f6d
 8003eb8:	08003f6d 	.word	0x08003f6d
 8003ebc:	08003f41 	.word	0x08003f41
 8003ec0:	08003f6d 	.word	0x08003f6d
 8003ec4:	08003f6d 	.word	0x08003f6d
 8003ec8:	08003f6d 	.word	0x08003f6d
 8003ecc:	08003f6d 	.word	0x08003f6d
 8003ed0:	08003f6d 	.word	0x08003f6d
 8003ed4:	08003f6d 	.word	0x08003f6d
 8003ed8:	08003f6d 	.word	0x08003f6d
 8003edc:	08003f57 	.word	0x08003f57
 8003ee0:	08003f6d 	.word	0x08003f6d
 8003ee4:	08003f6d 	.word	0x08003f6d
 8003ee8:	08003f6d 	.word	0x08003f6d
 8003eec:	08003f6d 	.word	0x08003f6d
 8003ef0:	08003f6d 	.word	0x08003f6d
 8003ef4:	08003f6d 	.word	0x08003f6d
 8003ef8:	08003f6d 	.word	0x08003f6d
 8003efc:	08003f75 	.word	0x08003f75
 8003f00:	08003f6d 	.word	0x08003f6d
 8003f04:	08003f6d 	.word	0x08003f6d
 8003f08:	08003f6d 	.word	0x08003f6d
 8003f0c:	08003f6d 	.word	0x08003f6d
 8003f10:	08003f6d 	.word	0x08003f6d
 8003f14:	08003f6d 	.word	0x08003f6d
 8003f18:	08003f6d 	.word	0x08003f6d
 8003f1c:	08003f75 	.word	0x08003f75
 8003f20:	08003f6d 	.word	0x08003f6d
 8003f24:	08003f6d 	.word	0x08003f6d
 8003f28:	08003f6d 	.word	0x08003f6d
 8003f2c:	08003f6d 	.word	0x08003f6d
 8003f30:	08003f6d 	.word	0x08003f6d
 8003f34:	08003f6d 	.word	0x08003f6d
 8003f38:	08003f6d 	.word	0x08003f6d
 8003f3c:	08003f75 	.word	0x08003f75
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f44:	3308      	adds	r3, #8
 8003f46:	2101      	movs	r1, #1
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fd05 	bl	8004958 <RCCEx_PLL2_Config>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f54:	e00f      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5a:	3328      	adds	r3, #40	; 0x28
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fdac 	bl	8004abc <RCCEx_PLL3_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f6a:	e004      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f72:	e000      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f7e:	4bbf      	ldr	r3, [pc, #764]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f8c:	4abb      	ldr	r2, [pc, #748]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f8e:	430b      	orrs	r3, r1
 8003f90:	6553      	str	r3, [r2, #84]	; 0x54
 8003f92:	e003      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	f002 0302 	and.w	r3, r2, #2
 8003fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fac:	2300      	movs	r3, #0
 8003fae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003fb2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	d041      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc2:	2b05      	cmp	r3, #5
 8003fc4:	d824      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08004019 	.word	0x08004019
 8003fd0:	08003fe5 	.word	0x08003fe5
 8003fd4:	08003ffb 	.word	0x08003ffb
 8003fd8:	08004019 	.word	0x08004019
 8003fdc:	08004019 	.word	0x08004019
 8003fe0:	08004019 	.word	0x08004019
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe8:	3308      	adds	r3, #8
 8003fea:	2101      	movs	r1, #1
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fcb3 	bl	8004958 <RCCEx_PLL2_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ff8:	e00f      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ffe:	3328      	adds	r3, #40	; 0x28
 8004000:	2101      	movs	r1, #1
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fd5a 	bl	8004abc <RCCEx_PLL3_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800400e:	e004      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004016:	e000      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004022:	4b96      	ldr	r3, [pc, #600]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	f023 0107 	bic.w	r1, r3, #7
 800402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004030:	4a92      	ldr	r2, [pc, #584]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004032:	430b      	orrs	r3, r1
 8004034:	6553      	str	r3, [r2, #84]	; 0x54
 8004036:	e003      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800403c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004048:	f002 0304 	and.w	r3, r2, #4
 800404c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004050:	2300      	movs	r3, #0
 8004052:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004056:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800405a:	460b      	mov	r3, r1
 800405c:	4313      	orrs	r3, r2
 800405e:	d044      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004068:	2b05      	cmp	r3, #5
 800406a:	d825      	bhi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	080040c1 	.word	0x080040c1
 8004078:	0800408d 	.word	0x0800408d
 800407c:	080040a3 	.word	0x080040a3
 8004080:	080040c1 	.word	0x080040c1
 8004084:	080040c1 	.word	0x080040c1
 8004088:	080040c1 	.word	0x080040c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004090:	3308      	adds	r3, #8
 8004092:	2101      	movs	r1, #1
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fc5f 	bl	8004958 <RCCEx_PLL2_Config>
 800409a:	4603      	mov	r3, r0
 800409c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040a0:	e00f      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a6:	3328      	adds	r3, #40	; 0x28
 80040a8:	2101      	movs	r1, #1
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fd06 	bl	8004abc <RCCEx_PLL3_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040b6:	e004      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040be:	e000      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80040c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10b      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040ca:	4b6c      	ldr	r3, [pc, #432]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	f023 0107 	bic.w	r1, r3, #7
 80040d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040da:	4a68      	ldr	r2, [pc, #416]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040dc:	430b      	orrs	r3, r1
 80040de:	6593      	str	r3, [r2, #88]	; 0x58
 80040e0:	e003      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	f002 0320 	and.w	r3, r2, #32
 80040f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004100:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004104:	460b      	mov	r3, r1
 8004106:	4313      	orrs	r3, r2
 8004108:	d055      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004112:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004116:	d033      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800411c:	d82c      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800411e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004122:	d02f      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004128:	d826      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800412a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800412e:	d02b      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004130:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004134:	d820      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800413a:	d012      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800413c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004140:	d81a      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d022      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800414a:	d115      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004150:	3308      	adds	r3, #8
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fbff 	bl	8004958 <RCCEx_PLL2_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004160:	e015      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004166:	3328      	adds	r3, #40	; 0x28
 8004168:	2102      	movs	r1, #2
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fca6 	bl	8004abc <RCCEx_PLL3_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004176:	e00a      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800417e:	e006      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004180:	bf00      	nop
 8004182:	e004      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004184:	bf00      	nop
 8004186:	e002      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004188:	bf00      	nop
 800418a:	e000      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800418c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10b      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004196:	4b39      	ldr	r3, [pc, #228]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	4a35      	ldr	r2, [pc, #212]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041a8:	430b      	orrs	r3, r1
 80041aa:	6553      	str	r3, [r2, #84]	; 0x54
 80041ac:	e003      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80041c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041c6:	2300      	movs	r3, #0
 80041c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80041cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4313      	orrs	r3, r2
 80041d4:	d058      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041e2:	d033      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80041e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041e8:	d82c      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ee:	d02f      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80041f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f4:	d826      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041fa:	d02b      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80041fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004200:	d820      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004206:	d012      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420c:	d81a      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d022      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004216:	d115      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421c:	3308      	adds	r3, #8
 800421e:	2100      	movs	r1, #0
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fb99 	bl	8004958 <RCCEx_PLL2_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800422c:	e015      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004232:	3328      	adds	r3, #40	; 0x28
 8004234:	2102      	movs	r1, #2
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fc40 	bl	8004abc <RCCEx_PLL3_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004242:	e00a      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800424a:	e006      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800424c:	bf00      	nop
 800424e:	e004      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004250:	bf00      	nop
 8004252:	e002      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004254:	bf00      	nop
 8004256:	e000      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10e      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800426e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004272:	4a02      	ldr	r2, [pc, #8]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004274:	430b      	orrs	r3, r1
 8004276:	6593      	str	r3, [r2, #88]	; 0x58
 8004278:	e006      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800427a:	bf00      	nop
 800427c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004280:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004284:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004298:	2300      	movs	r3, #0
 800429a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800429e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80042a2:	460b      	mov	r3, r1
 80042a4:	4313      	orrs	r3, r2
 80042a6:	d055      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042b4:	d033      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80042b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042ba:	d82c      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c0:	d02f      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80042c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c6:	d826      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042cc:	d02b      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80042ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042d2:	d820      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042d8:	d012      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80042da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042de:	d81a      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d022      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80042e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e8:	d115      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ee:	3308      	adds	r3, #8
 80042f0:	2100      	movs	r1, #0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fb30 	bl	8004958 <RCCEx_PLL2_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042fe:	e015      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004304:	3328      	adds	r3, #40	; 0x28
 8004306:	2102      	movs	r1, #2
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fbd7 	bl	8004abc <RCCEx_PLL3_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004314:	e00a      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800431c:	e006      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800431e:	bf00      	nop
 8004320:	e004      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800432a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004334:	4ba1      	ldr	r3, [pc, #644]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004338:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004340:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004344:	4a9d      	ldr	r2, [pc, #628]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004346:	430b      	orrs	r3, r1
 8004348:	6593      	str	r3, [r2, #88]	; 0x58
 800434a:	e003      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004350:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f002 0308 	and.w	r3, r2, #8
 8004360:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004364:	2300      	movs	r3, #0
 8004366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800436a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800436e:	460b      	mov	r3, r1
 8004370:	4313      	orrs	r3, r2
 8004372:	d01e      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004380:	d10c      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004386:	3328      	adds	r3, #40	; 0x28
 8004388:	2102      	movs	r1, #2
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fb96 	bl	8004abc <RCCEx_PLL3_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800439c:	4b87      	ldr	r3, [pc, #540]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ac:	4a83      	ldr	r2, [pc, #524]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ae:	430b      	orrs	r3, r1
 80043b0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f002 0310 	and.w	r3, r2, #16
 80043be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043c2:	2300      	movs	r3, #0
 80043c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80043c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80043cc:	460b      	mov	r3, r1
 80043ce:	4313      	orrs	r3, r2
 80043d0:	d01e      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043de:	d10c      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e4:	3328      	adds	r3, #40	; 0x28
 80043e6:	2102      	movs	r1, #2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fb67 	bl	8004abc <RCCEx_PLL3_Config>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043fa:	4b70      	ldr	r3, [pc, #448]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800440a:	4a6c      	ldr	r2, [pc, #432]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800440c:	430b      	orrs	r3, r1
 800440e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800441c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004420:	2300      	movs	r3, #0
 8004422:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004426:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800442a:	460b      	mov	r3, r1
 800442c:	4313      	orrs	r3, r2
 800442e:	d03e      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004434:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800443c:	d022      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800443e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004442:	d81b      	bhi.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444c:	d00b      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800444e:	e015      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004454:	3308      	adds	r3, #8
 8004456:	2100      	movs	r1, #0
 8004458:	4618      	mov	r0, r3
 800445a:	f000 fa7d 	bl	8004958 <RCCEx_PLL2_Config>
 800445e:	4603      	mov	r3, r0
 8004460:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004464:	e00f      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446a:	3328      	adds	r3, #40	; 0x28
 800446c:	2102      	movs	r1, #2
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fb24 	bl	8004abc <RCCEx_PLL3_Config>
 8004474:	4603      	mov	r3, r0
 8004476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800447a:	e004      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004482:	e000      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004486:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10b      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800448e:	4b4b      	ldr	r3, [pc, #300]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004492:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800449e:	4a47      	ldr	r2, [pc, #284]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a0:	430b      	orrs	r3, r1
 80044a2:	6593      	str	r3, [r2, #88]	; 0x58
 80044a4:	e003      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80044ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80044bc:	2300      	movs	r3, #0
 80044be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80044c4:	460b      	mov	r3, r1
 80044c6:	4313      	orrs	r3, r2
 80044c8:	d03b      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80044ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044d6:	d01f      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80044d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044dc:	d818      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80044de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044e2:	d003      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80044e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044e8:	d007      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80044ea:	e011      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ec:	4b33      	ldr	r3, [pc, #204]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	4a32      	ldr	r2, [pc, #200]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80044f8:	e00f      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fe:	3328      	adds	r3, #40	; 0x28
 8004500:	2101      	movs	r1, #1
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fada 	bl	8004abc <RCCEx_PLL3_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800450e:	e004      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004516:	e000      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800451a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10b      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004522:	4b26      	ldr	r3, [pc, #152]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004526:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800452a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	4a22      	ldr	r2, [pc, #136]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004534:	430b      	orrs	r3, r1
 8004536:	6553      	str	r3, [r2, #84]	; 0x54
 8004538:	e003      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800453e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800454e:	673b      	str	r3, [r7, #112]	; 0x70
 8004550:	2300      	movs	r3, #0
 8004552:	677b      	str	r3, [r7, #116]	; 0x74
 8004554:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004558:	460b      	mov	r3, r1
 800455a:	4313      	orrs	r3, r2
 800455c:	d034      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456c:	d007      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800456e:	e011      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004570:	4b12      	ldr	r3, [pc, #72]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	4a11      	ldr	r2, [pc, #68]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800457c:	e00e      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004582:	3308      	adds	r3, #8
 8004584:	2102      	movs	r1, #2
 8004586:	4618      	mov	r0, r3
 8004588:	f000 f9e6 	bl	8004958 <RCCEx_PLL2_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004592:	e003      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800459a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800459c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10d      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b2:	4a02      	ldr	r2, [pc, #8]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045b4:	430b      	orrs	r3, r1
 80045b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045b8:	e006      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80045ba:	bf00      	nop
 80045bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80045d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80045d6:	2300      	movs	r3, #0
 80045d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80045de:	460b      	mov	r3, r1
 80045e0:	4313      	orrs	r3, r2
 80045e2:	d00c      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e8:	3328      	adds	r3, #40	; 0x28
 80045ea:	2102      	movs	r1, #2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fa65 	bl	8004abc <RCCEx_PLL3_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800460a:	663b      	str	r3, [r7, #96]	; 0x60
 800460c:	2300      	movs	r3, #0
 800460e:	667b      	str	r3, [r7, #100]	; 0x64
 8004610:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004614:	460b      	mov	r3, r1
 8004616:	4313      	orrs	r3, r2
 8004618:	d038      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800461e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004622:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004626:	d018      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800462c:	d811      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800462e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004632:	d014      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004638:	d80b      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d011      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800463e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004642:	d106      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004644:	4bc3      	ldr	r3, [pc, #780]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	4ac2      	ldr	r2, [pc, #776]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800464a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800464e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004650:	e008      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004658:	e004      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800465a:	bf00      	nop
 800465c:	e002      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004664:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800466c:	4bb9      	ldr	r3, [pc, #740]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800466e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004670:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800467c:	4ab5      	ldr	r2, [pc, #724]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800467e:	430b      	orrs	r3, r1
 8004680:	6553      	str	r3, [r2, #84]	; 0x54
 8004682:	e003      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004688:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800468c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004698:	65bb      	str	r3, [r7, #88]	; 0x58
 800469a:	2300      	movs	r3, #0
 800469c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800469e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80046a2:	460b      	mov	r3, r1
 80046a4:	4313      	orrs	r3, r2
 80046a6:	d009      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046a8:	4baa      	ldr	r3, [pc, #680]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b6:	4aa7      	ldr	r2, [pc, #668]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b8:	430b      	orrs	r3, r1
 80046ba:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80046c8:	653b      	str	r3, [r7, #80]	; 0x50
 80046ca:	2300      	movs	r3, #0
 80046cc:	657b      	str	r3, [r7, #84]	; 0x54
 80046ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80046d2:	460b      	mov	r3, r1
 80046d4:	4313      	orrs	r3, r2
 80046d6:	d00a      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80046d8:	4b9e      	ldr	r3, [pc, #632]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80046e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80046e8:	4a9a      	ldr	r2, [pc, #616]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ea:	430b      	orrs	r3, r1
 80046ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80046fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80046fc:	2300      	movs	r3, #0
 80046fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004700:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004704:	460b      	mov	r3, r1
 8004706:	4313      	orrs	r3, r2
 8004708:	d009      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800470a:	4b92      	ldr	r3, [pc, #584]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800470c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004718:	4a8e      	ldr	r2, [pc, #568]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471a:	430b      	orrs	r3, r1
 800471c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800472a:	643b      	str	r3, [r7, #64]	; 0x40
 800472c:	2300      	movs	r3, #0
 800472e:	647b      	str	r3, [r7, #68]	; 0x44
 8004730:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004734:	460b      	mov	r3, r1
 8004736:	4313      	orrs	r3, r2
 8004738:	d00e      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800473a:	4b86      	ldr	r3, [pc, #536]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	4a85      	ldr	r2, [pc, #532]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004740:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004744:	6113      	str	r3, [r2, #16]
 8004746:	4b83      	ldr	r3, [pc, #524]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004748:	6919      	ldr	r1, [r3, #16]
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800474e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004752:	4a80      	ldr	r2, [pc, #512]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004754:	430b      	orrs	r3, r1
 8004756:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004764:	63bb      	str	r3, [r7, #56]	; 0x38
 8004766:	2300      	movs	r3, #0
 8004768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800476a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800476e:	460b      	mov	r3, r1
 8004770:	4313      	orrs	r3, r2
 8004772:	d009      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004774:	4b77      	ldr	r3, [pc, #476]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004778:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	4a74      	ldr	r2, [pc, #464]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004784:	430b      	orrs	r3, r1
 8004786:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004790:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004794:	633b      	str	r3, [r7, #48]	; 0x30
 8004796:	2300      	movs	r3, #0
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
 800479a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800479e:	460b      	mov	r3, r1
 80047a0:	4313      	orrs	r3, r2
 80047a2:	d00a      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047a4:	4b6b      	ldr	r3, [pc, #428]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80047ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b4:	4a67      	ldr	r2, [pc, #412]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b6:	430b      	orrs	r3, r1
 80047b8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80047ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	2100      	movs	r1, #0
 80047c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80047d0:	460b      	mov	r3, r1
 80047d2:	4313      	orrs	r3, r2
 80047d4:	d011      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047da:	3308      	adds	r3, #8
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f8ba 	bl	8004958 <RCCEx_PLL2_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80047ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	2100      	movs	r1, #0
 8004804:	6239      	str	r1, [r7, #32]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
 800480c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004810:	460b      	mov	r3, r1
 8004812:	4313      	orrs	r3, r2
 8004814:	d011      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481a:	3308      	adds	r3, #8
 800481c:	2101      	movs	r1, #1
 800481e:	4618      	mov	r0, r3
 8004820:	f000 f89a 	bl	8004958 <RCCEx_PLL2_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800482a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004836:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	2100      	movs	r1, #0
 8004844:	61b9      	str	r1, [r7, #24]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004850:	460b      	mov	r3, r1
 8004852:	4313      	orrs	r3, r2
 8004854:	d011      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800485a:	3308      	adds	r3, #8
 800485c:	2102      	movs	r1, #2
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f87a 	bl	8004958 <RCCEx_PLL2_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800486a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004872:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004876:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	2100      	movs	r1, #0
 8004884:	6139      	str	r1, [r7, #16]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004890:	460b      	mov	r3, r1
 8004892:	4313      	orrs	r3, r2
 8004894:	d011      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800489a:	3328      	adds	r3, #40	; 0x28
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 f90c 	bl	8004abc <RCCEx_PLL3_Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80048aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	2100      	movs	r1, #0
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80048d0:	460b      	mov	r3, r1
 80048d2:	4313      	orrs	r3, r2
 80048d4:	d011      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048da:	3328      	adds	r3, #40	; 0x28
 80048dc:	2101      	movs	r1, #1
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f8ec 	bl	8004abc <RCCEx_PLL3_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80048fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	2100      	movs	r1, #0
 8004904:	6039      	str	r1, [r7, #0]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	607b      	str	r3, [r7, #4]
 800490c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004910:	460b      	mov	r3, r1
 8004912:	4313      	orrs	r3, r2
 8004914:	d011      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800491a:	3328      	adds	r3, #40	; 0x28
 800491c:	2102      	movs	r1, #2
 800491e:	4618      	mov	r0, r3
 8004920:	f000 f8cc 	bl	8004abc <RCCEx_PLL3_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800492a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004936:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800493a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	e000      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
}
 8004948:	4618      	mov	r0, r3
 800494a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800494e:	46bd      	mov	sp, r7
 8004950:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004954:	58024400 	.word	0x58024400

08004958 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004966:	4b53      	ldr	r3, [pc, #332]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b03      	cmp	r3, #3
 8004970:	d101      	bne.n	8004976 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e099      	b.n	8004aaa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004976:	4b4f      	ldr	r3, [pc, #316]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a4e      	ldr	r2, [pc, #312]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 800497c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004982:	f7fc fe9d 	bl	80016c0 <HAL_GetTick>
 8004986:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004988:	e008      	b.n	800499c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800498a:	f7fc fe99 	bl	80016c0 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e086      	b.n	8004aaa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800499c:	4b45      	ldr	r3, [pc, #276]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f0      	bne.n	800498a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80049a8:	4b42      	ldr	r3, [pc, #264]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	031b      	lsls	r3, r3, #12
 80049b6:	493f      	ldr	r1, [pc, #252]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	628b      	str	r3, [r1, #40]	; 0x28
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	025b      	lsls	r3, r3, #9
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	041b      	lsls	r3, r3, #16
 80049da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	061b      	lsls	r3, r3, #24
 80049e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049ec:	4931      	ldr	r1, [pc, #196]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80049f2:	4b30      	ldr	r3, [pc, #192]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	492d      	ldr	r1, [pc, #180]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a04:	4b2b      	ldr	r3, [pc, #172]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	f023 0220 	bic.w	r2, r3, #32
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	4928      	ldr	r1, [pc, #160]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a16:	4b27      	ldr	r3, [pc, #156]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	4a26      	ldr	r2, [pc, #152]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a1c:	f023 0310 	bic.w	r3, r3, #16
 8004a20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a22:	4b24      	ldr	r3, [pc, #144]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a26:	4b24      	ldr	r3, [pc, #144]	; (8004ab8 <RCCEx_PLL2_Config+0x160>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	69d2      	ldr	r2, [r2, #28]
 8004a2e:	00d2      	lsls	r2, r2, #3
 8004a30:	4920      	ldr	r1, [pc, #128]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a36:	4b1f      	ldr	r3, [pc, #124]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	4a1e      	ldr	r2, [pc, #120]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a3c:	f043 0310 	orr.w	r3, r3, #16
 8004a40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d106      	bne.n	8004a56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a48:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	4a19      	ldr	r2, [pc, #100]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a54:	e00f      	b.n	8004a76 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d106      	bne.n	8004a6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a5c:	4b15      	ldr	r3, [pc, #84]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	4a14      	ldr	r2, [pc, #80]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a68:	e005      	b.n	8004a76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a6a:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	4a11      	ldr	r2, [pc, #68]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a76:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a0e      	ldr	r2, [pc, #56]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a82:	f7fc fe1d 	bl	80016c0 <HAL_GetTick>
 8004a86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a88:	e008      	b.n	8004a9c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a8a:	f7fc fe19 	bl	80016c0 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e006      	b.n	8004aaa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a9c:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <RCCEx_PLL2_Config+0x15c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0f0      	beq.n	8004a8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	58024400 	.word	0x58024400
 8004ab8:	ffff0007 	.word	0xffff0007

08004abc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004aca:	4b53      	ldr	r3, [pc, #332]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d101      	bne.n	8004ada <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e099      	b.n	8004c0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ada:	4b4f      	ldr	r3, [pc, #316]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a4e      	ldr	r2, [pc, #312]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae6:	f7fc fdeb 	bl	80016c0 <HAL_GetTick>
 8004aea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004aec:	e008      	b.n	8004b00 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004aee:	f7fc fde7 	bl	80016c0 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e086      	b.n	8004c0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b00:	4b45      	ldr	r3, [pc, #276]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f0      	bne.n	8004aee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b0c:	4b42      	ldr	r3, [pc, #264]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	051b      	lsls	r3, r3, #20
 8004b1a:	493f      	ldr	r1, [pc, #252]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	628b      	str	r3, [r1, #40]	; 0x28
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	025b      	lsls	r3, r3, #9
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	041b      	lsls	r3, r3, #16
 8004b3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	061b      	lsls	r3, r3, #24
 8004b4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b50:	4931      	ldr	r1, [pc, #196]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b56:	4b30      	ldr	r3, [pc, #192]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	492d      	ldr	r1, [pc, #180]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b68:	4b2b      	ldr	r3, [pc, #172]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	4928      	ldr	r1, [pc, #160]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b7a:	4b27      	ldr	r3, [pc, #156]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	4a26      	ldr	r2, [pc, #152]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b86:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b8a:	4b24      	ldr	r3, [pc, #144]	; (8004c1c <RCCEx_PLL3_Config+0x160>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	69d2      	ldr	r2, [r2, #28]
 8004b92:	00d2      	lsls	r2, r2, #3
 8004b94:	4920      	ldr	r1, [pc, #128]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b9a:	4b1f      	ldr	r3, [pc, #124]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	4a1e      	ldr	r2, [pc, #120]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d106      	bne.n	8004bba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004bac:	4b1a      	ldr	r3, [pc, #104]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	4a19      	ldr	r2, [pc, #100]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004bb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bb8:	e00f      	b.n	8004bda <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d106      	bne.n	8004bce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004bc0:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	4a14      	ldr	r2, [pc, #80]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004bc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bcc:	e005      	b.n	8004bda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	4a11      	ldr	r2, [pc, #68]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004bd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004bda:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a0e      	ldr	r2, [pc, #56]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be6:	f7fc fd6b 	bl	80016c0 <HAL_GetTick>
 8004bea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bec:	e008      	b.n	8004c00 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bee:	f7fc fd67 	bl	80016c0 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e006      	b.n	8004c0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <RCCEx_PLL3_Config+0x15c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f0      	beq.n	8004bee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	58024400 	.word	0x58024400
 8004c1c:	ffff0007 	.word	0xffff0007

08004c20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e049      	b.n	8004cc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc fafc 	bl	8001244 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	f000 fa58 	bl	8005114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <HAL_TIM_PWM_Start+0x24>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	bf14      	ite	ne
 8004cec:	2301      	movne	r3, #1
 8004cee:	2300      	moveq	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	e03c      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d109      	bne.n	8004d0e <HAL_TIM_PWM_Start+0x3e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	bf14      	ite	ne
 8004d06:	2301      	movne	r3, #1
 8004d08:	2300      	moveq	r3, #0
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	e02f      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d109      	bne.n	8004d28 <HAL_TIM_PWM_Start+0x58>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	bf14      	ite	ne
 8004d20:	2301      	movne	r3, #1
 8004d22:	2300      	moveq	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	e022      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d109      	bne.n	8004d42 <HAL_TIM_PWM_Start+0x72>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	bf14      	ite	ne
 8004d3a:	2301      	movne	r3, #1
 8004d3c:	2300      	moveq	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	e015      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b10      	cmp	r3, #16
 8004d46:	d109      	bne.n	8004d5c <HAL_TIM_PWM_Start+0x8c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e008      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	bf14      	ite	ne
 8004d68:	2301      	movne	r3, #1
 8004d6a:	2300      	moveq	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e0a1      	b.n	8004eba <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <HAL_TIM_PWM_Start+0xb6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d84:	e023      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d104      	bne.n	8004d96 <HAL_TIM_PWM_Start+0xc6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d94:	e01b      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIM_PWM_Start+0xd6>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da4:	e013      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_PWM_Start+0xe6>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004db4:	e00b      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0xf6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc4:	e003      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fd0c 	bl	80057f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a38      	ldr	r2, [pc, #224]	; (8004ec4 <HAL_TIM_PWM_Start+0x1f4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a37      	ldr	r2, [pc, #220]	; (8004ec8 <HAL_TIM_PWM_Start+0x1f8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a35      	ldr	r2, [pc, #212]	; (8004ecc <HAL_TIM_PWM_Start+0x1fc>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a34      	ldr	r2, [pc, #208]	; (8004ed0 <HAL_TIM_PWM_Start+0x200>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a32      	ldr	r2, [pc, #200]	; (8004ed4 <HAL_TIM_PWM_Start+0x204>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_TIM_PWM_Start+0x142>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_TIM_PWM_Start+0x144>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a25      	ldr	r2, [pc, #148]	; (8004ec4 <HAL_TIM_PWM_Start+0x1f4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d022      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1a8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3a:	d01d      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1a8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a25      	ldr	r2, [pc, #148]	; (8004ed8 <HAL_TIM_PWM_Start+0x208>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d018      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1a8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a24      	ldr	r2, [pc, #144]	; (8004edc <HAL_TIM_PWM_Start+0x20c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d013      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1a8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a22      	ldr	r2, [pc, #136]	; (8004ee0 <HAL_TIM_PWM_Start+0x210>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00e      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1a8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ec8 <HAL_TIM_PWM_Start+0x1f8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d009      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1a8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1e      	ldr	r2, [pc, #120]	; (8004ee4 <HAL_TIM_PWM_Start+0x214>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d004      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1a8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a16      	ldr	r2, [pc, #88]	; (8004ecc <HAL_TIM_PWM_Start+0x1fc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d115      	bne.n	8004ea4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <HAL_TIM_PWM_Start+0x218>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b06      	cmp	r3, #6
 8004e88:	d015      	beq.n	8004eb6 <HAL_TIM_PWM_Start+0x1e6>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e90:	d011      	beq.n	8004eb6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea2:	e008      	b.n	8004eb6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e000      	b.n	8004eb8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40010400 	.word	0x40010400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800
 8004ee0:	40000c00 	.word	0x40000c00
 8004ee4:	40001800 	.word	0x40001800
 8004ee8:	00010007 	.word	0x00010007

08004eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e0ff      	b.n	800510a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b14      	cmp	r3, #20
 8004f16:	f200 80f0 	bhi.w	80050fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f1a:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004f75 	.word	0x08004f75
 8004f24:	080050fb 	.word	0x080050fb
 8004f28:	080050fb 	.word	0x080050fb
 8004f2c:	080050fb 	.word	0x080050fb
 8004f30:	08004fb5 	.word	0x08004fb5
 8004f34:	080050fb 	.word	0x080050fb
 8004f38:	080050fb 	.word	0x080050fb
 8004f3c:	080050fb 	.word	0x080050fb
 8004f40:	08004ff7 	.word	0x08004ff7
 8004f44:	080050fb 	.word	0x080050fb
 8004f48:	080050fb 	.word	0x080050fb
 8004f4c:	080050fb 	.word	0x080050fb
 8004f50:	08005037 	.word	0x08005037
 8004f54:	080050fb 	.word	0x080050fb
 8004f58:	080050fb 	.word	0x080050fb
 8004f5c:	080050fb 	.word	0x080050fb
 8004f60:	08005079 	.word	0x08005079
 8004f64:	080050fb 	.word	0x080050fb
 8004f68:	080050fb 	.word	0x080050fb
 8004f6c:	080050fb 	.word	0x080050fb
 8004f70:	080050b9 	.word	0x080050b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 f964 	bl	8005248 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0208 	orr.w	r2, r2, #8
 8004f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0204 	bic.w	r2, r2, #4
 8004f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6999      	ldr	r1, [r3, #24]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	619a      	str	r2, [r3, #24]
      break;
 8004fb2:	e0a5      	b.n	8005100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f9d4 	bl	8005368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6999      	ldr	r1, [r3, #24]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	021a      	lsls	r2, r3, #8
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	619a      	str	r2, [r3, #24]
      break;
 8004ff4:	e084      	b.n	8005100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fa3d 	bl	800547c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0208 	orr.w	r2, r2, #8
 8005010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0204 	bic.w	r2, r2, #4
 8005020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69d9      	ldr	r1, [r3, #28]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	61da      	str	r2, [r3, #28]
      break;
 8005034:	e064      	b.n	8005100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	4618      	mov	r0, r3
 800503e:	f000 faa5 	bl	800558c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69d9      	ldr	r1, [r3, #28]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	021a      	lsls	r2, r3, #8
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	61da      	str	r2, [r3, #28]
      break;
 8005076:	e043      	b.n	8005100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	4618      	mov	r0, r3
 8005080:	f000 faee 	bl	8005660 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0208 	orr.w	r2, r2, #8
 8005092:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0204 	bic.w	r2, r2, #4
 80050a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050b6:	e023      	b.n	8005100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fb32 	bl	8005728 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	021a      	lsls	r2, r3, #8
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050f8:	e002      	b.n	8005100 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	75fb      	strb	r3, [r7, #23]
      break;
 80050fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005108:	7dfb      	ldrb	r3, [r7, #23]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop

08005114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a40      	ldr	r2, [pc, #256]	; (8005228 <TIM_Base_SetConfig+0x114>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005132:	d00f      	beq.n	8005154 <TIM_Base_SetConfig+0x40>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a3d      	ldr	r2, [pc, #244]	; (800522c <TIM_Base_SetConfig+0x118>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d00b      	beq.n	8005154 <TIM_Base_SetConfig+0x40>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a3c      	ldr	r2, [pc, #240]	; (8005230 <TIM_Base_SetConfig+0x11c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d007      	beq.n	8005154 <TIM_Base_SetConfig+0x40>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a3b      	ldr	r2, [pc, #236]	; (8005234 <TIM_Base_SetConfig+0x120>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d003      	beq.n	8005154 <TIM_Base_SetConfig+0x40>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a3a      	ldr	r2, [pc, #232]	; (8005238 <TIM_Base_SetConfig+0x124>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d108      	bne.n	8005166 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2f      	ldr	r2, [pc, #188]	; (8005228 <TIM_Base_SetConfig+0x114>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d01f      	beq.n	80051ae <TIM_Base_SetConfig+0x9a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005174:	d01b      	beq.n	80051ae <TIM_Base_SetConfig+0x9a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2c      	ldr	r2, [pc, #176]	; (800522c <TIM_Base_SetConfig+0x118>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d017      	beq.n	80051ae <TIM_Base_SetConfig+0x9a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a2b      	ldr	r2, [pc, #172]	; (8005230 <TIM_Base_SetConfig+0x11c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d013      	beq.n	80051ae <TIM_Base_SetConfig+0x9a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a2a      	ldr	r2, [pc, #168]	; (8005234 <TIM_Base_SetConfig+0x120>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00f      	beq.n	80051ae <TIM_Base_SetConfig+0x9a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a29      	ldr	r2, [pc, #164]	; (8005238 <TIM_Base_SetConfig+0x124>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00b      	beq.n	80051ae <TIM_Base_SetConfig+0x9a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a28      	ldr	r2, [pc, #160]	; (800523c <TIM_Base_SetConfig+0x128>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d007      	beq.n	80051ae <TIM_Base_SetConfig+0x9a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a27      	ldr	r2, [pc, #156]	; (8005240 <TIM_Base_SetConfig+0x12c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_Base_SetConfig+0x9a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a26      	ldr	r2, [pc, #152]	; (8005244 <TIM_Base_SetConfig+0x130>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d108      	bne.n	80051c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a10      	ldr	r2, [pc, #64]	; (8005228 <TIM_Base_SetConfig+0x114>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00f      	beq.n	800520c <TIM_Base_SetConfig+0xf8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a12      	ldr	r2, [pc, #72]	; (8005238 <TIM_Base_SetConfig+0x124>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00b      	beq.n	800520c <TIM_Base_SetConfig+0xf8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a11      	ldr	r2, [pc, #68]	; (800523c <TIM_Base_SetConfig+0x128>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d007      	beq.n	800520c <TIM_Base_SetConfig+0xf8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a10      	ldr	r2, [pc, #64]	; (8005240 <TIM_Base_SetConfig+0x12c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d003      	beq.n	800520c <TIM_Base_SetConfig+0xf8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a0f      	ldr	r2, [pc, #60]	; (8005244 <TIM_Base_SetConfig+0x130>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d103      	bne.n	8005214 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	615a      	str	r2, [r3, #20]
}
 800521a:	bf00      	nop
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40010000 	.word	0x40010000
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40000c00 	.word	0x40000c00
 8005238:	40010400 	.word	0x40010400
 800523c:	40014000 	.word	0x40014000
 8005240:	40014400 	.word	0x40014400
 8005244:	40014800 	.word	0x40014800

08005248 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f023 0201 	bic.w	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4b37      	ldr	r3, [pc, #220]	; (8005350 <TIM_OC1_SetConfig+0x108>)
 8005274:	4013      	ands	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0303 	bic.w	r3, r3, #3
 800527e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f023 0302 	bic.w	r3, r3, #2
 8005290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a2d      	ldr	r2, [pc, #180]	; (8005354 <TIM_OC1_SetConfig+0x10c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00f      	beq.n	80052c4 <TIM_OC1_SetConfig+0x7c>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a2c      	ldr	r2, [pc, #176]	; (8005358 <TIM_OC1_SetConfig+0x110>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00b      	beq.n	80052c4 <TIM_OC1_SetConfig+0x7c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a2b      	ldr	r2, [pc, #172]	; (800535c <TIM_OC1_SetConfig+0x114>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d007      	beq.n	80052c4 <TIM_OC1_SetConfig+0x7c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a2a      	ldr	r2, [pc, #168]	; (8005360 <TIM_OC1_SetConfig+0x118>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <TIM_OC1_SetConfig+0x7c>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a29      	ldr	r2, [pc, #164]	; (8005364 <TIM_OC1_SetConfig+0x11c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d10c      	bne.n	80052de <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f023 0308 	bic.w	r3, r3, #8
 80052ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f023 0304 	bic.w	r3, r3, #4
 80052dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a1c      	ldr	r2, [pc, #112]	; (8005354 <TIM_OC1_SetConfig+0x10c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00f      	beq.n	8005306 <TIM_OC1_SetConfig+0xbe>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a1b      	ldr	r2, [pc, #108]	; (8005358 <TIM_OC1_SetConfig+0x110>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00b      	beq.n	8005306 <TIM_OC1_SetConfig+0xbe>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a1a      	ldr	r2, [pc, #104]	; (800535c <TIM_OC1_SetConfig+0x114>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d007      	beq.n	8005306 <TIM_OC1_SetConfig+0xbe>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a19      	ldr	r2, [pc, #100]	; (8005360 <TIM_OC1_SetConfig+0x118>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d003      	beq.n	8005306 <TIM_OC1_SetConfig+0xbe>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a18      	ldr	r2, [pc, #96]	; (8005364 <TIM_OC1_SetConfig+0x11c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d111      	bne.n	800532a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800530c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	621a      	str	r2, [r3, #32]
}
 8005344:	bf00      	nop
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	fffeff8f 	.word	0xfffeff8f
 8005354:	40010000 	.word	0x40010000
 8005358:	40010400 	.word	0x40010400
 800535c:	40014000 	.word	0x40014000
 8005360:	40014400 	.word	0x40014400
 8005364:	40014800 	.word	0x40014800

08005368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f023 0210 	bic.w	r2, r3, #16
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4b34      	ldr	r3, [pc, #208]	; (8005464 <TIM_OC2_SetConfig+0xfc>)
 8005394:	4013      	ands	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f023 0320 	bic.w	r3, r3, #32
 80053b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a29      	ldr	r2, [pc, #164]	; (8005468 <TIM_OC2_SetConfig+0x100>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_OC2_SetConfig+0x68>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a28      	ldr	r2, [pc, #160]	; (800546c <TIM_OC2_SetConfig+0x104>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10d      	bne.n	80053ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a1e      	ldr	r2, [pc, #120]	; (8005468 <TIM_OC2_SetConfig+0x100>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00f      	beq.n	8005414 <TIM_OC2_SetConfig+0xac>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a1d      	ldr	r2, [pc, #116]	; (800546c <TIM_OC2_SetConfig+0x104>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00b      	beq.n	8005414 <TIM_OC2_SetConfig+0xac>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a1c      	ldr	r2, [pc, #112]	; (8005470 <TIM_OC2_SetConfig+0x108>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d007      	beq.n	8005414 <TIM_OC2_SetConfig+0xac>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a1b      	ldr	r2, [pc, #108]	; (8005474 <TIM_OC2_SetConfig+0x10c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d003      	beq.n	8005414 <TIM_OC2_SetConfig+0xac>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a1a      	ldr	r2, [pc, #104]	; (8005478 <TIM_OC2_SetConfig+0x110>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d113      	bne.n	800543c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800541a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005422:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	4313      	orrs	r3, r2
 800543a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	feff8fff 	.word	0xfeff8fff
 8005468:	40010000 	.word	0x40010000
 800546c:	40010400 	.word	0x40010400
 8005470:	40014000 	.word	0x40014000
 8005474:	40014400 	.word	0x40014400
 8005478:	40014800 	.word	0x40014800

0800547c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4b33      	ldr	r3, [pc, #204]	; (8005574 <TIM_OC3_SetConfig+0xf8>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0303 	bic.w	r3, r3, #3
 80054b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a28      	ldr	r2, [pc, #160]	; (8005578 <TIM_OC3_SetConfig+0xfc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d003      	beq.n	80054e2 <TIM_OC3_SetConfig+0x66>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a27      	ldr	r2, [pc, #156]	; (800557c <TIM_OC3_SetConfig+0x100>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d10d      	bne.n	80054fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a1d      	ldr	r2, [pc, #116]	; (8005578 <TIM_OC3_SetConfig+0xfc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00f      	beq.n	8005526 <TIM_OC3_SetConfig+0xaa>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a1c      	ldr	r2, [pc, #112]	; (800557c <TIM_OC3_SetConfig+0x100>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00b      	beq.n	8005526 <TIM_OC3_SetConfig+0xaa>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <TIM_OC3_SetConfig+0x104>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d007      	beq.n	8005526 <TIM_OC3_SetConfig+0xaa>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a1a      	ldr	r2, [pc, #104]	; (8005584 <TIM_OC3_SetConfig+0x108>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d003      	beq.n	8005526 <TIM_OC3_SetConfig+0xaa>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a19      	ldr	r2, [pc, #100]	; (8005588 <TIM_OC3_SetConfig+0x10c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d113      	bne.n	800554e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800552c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	621a      	str	r2, [r3, #32]
}
 8005568:	bf00      	nop
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	fffeff8f 	.word	0xfffeff8f
 8005578:	40010000 	.word	0x40010000
 800557c:	40010400 	.word	0x40010400
 8005580:	40014000 	.word	0x40014000
 8005584:	40014400 	.word	0x40014400
 8005588:	40014800 	.word	0x40014800

0800558c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4b24      	ldr	r3, [pc, #144]	; (8005648 <TIM_OC4_SetConfig+0xbc>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	031b      	lsls	r3, r3, #12
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a19      	ldr	r2, [pc, #100]	; (800564c <TIM_OC4_SetConfig+0xc0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00f      	beq.n	800560c <TIM_OC4_SetConfig+0x80>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a18      	ldr	r2, [pc, #96]	; (8005650 <TIM_OC4_SetConfig+0xc4>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_OC4_SetConfig+0x80>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a17      	ldr	r2, [pc, #92]	; (8005654 <TIM_OC4_SetConfig+0xc8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_OC4_SetConfig+0x80>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a16      	ldr	r2, [pc, #88]	; (8005658 <TIM_OC4_SetConfig+0xcc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_OC4_SetConfig+0x80>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a15      	ldr	r2, [pc, #84]	; (800565c <TIM_OC4_SetConfig+0xd0>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d109      	bne.n	8005620 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	019b      	lsls	r3, r3, #6
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	feff8fff 	.word	0xfeff8fff
 800564c:	40010000 	.word	0x40010000
 8005650:	40010400 	.word	0x40010400
 8005654:	40014000 	.word	0x40014000
 8005658:	40014400 	.word	0x40014400
 800565c:	40014800 	.word	0x40014800

08005660 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4b21      	ldr	r3, [pc, #132]	; (8005710 <TIM_OC5_SetConfig+0xb0>)
 800568c:	4013      	ands	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	041b      	lsls	r3, r3, #16
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a18      	ldr	r2, [pc, #96]	; (8005714 <TIM_OC5_SetConfig+0xb4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00f      	beq.n	80056d6 <TIM_OC5_SetConfig+0x76>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a17      	ldr	r2, [pc, #92]	; (8005718 <TIM_OC5_SetConfig+0xb8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00b      	beq.n	80056d6 <TIM_OC5_SetConfig+0x76>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a16      	ldr	r2, [pc, #88]	; (800571c <TIM_OC5_SetConfig+0xbc>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d007      	beq.n	80056d6 <TIM_OC5_SetConfig+0x76>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a15      	ldr	r2, [pc, #84]	; (8005720 <TIM_OC5_SetConfig+0xc0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d003      	beq.n	80056d6 <TIM_OC5_SetConfig+0x76>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a14      	ldr	r2, [pc, #80]	; (8005724 <TIM_OC5_SetConfig+0xc4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d109      	bne.n	80056ea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	621a      	str	r2, [r3, #32]
}
 8005704:	bf00      	nop
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	fffeff8f 	.word	0xfffeff8f
 8005714:	40010000 	.word	0x40010000
 8005718:	40010400 	.word	0x40010400
 800571c:	40014000 	.word	0x40014000
 8005720:	40014400 	.word	0x40014400
 8005724:	40014800 	.word	0x40014800

08005728 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4b22      	ldr	r3, [pc, #136]	; (80057dc <TIM_OC6_SetConfig+0xb4>)
 8005754:	4013      	ands	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	021b      	lsls	r3, r3, #8
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800576a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	051b      	lsls	r3, r3, #20
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a19      	ldr	r2, [pc, #100]	; (80057e0 <TIM_OC6_SetConfig+0xb8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00f      	beq.n	80057a0 <TIM_OC6_SetConfig+0x78>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <TIM_OC6_SetConfig+0xbc>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00b      	beq.n	80057a0 <TIM_OC6_SetConfig+0x78>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <TIM_OC6_SetConfig+0xc0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d007      	beq.n	80057a0 <TIM_OC6_SetConfig+0x78>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a16      	ldr	r2, [pc, #88]	; (80057ec <TIM_OC6_SetConfig+0xc4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d003      	beq.n	80057a0 <TIM_OC6_SetConfig+0x78>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a15      	ldr	r2, [pc, #84]	; (80057f0 <TIM_OC6_SetConfig+0xc8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d109      	bne.n	80057b4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	029b      	lsls	r3, r3, #10
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	feff8fff 	.word	0xfeff8fff
 80057e0:	40010000 	.word	0x40010000
 80057e4:	40010400 	.word	0x40010400
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800

080057f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f003 031f 	and.w	r3, r3, #31
 8005806:	2201      	movs	r2, #1
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a1a      	ldr	r2, [r3, #32]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	43db      	mvns	r3, r3
 8005816:	401a      	ands	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a1a      	ldr	r2, [r3, #32]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 031f 	and.w	r3, r3, #31
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	fa01 f303 	lsl.w	r3, r1, r3
 800582c:	431a      	orrs	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005854:	2302      	movs	r3, #2
 8005856:	e06d      	b.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a30      	ldr	r2, [pc, #192]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d004      	beq.n	800588c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a2f      	ldr	r2, [pc, #188]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d108      	bne.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005892:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a20      	ldr	r2, [pc, #128]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d022      	beq.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ca:	d01d      	beq.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1d      	ldr	r2, [pc, #116]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d018      	beq.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1c      	ldr	r2, [pc, #112]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d013      	beq.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1a      	ldr	r2, [pc, #104]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00e      	beq.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a15      	ldr	r2, [pc, #84]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d009      	beq.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a16      	ldr	r2, [pc, #88]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d004      	beq.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a15      	ldr	r2, [pc, #84]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d10c      	bne.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800590e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	4313      	orrs	r3, r2
 8005918:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	40010000 	.word	0x40010000
 8005944:	40010400 	.word	0x40010400
 8005948:	40000400 	.word	0x40000400
 800594c:	40000800 	.word	0x40000800
 8005950:	40000c00 	.word	0x40000c00
 8005954:	40001800 	.word	0x40001800
 8005958:	40014000 	.word	0x40014000

0800595c <memset>:
 800595c:	4402      	add	r2, r0
 800595e:	4603      	mov	r3, r0
 8005960:	4293      	cmp	r3, r2
 8005962:	d100      	bne.n	8005966 <memset+0xa>
 8005964:	4770      	bx	lr
 8005966:	f803 1b01 	strb.w	r1, [r3], #1
 800596a:	e7f9      	b.n	8005960 <memset+0x4>

0800596c <__libc_init_array>:
 800596c:	b570      	push	{r4, r5, r6, lr}
 800596e:	4d0d      	ldr	r5, [pc, #52]	; (80059a4 <__libc_init_array+0x38>)
 8005970:	4c0d      	ldr	r4, [pc, #52]	; (80059a8 <__libc_init_array+0x3c>)
 8005972:	1b64      	subs	r4, r4, r5
 8005974:	10a4      	asrs	r4, r4, #2
 8005976:	2600      	movs	r6, #0
 8005978:	42a6      	cmp	r6, r4
 800597a:	d109      	bne.n	8005990 <__libc_init_array+0x24>
 800597c:	4d0b      	ldr	r5, [pc, #44]	; (80059ac <__libc_init_array+0x40>)
 800597e:	4c0c      	ldr	r4, [pc, #48]	; (80059b0 <__libc_init_array+0x44>)
 8005980:	f000 f818 	bl	80059b4 <_init>
 8005984:	1b64      	subs	r4, r4, r5
 8005986:	10a4      	asrs	r4, r4, #2
 8005988:	2600      	movs	r6, #0
 800598a:	42a6      	cmp	r6, r4
 800598c:	d105      	bne.n	800599a <__libc_init_array+0x2e>
 800598e:	bd70      	pop	{r4, r5, r6, pc}
 8005990:	f855 3b04 	ldr.w	r3, [r5], #4
 8005994:	4798      	blx	r3
 8005996:	3601      	adds	r6, #1
 8005998:	e7ee      	b.n	8005978 <__libc_init_array+0xc>
 800599a:	f855 3b04 	ldr.w	r3, [r5], #4
 800599e:	4798      	blx	r3
 80059a0:	3601      	adds	r6, #1
 80059a2:	e7f2      	b.n	800598a <__libc_init_array+0x1e>
 80059a4:	08006748 	.word	0x08006748
 80059a8:	08006748 	.word	0x08006748
 80059ac:	08006748 	.word	0x08006748
 80059b0:	0800674c 	.word	0x0800674c

080059b4 <_init>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr

080059c0 <_fini>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	bf00      	nop
 80059c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c6:	bc08      	pop	{r3}
 80059c8:	469e      	mov	lr, r3
 80059ca:	4770      	bx	lr
