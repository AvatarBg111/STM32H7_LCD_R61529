
stm32h750_r61529_tft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b8c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004e24  08004e24  00014e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004e34  08004e34  00014e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004e38  08004e38  00014e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08004e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000bc  24000010  08004e4c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240000cc  08004e4c  000200cc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   000106c1  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002175  00000000  00000000  00030742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000eb0  00000000  00000000  000328b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b51  00000000  00000000  00033768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037038  00000000  00000000  000342b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011c27  00000000  00000000  0006b2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001609af  00000000  00000000  0007cf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003d9c  00000000  00000000  001dd8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005b  00000000  00000000  001e1664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004e0c 	.word	0x08004e0c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004e0c 	.word	0x08004e0c

080002d8 <Lcd_Write_Reg>:
#include "r16529_fmc.h"

uint16_t X_SIZE = 480;
uint16_t Y_SIZE = 320;

void Lcd_Write_Reg (uint16_t index){
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	80fb      	strh	r3, [r7, #6]
	*(uint16_t *) (LCD_REG) = index;
 80002e2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80002e6:	88fb      	ldrh	r3, [r7, #6]
 80002e8:	8013      	strh	r3, [r2, #0]
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
	...

080002f8 <Lcd_Write_Data>:

void Lcd_Write_Data(uint16_t data){
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	80fb      	strh	r3, [r7, #6]
    *(uint16_t *) (LCD_DATA)= data;
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <Lcd_Write_Data+0x1c>)
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	8013      	strh	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	60080000 	.word	0x60080000

08000318 <ili9481_SetAddrWindow>:

void ili9481_SetAddrWindow(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2){
 8000318:	b590      	push	{r4, r7, lr}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4604      	mov	r4, r0
 8000320:	4608      	mov	r0, r1
 8000322:	4611      	mov	r1, r2
 8000324:	461a      	mov	r2, r3
 8000326:	4623      	mov	r3, r4
 8000328:	80fb      	strh	r3, [r7, #6]
 800032a:	4603      	mov	r3, r0
 800032c:	80bb      	strh	r3, [r7, #4]
 800032e:	460b      	mov	r3, r1
 8000330:	807b      	strh	r3, [r7, #2]
 8000332:	4613      	mov	r3, r2
 8000334:	803b      	strh	r3, [r7, #0]
	//Column Address Set
    DC_IDLE;
 8000336:	2201      	movs	r2, #1
 8000338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033c:	482b      	ldr	r0, [pc, #172]	; (80003ec <ili9481_SetAddrWindow+0xd4>)
 800033e:	f001 fb1b 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0x2A);
 8000342:	202a      	movs	r0, #42	; 0x2a
 8000344:	f7ff ffc8 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034e:	4827      	ldr	r0, [pc, #156]	; (80003ec <ili9481_SetAddrWindow+0xd4>)
 8000350:	f001 fb12 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(x1 >> 8);
 8000354:	88fb      	ldrh	r3, [r7, #6]
 8000356:	0a1b      	lsrs	r3, r3, #8
 8000358:	b29b      	uxth	r3, r3
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ffcc 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(x1 & 0xFF);
 8000360:	88fb      	ldrh	r3, [r7, #6]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	b29b      	uxth	r3, r3
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ffc6 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(x2 >> 8);
 800036c:	887b      	ldrh	r3, [r7, #2]
 800036e:	0a1b      	lsrs	r3, r3, #8
 8000370:	b29b      	uxth	r3, r3
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ffc0 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(x2 & 0xFF);
 8000378:	887b      	ldrh	r3, [r7, #2]
 800037a:	b2db      	uxtb	r3, r3
 800037c:	b29b      	uxth	r3, r3
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ffba 	bl	80002f8 <Lcd_Write_Data>

	//Page Address Set
    DC_IDLE;
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038a:	4818      	ldr	r0, [pc, #96]	; (80003ec <ili9481_SetAddrWindow+0xd4>)
 800038c:	f001 faf4 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0x2B);
 8000390:	202b      	movs	r0, #43	; 0x2b
 8000392:	f7ff ffa1 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039c:	4813      	ldr	r0, [pc, #76]	; (80003ec <ili9481_SetAddrWindow+0xd4>)
 800039e:	f001 faeb 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(y1 >> 8);
 80003a2:	88bb      	ldrh	r3, [r7, #4]
 80003a4:	0a1b      	lsrs	r3, r3, #8
 80003a6:	b29b      	uxth	r3, r3
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ffa5 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(y1 & 0xFF);
 80003ae:	88bb      	ldrh	r3, [r7, #4]
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff ff9f 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(y2 >> 8);
 80003ba:	883b      	ldrh	r3, [r7, #0]
 80003bc:	0a1b      	lsrs	r3, r3, #8
 80003be:	b29b      	uxth	r3, r3
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff ff99 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(y2 & 0xFF);
 80003c6:	883b      	ldrh	r3, [r7, #0]
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	b29b      	uxth	r3, r3
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ff93 	bl	80002f8 <Lcd_Write_Data>
    DC_IDLE;
 80003d2:	2201      	movs	r2, #1
 80003d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d8:	4804      	ldr	r0, [pc, #16]	; (80003ec <ili9481_SetAddrWindow+0xd4>)
 80003da:	f001 facd 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0x2C);
 80003de:	202c      	movs	r0, #44	; 0x2c
 80003e0:	f7ff ff7a 	bl	80002d8 <Lcd_Write_Reg>
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd90      	pop	{r4, r7, pc}
 80003ec:	58020c00 	.word	0x58020c00

080003f0 <Init_Disp>:

void Init_Disp(){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
    RESET_IDLE;
 80003f4:	2201      	movs	r2, #1
 80003f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fa:	48f2      	ldr	r0, [pc, #968]	; (80007c4 <Init_Disp+0x3d4>)
 80003fc:	f001 fabc 	bl	8001978 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000400:	2014      	movs	r0, #20
 8000402:	f000 fff5 	bl	80013f0 <HAL_Delay>
    RESET_ACTIVE;
 8000406:	2200      	movs	r2, #0
 8000408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040c:	48ed      	ldr	r0, [pc, #948]	; (80007c4 <Init_Disp+0x3d4>)
 800040e:	f001 fab3 	bl	8001978 <HAL_GPIO_WritePin>
    Lcd_Write_Reg(0x01); // reset
	HAL_Delay(20);
	*/

    // digitalWrite(PIN_CSX, LOW); //chip enable
    CS_IDLE;
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000418:	48ea      	ldr	r0, [pc, #936]	; (80007c4 <Init_Disp+0x3d4>)
 800041a:	f001 faad 	bl	8001978 <HAL_GPIO_WritePin>
    DC_IDLE;
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000424:	48e8      	ldr	r0, [pc, #928]	; (80007c8 <Init_Disp+0x3d8>)
 8000426:	f001 faa7 	bl	8001978 <HAL_GPIO_WritePin>
    WR_IDLE;
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000430:	48e6      	ldr	r0, [pc, #920]	; (80007cc <Init_Disp+0x3dc>)
 8000432:	f001 faa1 	bl	8001978 <HAL_GPIO_WritePin>
    Lcd_Write_Reg(0x11); //exit sleep mode;
 8000436:	2011      	movs	r0, #17
 8000438:	f7ff ff4e 	bl	80002d8 <Lcd_Write_Reg>
	HAL_Delay(200);
 800043c:	20c8      	movs	r0, #200	; 0xc8
 800043e:	f000 ffd7 	bl	80013f0 <HAL_Delay>
	Lcd_Write_Reg(0xB0); //manufacturer command access protect
 8000442:	20b0      	movs	r0, #176	; 0xb0
 8000444:	f7ff ff48 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044e:	48de      	ldr	r0, [pc, #888]	; (80007c8 <Init_Disp+0x3d8>)
 8000450:	f001 fa92 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x04); //allow access to additional manufacturer's commands
 8000454:	2004      	movs	r0, #4
 8000456:	f7ff ff4f 	bl	80002f8 <Lcd_Write_Data>
	HAL_Delay(1);
 800045a:	2001      	movs	r0, #1
 800045c:	f000 ffc8 	bl	80013f0 <HAL_Delay>

    DC_IDLE;
 8000460:	2201      	movs	r2, #1
 8000462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000466:	48d8      	ldr	r0, [pc, #864]	; (80007c8 <Init_Disp+0x3d8>)
 8000468:	f001 fa86 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0xB3); //Frame Memory Access and Interface Setting
 800046c:	20b3      	movs	r0, #179	; 0xb3
 800046e:	f7ff ff33 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000478:	48d3      	ldr	r0, [pc, #844]	; (80007c8 <Init_Disp+0x3d8>)
 800047a:	f001 fa7d 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x02); // reset start position of a window area address...
 800047e:	2002      	movs	r0, #2
 8000480:	f7ff ff3a 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00); //TE pin is used. TE signal is output every frame.
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff37 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00); // empty according to the datasheet - does nothing;
 800048a:	2000      	movs	r0, #0
 800048c:	f7ff ff34 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00); // convert 16/18 bits to 24bits data by writing zeroes to LSBs. Sets image data write/read format(?)
 8000490:	2000      	movs	r0, #0
 8000492:	f7ff ff31 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);  // ???? (not needed?)
 8000496:	2000      	movs	r0, #0
 8000498:	f7ff ff2e 	bl	80002f8 <Lcd_Write_Data>
	HAL_Delay(1);
 800049c:	2001      	movs	r0, #1
 800049e:	f000 ffa7 	bl	80013f0 <HAL_Delay>

    DC_IDLE;
 80004a2:	2201      	movs	r2, #1
 80004a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a8:	48c7      	ldr	r0, [pc, #796]	; (80007c8 <Init_Disp+0x3d8>)
 80004aa:	f001 fa65 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0xB4); //Display Mode
 80004ae:	20b4      	movs	r0, #180	; 0xb4
 80004b0:	f7ff ff12 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ba:	48c3      	ldr	r0, [pc, #780]	; (80007c8 <Init_Disp+0x3d8>)
 80004bc:	f001 fa5c 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x00); //Uses internal oscillator
 80004c0:	2000      	movs	r0, #0
 80004c2:	f7ff ff19 	bl	80002f8 <Lcd_Write_Data>
	HAL_Delay(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f000 ff92 	bl	80013f0 <HAL_Delay>

    DC_IDLE;
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d2:	48bd      	ldr	r0, [pc, #756]	; (80007c8 <Init_Disp+0x3d8>)
 80004d4:	f001 fa50 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0xC0); // Panel Driving Setting;
 80004d8:	20c0      	movs	r0, #192	; 0xc0
 80004da:	f7ff fefd 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e4:	48b8      	ldr	r0, [pc, #736]	; (80007c8 <Init_Disp+0x3d8>)
 80004e6:	f001 fa47 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x03); // Output polarity is inverted. Left/right interchanging scan. Forward scan. BGR mode (depends on other settings). S960 ? S1 (depends)
 80004ea:	2003      	movs	r0, #3
 80004ec:	f7ff ff04 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0xDF); // Number of lines for driver to drive - 480.
 80004f0:	20df      	movs	r0, #223	; 0xdf
 80004f2:	f7ff ff01 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x40); // Scan start position - Gate1. (depend on other param);
 80004f6:	2040      	movs	r0, #64	; 0x40
 80004f8:	f7ff fefe 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x10); // Dot inversion. Dot inversion in not-lit display area. If 0x13 - both will be set to 'column inversion'.
 80004fc:	2010      	movs	r0, #16
 80004fe:	f7ff fefb 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00); // settings for non-lit display area...
 8000502:	2000      	movs	r0, #0
 8000504:	f7ff fef8 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x01); // 3 frame scan interval in non-display area...
 8000508:	2001      	movs	r0, #1
 800050a:	f7ff fef5 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00); // Source output level in retrace period...
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fef2 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x55);//54 . Internal clock divider = 5 (low and high periods).
 8000514:	2055      	movs	r0, #85	; 0x55
 8000516:	f7ff feef 	bl	80002f8 <Lcd_Write_Data>

    DC_IDLE;
 800051a:	2201      	movs	r2, #1
 800051c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000520:	48a9      	ldr	r0, [pc, #676]	; (80007c8 <Init_Disp+0x3d8>)
 8000522:	f001 fa29 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0xC1); //Display Timing Setting for Normal Mode
 8000526:	20c1      	movs	r0, #193	; 0xc1
 8000528:	f7ff fed6 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000532:	48a5      	ldr	r0, [pc, #660]	; (80007c8 <Init_Disp+0x3d8>)
 8000534:	f001 fa20 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x07); // Clock devider = 12. 14MHz/12. Used by display circuit and step-up circuit.
 8000538:	2007      	movs	r0, #7
 800053a:	f7ff fedd 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x27); // These bits set the number of clocks in 1 line period. 0x27 - 39 clocks.
 800053e:	2027      	movs	r0, #39	; 0x27
 8000540:	f7ff feda 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x08); // Number of back porch lines. 0x08 - 8 lines.
 8000544:	2008      	movs	r0, #8
 8000546:	f7ff fed7 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x08); // Number of front porch lines. 0x08 - 8lines.
 800054a:	2008      	movs	r0, #8
 800054c:	f7ff fed4 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00); // Spacial configuriation mode 1 (?). 1 line inversion mode (?).
 8000550:	2000      	movs	r0, #0
 8000552:	f7ff fed1 	bl	80002f8 <Lcd_Write_Data>

    DC_IDLE;
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055c:	489a      	ldr	r0, [pc, #616]	; (80007c8 <Init_Disp+0x3d8>)
 800055e:	f001 fa0b 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0xC4); // Source/Gate Driving Timing Setting
 8000562:	20c4      	movs	r0, #196	; 0xc4
 8000564:	f7ff feb8 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800056e:	4896      	ldr	r0, [pc, #600]	; (80007c8 <Init_Disp+0x3d8>)
 8000570:	f001 fa02 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x57); // falling position (stop) of gate driver - 4 clocks... gate start position - 8 clocks...
 8000574:	2057      	movs	r0, #87	; 0x57
 8000576:	f7ff febf 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00); // nothing to set up according to the datasheet
 800057a:	2000      	movs	r0, #0
 800057c:	f7ff febc 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x05); // Source precharge period (GND) - 5 clocks.
 8000580:	2005      	movs	r0, #5
 8000582:	f7ff feb9 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x03); // source precharge period (VCI) - 3 clocks.
 8000586:	2003      	movs	r0, #3
 8000588:	f7ff feb6 	bl	80002f8 <Lcd_Write_Data>

    DC_IDLE;
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000592:	488d      	ldr	r0, [pc, #564]	; (80007c8 <Init_Disp+0x3d8>)
 8000594:	f001 f9f0 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0xC6); //DPI polarity control
 8000598:	20c6      	movs	r0, #198	; 0xc6
 800059a:	f7ff fe9d 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a4:	4888      	ldr	r0, [pc, #544]	; (80007c8 <Init_Disp+0x3d8>)
 80005a6:	f001 f9e7 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x04); // VSYNC -Active Low. HSYNC - Active Low. DE pin enable data write in when DE=1. Reads data on the rising edge of the PCLK signal.
 80005aa:	2004      	movs	r0, #4
 80005ac:	f7ff fea4 	bl	80002f8 <Lcd_Write_Data>

	//----Gamma setting start-----
    DC_IDLE;
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b6:	4884      	ldr	r0, [pc, #528]	; (80007c8 <Init_Disp+0x3d8>)
 80005b8:	f001 f9de 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0xC8);
 80005bc:	20c8      	movs	r0, #200	; 0xc8
 80005be:	f7ff fe8b 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c8:	487f      	ldr	r0, [pc, #508]	; (80007c8 <Init_Disp+0x3d8>)
 80005ca:	f001 f9d5 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x03);
 80005ce:	2003      	movs	r0, #3
 80005d0:	f7ff fe92 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 80005d4:	2012      	movs	r0, #18
 80005d6:	f7ff fe8f 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x1A);
 80005da:	201a      	movs	r0, #26
 80005dc:	f7ff fe8c 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x24);
 80005e0:	2024      	movs	r0, #36	; 0x24
 80005e2:	f7ff fe89 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x32);
 80005e6:	2032      	movs	r0, #50	; 0x32
 80005e8:	f7ff fe86 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x4B);
 80005ec:	204b      	movs	r0, #75	; 0x4b
 80005ee:	f7ff fe83 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x3B);
 80005f2:	203b      	movs	r0, #59	; 0x3b
 80005f4:	f7ff fe80 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x29);
 80005f8:	2029      	movs	r0, #41	; 0x29
 80005fa:	f7ff fe7d 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x1F);
 80005fe:	201f      	movs	r0, #31
 8000600:	f7ff fe7a 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x18);
 8000604:	2018      	movs	r0, #24
 8000606:	f7ff fe77 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 800060a:	2012      	movs	r0, #18
 800060c:	f7ff fe74 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x04);
 8000610:	2004      	movs	r0, #4
 8000612:	f7ff fe71 	bl	80002f8 <Lcd_Write_Data>

	Lcd_Write_Data(0x03);
 8000616:	2003      	movs	r0, #3
 8000618:	f7ff fe6e 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 800061c:	2012      	movs	r0, #18
 800061e:	f7ff fe6b 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x1A);
 8000622:	201a      	movs	r0, #26
 8000624:	f7ff fe68 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x24);
 8000628:	2024      	movs	r0, #36	; 0x24
 800062a:	f7ff fe65 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x32);
 800062e:	2032      	movs	r0, #50	; 0x32
 8000630:	f7ff fe62 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x4B);
 8000634:	204b      	movs	r0, #75	; 0x4b
 8000636:	f7ff fe5f 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x3B);
 800063a:	203b      	movs	r0, #59	; 0x3b
 800063c:	f7ff fe5c 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x29);
 8000640:	2029      	movs	r0, #41	; 0x29
 8000642:	f7ff fe59 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x1F);
 8000646:	201f      	movs	r0, #31
 8000648:	f7ff fe56 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x18);
 800064c:	2018      	movs	r0, #24
 800064e:	f7ff fe53 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 8000652:	2012      	movs	r0, #18
 8000654:	f7ff fe50 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x04);
 8000658:	2004      	movs	r0, #4
 800065a:	f7ff fe4d 	bl	80002f8 <Lcd_Write_Data>

    DC_IDLE;
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000664:	4858      	ldr	r0, [pc, #352]	; (80007c8 <Init_Disp+0x3d8>)
 8000666:	f001 f987 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0xC9);
 800066a:	20c9      	movs	r0, #201	; 0xc9
 800066c:	f7ff fe34 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000676:	4854      	ldr	r0, [pc, #336]	; (80007c8 <Init_Disp+0x3d8>)
 8000678:	f001 f97e 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x03);
 800067c:	2003      	movs	r0, #3
 800067e:	f7ff fe3b 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 8000682:	2012      	movs	r0, #18
 8000684:	f7ff fe38 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x1A);
 8000688:	201a      	movs	r0, #26
 800068a:	f7ff fe35 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x24);
 800068e:	2024      	movs	r0, #36	; 0x24
 8000690:	f7ff fe32 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x32);
 8000694:	2032      	movs	r0, #50	; 0x32
 8000696:	f7ff fe2f 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x4B);
 800069a:	204b      	movs	r0, #75	; 0x4b
 800069c:	f7ff fe2c 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x3B);
 80006a0:	203b      	movs	r0, #59	; 0x3b
 80006a2:	f7ff fe29 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x29);
 80006a6:	2029      	movs	r0, #41	; 0x29
 80006a8:	f7ff fe26 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x1F);
 80006ac:	201f      	movs	r0, #31
 80006ae:	f7ff fe23 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x18);
 80006b2:	2018      	movs	r0, #24
 80006b4:	f7ff fe20 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 80006b8:	2012      	movs	r0, #18
 80006ba:	f7ff fe1d 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x04);
 80006be:	2004      	movs	r0, #4
 80006c0:	f7ff fe1a 	bl	80002f8 <Lcd_Write_Data>

	Lcd_Write_Data(0x03);
 80006c4:	2003      	movs	r0, #3
 80006c6:	f7ff fe17 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 80006ca:	2012      	movs	r0, #18
 80006cc:	f7ff fe14 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x1A);
 80006d0:	201a      	movs	r0, #26
 80006d2:	f7ff fe11 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x24);
 80006d6:	2024      	movs	r0, #36	; 0x24
 80006d8:	f7ff fe0e 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x32);
 80006dc:	2032      	movs	r0, #50	; 0x32
 80006de:	f7ff fe0b 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x4B);
 80006e2:	204b      	movs	r0, #75	; 0x4b
 80006e4:	f7ff fe08 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x3B);
 80006e8:	203b      	movs	r0, #59	; 0x3b
 80006ea:	f7ff fe05 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x29);
 80006ee:	2029      	movs	r0, #41	; 0x29
 80006f0:	f7ff fe02 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x1F);
 80006f4:	201f      	movs	r0, #31
 80006f6:	f7ff fdff 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x18);
 80006fa:	2018      	movs	r0, #24
 80006fc:	f7ff fdfc 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 8000700:	2012      	movs	r0, #18
 8000702:	f7ff fdf9 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x04);
 8000706:	2004      	movs	r0, #4
 8000708:	f7ff fdf6 	bl	80002f8 <Lcd_Write_Data>

    DC_IDLE;
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000712:	482d      	ldr	r0, [pc, #180]	; (80007c8 <Init_Disp+0x3d8>)
 8000714:	f001 f930 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0xCA);
 8000718:	20ca      	movs	r0, #202	; 0xca
 800071a:	f7ff fddd 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000724:	4828      	ldr	r0, [pc, #160]	; (80007c8 <Init_Disp+0x3d8>)
 8000726:	f001 f927 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x03);
 800072a:	2003      	movs	r0, #3
 800072c:	f7ff fde4 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 8000730:	2012      	movs	r0, #18
 8000732:	f7ff fde1 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x1A);
 8000736:	201a      	movs	r0, #26
 8000738:	f7ff fdde 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x24);
 800073c:	2024      	movs	r0, #36	; 0x24
 800073e:	f7ff fddb 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x32);
 8000742:	2032      	movs	r0, #50	; 0x32
 8000744:	f7ff fdd8 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x4B);
 8000748:	204b      	movs	r0, #75	; 0x4b
 800074a:	f7ff fdd5 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x3B);
 800074e:	203b      	movs	r0, #59	; 0x3b
 8000750:	f7ff fdd2 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x29);
 8000754:	2029      	movs	r0, #41	; 0x29
 8000756:	f7ff fdcf 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x1F);
 800075a:	201f      	movs	r0, #31
 800075c:	f7ff fdcc 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x18);
 8000760:	2018      	movs	r0, #24
 8000762:	f7ff fdc9 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 8000766:	2012      	movs	r0, #18
 8000768:	f7ff fdc6 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x04);
 800076c:	2004      	movs	r0, #4
 800076e:	f7ff fdc3 	bl	80002f8 <Lcd_Write_Data>

	Lcd_Write_Data(0x03);
 8000772:	2003      	movs	r0, #3
 8000774:	f7ff fdc0 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 8000778:	2012      	movs	r0, #18
 800077a:	f7ff fdbd 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x1A);
 800077e:	201a      	movs	r0, #26
 8000780:	f7ff fdba 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x24);
 8000784:	2024      	movs	r0, #36	; 0x24
 8000786:	f7ff fdb7 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x32);
 800078a:	2032      	movs	r0, #50	; 0x32
 800078c:	f7ff fdb4 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x4B);
 8000790:	204b      	movs	r0, #75	; 0x4b
 8000792:	f7ff fdb1 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x3B);
 8000796:	203b      	movs	r0, #59	; 0x3b
 8000798:	f7ff fdae 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x29);
 800079c:	2029      	movs	r0, #41	; 0x29
 800079e:	f7ff fdab 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x1F);
 80007a2:	201f      	movs	r0, #31
 80007a4:	f7ff fda8 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x18);
 80007a8:	2018      	movs	r0, #24
 80007aa:	f7ff fda5 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x12);
 80007ae:	2012      	movs	r0, #18
 80007b0:	f7ff fda2 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x04);
 80007b4:	2004      	movs	r0, #4
 80007b6:	f7ff fd9f 	bl	80002f8 <Lcd_Write_Data>
	//---Gamma setting end--------

    DC_IDLE;
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c0:	e006      	b.n	80007d0 <Init_Disp+0x3e0>
 80007c2:	bf00      	nop
 80007c4:	58020400 	.word	0x58020400
 80007c8:	58020c00 	.word	0x58020c00
 80007cc:	58020800 	.word	0x58020800
 80007d0:	488a      	ldr	r0, [pc, #552]	; (80009fc <Init_Disp+0x60c>)
 80007d2:	f001 f8d1 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0xD0); // Power (charge pump) settings
 80007d6:	20d0      	movs	r0, #208	; 0xd0
 80007d8:	f7ff fd7e 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e2:	4886      	ldr	r0, [pc, #536]	; (80009fc <Init_Disp+0x60c>)
 80007e4:	f001 f8c8 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x99);//DC4~1//A5. Set up clock cycle of the internal step up controller.
 80007e8:	2099      	movs	r0, #153	; 0x99
 80007ea:	f7ff fd85 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x06);//BT // Set Voltage step up factor.
 80007ee:	2006      	movs	r0, #6
 80007f0:	f7ff fd82 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x08);// default according to the datasheet - does nothing.
 80007f4:	2008      	movs	r0, #8
 80007f6:	f7ff fd7f 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x20);// VCN step up cycles.
 80007fa:	2020      	movs	r0, #32
 80007fc:	f7ff fd7c 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x29);//VC1, VC2// VCI3 voltage = 2.70V;  VCI2 voltage = 3.8V.
 8000800:	2029      	movs	r0, #41	; 0x29
 8000802:	f7ff fd79 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x04);// default
 8000806:	2004      	movs	r0, #4
 8000808:	f7ff fd76 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x01);// default
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff fd73 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);// default
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff fd70 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x08);// default
 8000818:	2008      	movs	r0, #8
 800081a:	f7ff fd6d 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x01);// default
 800081e:	2001      	movs	r0, #1
 8000820:	f7ff fd6a 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);// default
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff fd67 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x06);// default
 800082a:	2006      	movs	r0, #6
 800082c:	f7ff fd64 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x01);// default
 8000830:	2001      	movs	r0, #1
 8000832:	f7ff fd61 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);// default
 8000836:	2000      	movs	r0, #0
 8000838:	f7ff fd5e 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);// default
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fd5b 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x20);// default
 8000842:	2020      	movs	r0, #32
 8000844:	f7ff fd58 	bl	80002f8 <Lcd_Write_Data>

    DC_IDLE;
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084e:	486b      	ldr	r0, [pc, #428]	; (80009fc <Init_Disp+0x60c>)
 8000850:	f001 f892 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0xD1);//VCOM setting
 8000854:	20d1      	movs	r0, #209	; 0xd1
 8000856:	f7ff fd3f 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000860:	4866      	ldr	r0, [pc, #408]	; (80009fc <Init_Disp+0x60c>)
 8000862:	f001 f889 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x00);//disable write to VDC[7:0].
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff fd46 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x20);//45 38 VPLVL// voltage of ? correction registers for positive polarity
 800086c:	2020      	movs	r0, #32
 800086e:	f7ff fd43 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x20);//45 38 VNLVL// voltage of ? correction registers for negative polarity
 8000872:	2020      	movs	r0, #32
 8000874:	f7ff fd40 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x15);//32 2A VCOMDC// VNLVL x 0.063
 8000878:	2015      	movs	r0, #21
 800087a:	f7ff fd3d 	bl	80002f8 <Lcd_Write_Data>

    DC_IDLE;
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000884:	485d      	ldr	r0, [pc, #372]	; (80009fc <Init_Disp+0x60c>)
 8000886:	f001 f877 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0xE0);//NVM Access Control
 800088a:	20e0      	movs	r0, #224	; 0xe0
 800088c:	f7ff fd24 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000896:	4859      	ldr	r0, [pc, #356]	; (80009fc <Init_Disp+0x60c>)
 8000898:	f001 f86e 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x00);//NVM access is disabled
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff fd2b 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);//Erase operation (disabled).
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fd28 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);//TE pin works as tearing effect pin.
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff fd25 	bl	80002f8 <Lcd_Write_Data>
	// should be one more Lcd_Write_Data(0x00); according to the datasheet.

    DC_IDLE;
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b4:	4851      	ldr	r0, [pc, #324]	; (80009fc <Init_Disp+0x60c>)
 80008b6:	f001 f85f 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0xE1); //set_DDB_write_control
 80008ba:	20e1      	movs	r0, #225	; 0xe1
 80008bc:	f7ff fd0c 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c6:	484d      	ldr	r0, [pc, #308]	; (80009fc <Init_Disp+0x60c>)
 80008c8:	f001 f856 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x00);
 80008cc:	2000      	movs	r0, #0
 80008ce:	f7ff fd13 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff fd10 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff fd0d 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff fd0a 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff fd07 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff fd04 	bl	80002f8 <Lcd_Write_Data>

    DC_IDLE;
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f6:	4841      	ldr	r0, [pc, #260]	; (80009fc <Init_Disp+0x60c>)
 80008f8:	f001 f83e 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0xE2); //NVM Load Control
 80008fc:	20e2      	movs	r0, #226	; 0xe2
 80008fe:	f7ff fceb 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000908:	483c      	ldr	r0, [pc, #240]	; (80009fc <Init_Disp+0x60c>)
 800090a:	f001 f835 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x00); // does not execute data load from the NVM to each command
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fcf2 	bl	80002f8 <Lcd_Write_Data>

    DC_IDLE;
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091a:	4838      	ldr	r0, [pc, #224]	; (80009fc <Init_Disp+0x60c>)
 800091c:	f001 f82c 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0x36); //set_address_mode
 8000920:	2036      	movs	r0, #54	; 0x36
 8000922:	f7ff fcd9 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092c:	4833      	ldr	r0, [pc, #204]	; (80009fc <Init_Disp+0x60c>)
 800092e:	f001 f823 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x20|0x00|0x01); // data is not flipped in any way?
 8000932:	2021      	movs	r0, #33	; 0x21
 8000934:	f7ff fce0 	bl	80002f8 <Lcd_Write_Data>

    DC_IDLE;
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800093e:	482f      	ldr	r0, [pc, #188]	; (80009fc <Init_Disp+0x60c>)
 8000940:	f001 f81a 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0x3A); // set_pixel_format
 8000944:	203a      	movs	r0, #58	; 0x3a
 8000946:	f7ff fcc7 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000950:	482a      	ldr	r0, [pc, #168]	; (80009fc <Init_Disp+0x60c>)
 8000952:	f001 f811 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x55);// 16-Bit/pixel = 55h, 24-bit/pixel = 77h
 8000956:	2055      	movs	r0, #85	; 0x55
 8000958:	f7ff fcce 	bl	80002f8 <Lcd_Write_Data>

    DC_IDLE;
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000962:	4826      	ldr	r0, [pc, #152]	; (80009fc <Init_Disp+0x60c>)
 8000964:	f001 f808 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0x2A); //set_column_address
 8000968:	202a      	movs	r0, #42	; 0x2a
 800096a:	f7ff fcb5 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000974:	4821      	ldr	r0, [pc, #132]	; (80009fc <Init_Disp+0x60c>)
 8000976:	f000 ffff 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x00); // starts from 0th frame buffer address
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fcbc 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff fcb9 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x01);
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff fcb6 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0xDF);//320 - uses all columns
 800098c:	20df      	movs	r0, #223	; 0xdf
 800098e:	f7ff fcb3 	bl	80002f8 <Lcd_Write_Data>

    DC_IDLE;
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000998:	4818      	ldr	r0, [pc, #96]	; (80009fc <Init_Disp+0x60c>)
 800099a:	f000 ffed 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0x2B); //set_page_address
 800099e:	202b      	movs	r0, #43	; 0x2b
 80009a0:	f7ff fc9a 	bl	80002d8 <Lcd_Write_Reg>
    DC_ACTIVE;
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009aa:	4814      	ldr	r0, [pc, #80]	; (80009fc <Init_Disp+0x60c>)
 80009ac:	f000 ffe4 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Data(0x00); // starts from 0th frame buffer address
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff fca1 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x00);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff fc9e 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x01);
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff fc9b 	bl	80002f8 <Lcd_Write_Data>
	Lcd_Write_Data(0x3F);//480 - uses all lines in the frame buffer
 80009c2:	203f      	movs	r0, #63	; 0x3f
 80009c4:	f7ff fc98 	bl	80002f8 <Lcd_Write_Data>
	//  Lcd_Write_Data(0x00); // starts from 0th frame buffer address
	//  Lcd_Write_Data(0x00);
	//  Lcd_Write_Data(0x01);
	//  Lcd_Write_Data(0xDF);//480 - uses all lines in the frame buffer

    DC_IDLE;
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ce:	480b      	ldr	r0, [pc, #44]	; (80009fc <Init_Disp+0x60c>)
 80009d0:	f000 ffd2 	bl	8001978 <HAL_GPIO_WritePin>
	Lcd_Write_Reg(0x29); //set_display_on - This command causes the display module to start displaying the image data on the display device.
 80009d4:	2029      	movs	r0, #41	; 0x29
 80009d6:	f7ff fc7f 	bl	80002d8 <Lcd_Write_Reg>
	HAL_Delay(20);
 80009da:	2014      	movs	r0, #20
 80009dc:	f000 fd08 	bl	80013f0 <HAL_Delay>
    DC_ACTIVE;
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <Init_Disp+0x60c>)
 80009e8:	f000 ffc6 	bl	8001978 <HAL_GPIO_WritePin>
    CS_ACTIVE;
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f2:	4803      	ldr	r0, [pc, #12]	; (8000a00 <Init_Disp+0x610>)
 80009f4:	f000 ffc0 	bl	8001978 <HAL_GPIO_WritePin>
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	58020c00 	.word	0x58020c00
 8000a00:	58020400 	.word	0x58020400

08000a04 <ili9481_Flood>:
	}

    CS_ACTIVE;
}

void ili9481_Flood(uint16_t color, uint32_t len){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	80fb      	strh	r3, [r7, #6]
	uint16_t blocks;
	uint8_t i;

    //	Lcd_Write_Reg(0x2C);
	Lcd_Write_Data(color);
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fc70 	bl	80002f8 <Lcd_Write_Data>
	len--;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	603b      	str	r3, [r7, #0]
	blocks = (uint16_t)(len / 64);//64pixels/blocks
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	099b      	lsrs	r3, r3, #6
 8000a22:	81fb      	strh	r3, [r7, #14]

	while(blocks--){
 8000a24:	e01b      	b.n	8000a5e <ili9481_Flood+0x5a>
		i = 16;
 8000a26:	2310      	movs	r3, #16
 8000a28:	737b      	strb	r3, [r7, #13]

		do{
			Lcd_Write_Data(color);
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fc63 	bl	80002f8 <Lcd_Write_Data>
			Lcd_Write_Data(color);
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fc5f 	bl	80002f8 <Lcd_Write_Data>
			Lcd_Write_Data(color);
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fc5b 	bl	80002f8 <Lcd_Write_Data>
			Lcd_Write_Data(color);
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fc57 	bl	80002f8 <Lcd_Write_Data>
			Lcd_Write_Data(color);
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fc53 	bl	80002f8 <Lcd_Write_Data>
		}while(--i);
 8000a52:	7b7b      	ldrb	r3, [r7, #13]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	737b      	strb	r3, [r7, #13]
 8000a58:	7b7b      	ldrb	r3, [r7, #13]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1e5      	bne.n	8000a2a <ili9481_Flood+0x26>
	while(blocks--){
 8000a5e:	89fb      	ldrh	r3, [r7, #14]
 8000a60:	1e5a      	subs	r2, r3, #1
 8000a62:	81fa      	strh	r2, [r7, #14]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1de      	bne.n	8000a26 <ili9481_Flood+0x22>
	}

	//Fill any remaining pixels (1 to 64);
	for(i = (uint8_t)len & 63; i--;){
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a70:	737b      	strb	r3, [r7, #13]
 8000a72:	e003      	b.n	8000a7c <ili9481_Flood+0x78>
		Lcd_Write_Data(color);
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fc3e 	bl	80002f8 <Lcd_Write_Data>
	for(i = (uint8_t)len & 63; i--;){
 8000a7c:	7b7b      	ldrb	r3, [r7, #13]
 8000a7e:	1e5a      	subs	r2, r3, #1
 8000a80:	737a      	strb	r2, [r7, #13]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1f6      	bne.n	8000a74 <ili9481_Flood+0x70>
	}
}
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <ili9481_FillRect>:
	ili9481_Flood(color,(long)X_SIZE*(long)Y_SIZE);

    CS_ACTIVE;
}

void ili9481_FillRect(uint16_t color, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2){
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4604      	mov	r4, r0
 8000a98:	4608      	mov	r0, r1
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4623      	mov	r3, r4
 8000aa0:	80fb      	strh	r3, [r7, #6]
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80bb      	strh	r3, [r7, #4]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	807b      	strh	r3, [r7, #2]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	803b      	strh	r3, [r7, #0]
	if(x2==480) x2=479;
 8000aae:	883b      	ldrh	r3, [r7, #0]
 8000ab0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000ab4:	d102      	bne.n	8000abc <ili9481_FillRect+0x2c>
 8000ab6:	f240 13df 	movw	r3, #479	; 0x1df
 8000aba:	803b      	strh	r3, [r7, #0]
	if(y2==320) y2=319;
 8000abc:	8b3b      	ldrh	r3, [r7, #24]
 8000abe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ac2:	d102      	bne.n	8000aca <ili9481_FillRect+0x3a>
 8000ac4:	f240 133f 	movw	r3, #319	; 0x13f
 8000ac8:	833b      	strh	r3, [r7, #24]

	ili9481_SetAddrWindow(x1, y1, x2, y2);
 8000aca:	8b3b      	ldrh	r3, [r7, #24]
 8000acc:	883a      	ldrh	r2, [r7, #0]
 8000ace:	8879      	ldrh	r1, [r7, #2]
 8000ad0:	88b8      	ldrh	r0, [r7, #4]
 8000ad2:	f7ff fc21 	bl	8000318 <ili9481_SetAddrWindow>
	ili9481_Flood(color, (uint16_t)(x2 - x1 + 1)*(uint16_t)(y2 - y1 + 1));
 8000ad6:	883a      	ldrh	r2, [r7, #0]
 8000ad8:	88bb      	ldrh	r3, [r7, #4]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	3301      	adds	r3, #1
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	8b3a      	ldrh	r2, [r7, #24]
 8000ae6:	887b      	ldrh	r3, [r7, #2]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	3301      	adds	r3, #1
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	fb01 f303 	mul.w	r3, r1, r3
 8000af4:	461a      	mov	r2, r3
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff82 	bl	8000a04 <ili9481_Flood>
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd90      	pop	{r4, r7, pc}

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0e:	f000 fbdd 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b12:	f000 f815 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b16:	f000 f94f 	bl	8000db8 <MX_GPIO_Init>
  MX_FMC_Init();
 8000b1a:	f000 f8e9 	bl	8000cf0 <MX_FMC_Init>
  MX_TIM2_Init();
 8000b1e:	f000 f88d 	bl	8000c3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Init_Disp();
 8000b22:	f7ff fc65 	bl	80003f0 <Init_Disp>
  HAL_Delay(5);
 8000b26:	2005      	movs	r0, #5
 8000b28:	f000 fc62 	bl	80013f0 <HAL_Delay>
  ili9481_FillRect(WHITE, 10, 10, 100, 100);
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2364      	movs	r3, #100	; 0x64
 8000b32:	220a      	movs	r2, #10
 8000b34:	210a      	movs	r1, #10
 8000b36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b3a:	f7ff ffa9 	bl	8000a90 <ili9481_FillRect>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
 8000b3e:	e7fe      	b.n	8000b3e <main+0x36>

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b09c      	sub	sp, #112	; 0x70
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	224c      	movs	r2, #76	; 0x4c
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f004 f930 	bl	8004db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2220      	movs	r2, #32
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f004 f92a 	bl	8004db4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b60:	2002      	movs	r0, #2
 8000b62:	f000 ff23 	bl	80019ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b32      	ldr	r3, [pc, #200]	; (8000c34 <SystemClock_Config+0xf4>)
 8000b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6e:	4a31      	ldr	r2, [pc, #196]	; (8000c34 <SystemClock_Config+0xf4>)
 8000b70:	f023 0301 	bic.w	r3, r3, #1
 8000b74:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b76:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <SystemClock_Config+0xf4>)
 8000b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <SystemClock_Config+0xf8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b88:	4a2b      	ldr	r2, [pc, #172]	; (8000c38 <SystemClock_Config+0xf8>)
 8000b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <SystemClock_Config+0xf8>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b9c:	bf00      	nop
 8000b9e:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <SystemClock_Config+0xf8>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000baa:	d1f8      	bne.n	8000b9e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bac:	2302      	movs	r3, #2
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb4:	2340      	movs	r3, #64	; 0x40
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000bc0:	2320      	movs	r3, #32
 8000bc2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 480;
 8000bc4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bc8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000bca:	2308      	movs	r3, #8
 8000bcc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 ff1a 	bl	8001a20 <HAL_RCC_OscConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000bf2:	f000 f973 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf6:	233f      	movs	r3, #63	; 0x3f
 8000bf8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 fb5a 	bl	80022d4 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000c26:	f000 f959 	bl	8000edc <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3770      	adds	r7, #112	; 0x70
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	58000400 	.word	0x58000400
 8000c38:	58024800 	.word	0x58024800

08000c3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
 8000c5c:	615a      	str	r2, [r3, #20]
 8000c5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <MX_TIM2_Init+0xb0>)
 8000c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50;
 8000c68:	4b20      	ldr	r3, [pc, #128]	; (8000cec <MX_TIM2_Init+0xb0>)
 8000c6a:	2232      	movs	r2, #50	; 0x32
 8000c6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <MX_TIM2_Init+0xb0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19650 - 1;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <MX_TIM2_Init+0xb0>)
 8000c76:	f644 42c1 	movw	r2, #19649	; 0x4cc1
 8000c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_TIM2_Init+0xb0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM2_Init+0xb0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c88:	4818      	ldr	r0, [pc, #96]	; (8000cec <MX_TIM2_Init+0xb0>)
 8000c8a:	f003 fa11 	bl	80040b0 <HAL_TIM_PWM_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000c94:	f000 f922 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4811      	ldr	r0, [pc, #68]	; (8000cec <MX_TIM2_Init+0xb0>)
 8000ca8:	f003 fede 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000cb2:	f000 f913 	bl	8000edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb6:	2360      	movs	r3, #96	; 0x60
 8000cb8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9825;
 8000cba:	f242 6361 	movw	r3, #9825	; 0x2661
 8000cbe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2208      	movs	r2, #8
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4807      	ldr	r0, [pc, #28]	; (8000cec <MX_TIM2_Init+0xb0>)
 8000cd0:	f003 fa46 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000cda:	f000 f8ff 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cde:	4803      	ldr	r0, [pc, #12]	; (8000cec <MX_TIM2_Init+0xb0>)
 8000ce0:	f000 f93c 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	; 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2400002c 	.word	0x2400002c

08000cf0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
 8000d04:	615a      	str	r2, [r3, #20]
 8000d06:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000d08:	4b28      	ldr	r3, [pc, #160]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d0a:	4a29      	ldr	r2, [pc, #164]	; (8000db0 <MX_FMC_Init+0xc0>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d10:	4a28      	ldr	r2, [pc, #160]	; (8000db4 <MX_FMC_Init+0xc4>)
 8000d12:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000d1a:	4b24      	ldr	r3, [pc, #144]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d28:	2210      	movs	r2, #16
 8000d2a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d66:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000d76:	230f      	movs	r3, #15
 8000d78:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d82:	2310      	movs	r3, #16
 8000d84:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000d86:	2311      	movs	r3, #17
 8000d88:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_FMC_Init+0xbc>)
 8000d96:	f003 f93b 	bl	8004010 <HAL_SRAM_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8000da0:	f000 f89c 	bl	8000edc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000da4:	bf00      	nop
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	24000078 	.word	0x24000078
 8000db0:	52004000 	.word	0x52004000
 8000db4:	52004104 	.word	0x52004104

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dce:	4b3f      	ldr	r3, [pc, #252]	; (8000ecc <MX_GPIO_Init+0x114>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd4:	4a3d      	ldr	r2, [pc, #244]	; (8000ecc <MX_GPIO_Init+0x114>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dde:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <MX_GPIO_Init+0x114>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	f003 0310 	and.w	r3, r3, #16
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dec:	4b37      	ldr	r3, [pc, #220]	; (8000ecc <MX_GPIO_Init+0x114>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df2:	4a36      	ldr	r2, [pc, #216]	; (8000ecc <MX_GPIO_Init+0x114>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfc:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <MX_GPIO_Init+0x114>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0a:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <MX_GPIO_Init+0x114>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e10:	4a2e      	ldr	r2, [pc, #184]	; (8000ecc <MX_GPIO_Init+0x114>)
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <MX_GPIO_Init+0x114>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <MX_GPIO_Init+0x114>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	4a27      	ldr	r2, [pc, #156]	; (8000ecc <MX_GPIO_Init+0x114>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <MX_GPIO_Init+0x114>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R16529_RESET_Pin|R16529_CS_Pin, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000e4c:	4820      	ldr	r0, [pc, #128]	; (8000ed0 <MX_GPIO_Init+0x118>)
 8000e4e:	f000 fd93 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R16529_DC_GPIO_Port, R16529_DC_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e58:	481e      	ldr	r0, [pc, #120]	; (8000ed4 <MX_GPIO_Init+0x11c>)
 8000e5a:	f000 fd8d 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R16529_WR_GPIO_Port, R16529_WR_Pin, GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e64:	481c      	ldr	r0, [pc, #112]	; (8000ed8 <MX_GPIO_Init+0x120>)
 8000e66:	f000 fd87 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R16529_RESET_Pin R16529_CS_Pin */
  GPIO_InitStruct.Pin = R16529_RESET_Pin|R16529_CS_Pin;
 8000e6a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4813      	ldr	r0, [pc, #76]	; (8000ed0 <MX_GPIO_Init+0x118>)
 8000e84:	f000 fbc8 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : R16529_DC_Pin */
  GPIO_InitStruct.Pin = R16529_DC_Pin;
 8000e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R16529_DC_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <MX_GPIO_Init+0x11c>)
 8000ea2:	f000 fbb9 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : R16529_WR_Pin */
  GPIO_InitStruct.Pin = R16529_WR_Pin;
 8000ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R16529_WR_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <MX_GPIO_Init+0x120>)
 8000ec0:	f000 fbaa 	bl	8001618 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	58024400 	.word	0x58024400
 8000ed0:	58020400 	.word	0x58020400
 8000ed4:	58020c00 	.word	0x58020c00
 8000ed8:	58020800 	.word	0x58020800

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_MspInit+0x30>)
 8000ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ef4:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_MspInit+0x30>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_MspInit+0x30>)
 8000f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	58024400 	.word	0x58024400

08000f1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f2c:	d10e      	bne.n	8000f4c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f34:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	58024400 	.word	0x58024400

08000f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f7c:	d11f      	bne.n	8000fbe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_TIM_MspPostInit+0x6c>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <HAL_TIM_MspPostInit+0x6c>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_TIM_MspPostInit+0x6c>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <HAL_TIM_MspPostInit+0x70>)
 8000fba:	f000 fb2d 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3720      	adds	r7, #32
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	58020400 	.word	0x58020400

08000fd0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0b8      	sub	sp, #224	; 0xe0
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000fd6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000fe6:	4b41      	ldr	r3, [pc, #260]	; (80010ec <HAL_FMC_MspInit+0x11c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d17a      	bne.n	80010e4 <HAL_FMC_MspInit+0x114>
    return;
  }
  FMC_Initialized = 1;
 8000fee:	4b3f      	ldr	r3, [pc, #252]	; (80010ec <HAL_FMC_MspInit+0x11c>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	22c0      	movs	r2, #192	; 0xc0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f003 fed9 	bl	8004db4 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001002:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001006:	f04f 0300 	mov.w	r3, #0
 800100a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 800100e:	2320      	movs	r3, #32
 8001010:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 133;
 8001012:	2385      	movs	r3, #133	; 0x85
 8001014:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800101a:	2302      	movs	r3, #2
 800101c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800101e:	2302      	movs	r3, #2
 8001020:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001022:	2340      	movs	r3, #64	; 0x40
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 800102a:	2302      	movs	r3, #2
 800102c:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	4618      	mov	r0, r3
 8001034:	f001 fc7e 	bl	8002934 <HAL_RCCEx_PeriphCLKConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_FMC_MspInit+0x72>
    {
      Error_Handler();
 800103e:	f7ff ff4d 	bl	8000edc <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <HAL_FMC_MspInit+0x120>)
 8001044:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001048:	4a29      	ldr	r2, [pc, #164]	; (80010f0 <HAL_FMC_MspInit+0x120>)
 800104a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800104e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001052:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <HAL_FMC_MspInit+0x120>)
 8001054:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001060:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001064:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800107a:	230c      	movs	r3, #12
 800107c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001080:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001084:	4619      	mov	r1, r3
 8001086:	481b      	ldr	r0, [pc, #108]	; (80010f4 <HAL_FMC_MspInit+0x124>)
 8001088:	f000 fac6 	bl	8001618 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800108c:	f64c 7333 	movw	r3, #53043	; 0xcf33
 8001090:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a6:	230c      	movs	r3, #12
 80010a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010b0:	4619      	mov	r1, r3
 80010b2:	4811      	ldr	r0, [pc, #68]	; (80010f8 <HAL_FMC_MspInit+0x128>)
 80010b4:	f000 fab0 	bl	8001618 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80010d0:	2309      	movs	r3, #9
 80010d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010da:	4619      	mov	r1, r3
 80010dc:	4807      	ldr	r0, [pc, #28]	; (80010fc <HAL_FMC_MspInit+0x12c>)
 80010de:	f000 fa9b 	bl	8001618 <HAL_GPIO_Init>
 80010e2:	e000      	b.n	80010e6 <HAL_FMC_MspInit+0x116>
    return;
 80010e4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80010e6:	37e0      	adds	r7, #224	; 0xe0
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	240000c4 	.word	0x240000c4
 80010f0:	58024400 	.word	0x58024400
 80010f4:	58021000 	.word	0x58021000
 80010f8:	58020c00 	.word	0x58020c00
 80010fc:	58020800 	.word	0x58020800

08001100 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001108:	f7ff ff62 	bl	8000fd0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001160:	f000 f926 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800116c:	4b37      	ldr	r3, [pc, #220]	; (800124c <SystemInit+0xe4>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001172:	4a36      	ldr	r2, [pc, #216]	; (800124c <SystemInit+0xe4>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800117c:	4b34      	ldr	r3, [pc, #208]	; (8001250 <SystemInit+0xe8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 030f 	and.w	r3, r3, #15
 8001184:	2b06      	cmp	r3, #6
 8001186:	d807      	bhi.n	8001198 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001188:	4b31      	ldr	r3, [pc, #196]	; (8001250 <SystemInit+0xe8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 030f 	bic.w	r3, r3, #15
 8001190:	4a2f      	ldr	r2, [pc, #188]	; (8001250 <SystemInit+0xe8>)
 8001192:	f043 0307 	orr.w	r3, r3, #7
 8001196:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <SystemInit+0xec>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a2d      	ldr	r2, [pc, #180]	; (8001254 <SystemInit+0xec>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <SystemInit+0xec>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011aa:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <SystemInit+0xec>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4929      	ldr	r1, [pc, #164]	; (8001254 <SystemInit+0xec>)
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <SystemInit+0xf0>)
 80011b2:	4013      	ands	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <SystemInit+0xe8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011c2:	4b23      	ldr	r3, [pc, #140]	; (8001250 <SystemInit+0xe8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 030f 	bic.w	r3, r3, #15
 80011ca:	4a21      	ldr	r2, [pc, #132]	; (8001250 <SystemInit+0xe8>)
 80011cc:	f043 0307 	orr.w	r3, r3, #7
 80011d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <SystemInit+0xec>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011d8:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <SystemInit+0xec>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <SystemInit+0xec>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <SystemInit+0xec>)
 80011e6:	4a1d      	ldr	r2, [pc, #116]	; (800125c <SystemInit+0xf4>)
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <SystemInit+0xec>)
 80011ec:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <SystemInit+0xf8>)
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <SystemInit+0xec>)
 80011f2:	4a1c      	ldr	r2, [pc, #112]	; (8001264 <SystemInit+0xfc>)
 80011f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <SystemInit+0xec>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <SystemInit+0xec>)
 80011fe:	4a19      	ldr	r2, [pc, #100]	; (8001264 <SystemInit+0xfc>)
 8001200:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <SystemInit+0xec>)
 8001204:	2200      	movs	r2, #0
 8001206:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <SystemInit+0xec>)
 800120a:	4a16      	ldr	r2, [pc, #88]	; (8001264 <SystemInit+0xfc>)
 800120c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <SystemInit+0xec>)
 8001210:	2200      	movs	r2, #0
 8001212:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <SystemInit+0xec>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <SystemInit+0xec>)
 800121a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <SystemInit+0xec>)
 8001222:	2200      	movs	r2, #0
 8001224:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <SystemInit+0x100>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <SystemInit+0x104>)
 800122c:	4013      	ands	r3, r2
 800122e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001232:	d202      	bcs.n	800123a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <SystemInit+0x108>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <SystemInit+0x10c>)
 800123c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001240:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00
 8001250:	52002000 	.word	0x52002000
 8001254:	58024400 	.word	0x58024400
 8001258:	eaf6ed7f 	.word	0xeaf6ed7f
 800125c:	02020200 	.word	0x02020200
 8001260:	01ff0000 	.word	0x01ff0000
 8001264:	01010280 	.word	0x01010280
 8001268:	5c001000 	.word	0x5c001000
 800126c:	ffff0000 	.word	0xffff0000
 8001270:	51008108 	.word	0x51008108
 8001274:	52004000 	.word	0x52004000

08001278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800127c:	f7ff ff74 	bl	8001168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001282:	490d      	ldr	r1, [pc, #52]	; (80012b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001298:	4c0a      	ldr	r4, [pc, #40]	; (80012c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a6:	f003 fd8d 	bl	8004dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012aa:	f7ff fc2d 	bl	8000b08 <main>
  bx  lr
 80012ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012b8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80012bc:	08004e3c 	.word	0x08004e3c
  ldr r2, =_sbss
 80012c0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80012c4:	240000cc 	.word	0x240000cc

080012c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC3_IRQHandler>
	...

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d2:	2003      	movs	r0, #3
 80012d4:	f000 f96e 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012d8:	f001 f9b2 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80012dc:	4602      	mov	r2, r0
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_Init+0x68>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	0a1b      	lsrs	r3, r3, #8
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	4913      	ldr	r1, [pc, #76]	; (8001338 <HAL_Init+0x6c>)
 80012ea:	5ccb      	ldrb	r3, [r1, r3]
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	fa22 f303 	lsr.w	r3, r2, r3
 80012f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_Init+0x68>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <HAL_Init+0x6c>)
 8001300:	5cd3      	ldrb	r3, [r2, r3]
 8001302:	f003 031f 	and.w	r3, r3, #31
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	fa22 f303 	lsr.w	r3, r2, r3
 800130c:	4a0b      	ldr	r2, [pc, #44]	; (800133c <HAL_Init+0x70>)
 800130e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <HAL_Init+0x74>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001316:	200f      	movs	r0, #15
 8001318:	f000 f814 	bl	8001344 <HAL_InitTick>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e002      	b.n	800132c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001326:	f7ff fddf 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	58024400 	.word	0x58024400
 8001338:	08004e24 	.word	0x08004e24
 800133c:	24000004 	.word	0x24000004
 8001340:	24000000 	.word	0x24000000

08001344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_InitTick+0x60>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e021      	b.n	800139c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_InitTick+0x64>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_InitTick+0x60>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	fbb3 f3f1 	udiv	r3, r3, r1
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f945 	bl	80015fe <HAL_SYSTICK_Config>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e00e      	b.n	800139c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d80a      	bhi.n	800139a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001384:	2200      	movs	r2, #0
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f000 f91d 	bl	80015ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001390:	4a06      	ldr	r2, [pc, #24]	; (80013ac <HAL_InitTick+0x68>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2400000c 	.word	0x2400000c
 80013a8:	24000000 	.word	0x24000000
 80013ac:	24000008 	.word	0x24000008

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	2400000c 	.word	0x2400000c
 80013d4:	240000c8 	.word	0x240000c8

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	240000c8 	.word	0x240000c8

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff ffee 	bl	80013d8 <HAL_GetTick>
 80013fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001408:	d005      	beq.n	8001416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_Delay+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001416:	bf00      	nop
 8001418:	f7ff ffde 	bl	80013d8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8f7      	bhi.n	8001418 <HAL_Delay+0x28>
  {
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2400000c 	.word	0x2400000c

08001438 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <HAL_GetREVID+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	0c1b      	lsrs	r3, r3, #16
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	5c001000 	.word	0x5c001000

08001450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <__NVIC_SetPriorityGrouping+0x40>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800146c:	4013      	ands	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	4313      	orrs	r3, r2
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <__NVIC_SetPriorityGrouping+0x40>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00
 8001494:	05fa0000 	.word	0x05fa0000

08001498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <__NVIC_GetPriorityGrouping+0x18>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	f003 0307 	and.w	r3, r3, #7
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f7ff ff8e 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff47 	bl	8001450 <__NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015d8:	f7ff ff5e 	bl	8001498 <__NVIC_GetPriorityGrouping>
 80015dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f7ff ff90 	bl	8001508 <NVIC_EncodePriority>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff5f 	bl	80014b4 <__NVIC_SetPriority>
}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffb2 	bl	8001570 <SysTick_Config>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001626:	4b89      	ldr	r3, [pc, #548]	; (800184c <HAL_GPIO_Init+0x234>)
 8001628:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800162a:	e194      	b.n	8001956 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2101      	movs	r1, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8186 	beq.w	8001950 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b01      	cmp	r3, #1
 800164e:	d005      	beq.n	800165c <HAL_GPIO_Init+0x44>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d130      	bne.n	80016be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001692:	2201      	movs	r2, #1
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	f003 0201 	and.w	r2, r3, #1
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d017      	beq.n	80016fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d123      	bne.n	800174e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	08da      	lsrs	r2, r3, #3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3208      	adds	r2, #8
 800170e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	220f      	movs	r2, #15
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	691a      	ldr	r2, [r3, #16]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	08da      	lsrs	r2, r3, #3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3208      	adds	r2, #8
 8001748:	69b9      	ldr	r1, [r7, #24]
 800174a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0203 	and.w	r2, r3, #3
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 80e0 	beq.w	8001950 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001790:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <HAL_GPIO_Init+0x238>)
 8001792:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001796:	4a2e      	ldr	r2, [pc, #184]	; (8001850 <HAL_GPIO_Init+0x238>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_GPIO_Init+0x238>)
 80017a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ae:	4a29      	ldr	r2, [pc, #164]	; (8001854 <HAL_GPIO_Init+0x23c>)
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	3302      	adds	r3, #2
 80017b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	220f      	movs	r2, #15
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a20      	ldr	r2, [pc, #128]	; (8001858 <HAL_GPIO_Init+0x240>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d052      	beq.n	8001880 <HAL_GPIO_Init+0x268>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a1f      	ldr	r2, [pc, #124]	; (800185c <HAL_GPIO_Init+0x244>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d031      	beq.n	8001846 <HAL_GPIO_Init+0x22e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <HAL_GPIO_Init+0x248>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d02b      	beq.n	8001842 <HAL_GPIO_Init+0x22a>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <HAL_GPIO_Init+0x24c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d025      	beq.n	800183e <HAL_GPIO_Init+0x226>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_GPIO_Init+0x250>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d01f      	beq.n	800183a <HAL_GPIO_Init+0x222>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a1b      	ldr	r2, [pc, #108]	; (800186c <HAL_GPIO_Init+0x254>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d019      	beq.n	8001836 <HAL_GPIO_Init+0x21e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a1a      	ldr	r2, [pc, #104]	; (8001870 <HAL_GPIO_Init+0x258>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d013      	beq.n	8001832 <HAL_GPIO_Init+0x21a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a19      	ldr	r2, [pc, #100]	; (8001874 <HAL_GPIO_Init+0x25c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d00d      	beq.n	800182e <HAL_GPIO_Init+0x216>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a18      	ldr	r2, [pc, #96]	; (8001878 <HAL_GPIO_Init+0x260>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d007      	beq.n	800182a <HAL_GPIO_Init+0x212>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a17      	ldr	r2, [pc, #92]	; (800187c <HAL_GPIO_Init+0x264>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_GPIO_Init+0x20e>
 8001822:	2309      	movs	r3, #9
 8001824:	e02d      	b.n	8001882 <HAL_GPIO_Init+0x26a>
 8001826:	230a      	movs	r3, #10
 8001828:	e02b      	b.n	8001882 <HAL_GPIO_Init+0x26a>
 800182a:	2308      	movs	r3, #8
 800182c:	e029      	b.n	8001882 <HAL_GPIO_Init+0x26a>
 800182e:	2307      	movs	r3, #7
 8001830:	e027      	b.n	8001882 <HAL_GPIO_Init+0x26a>
 8001832:	2306      	movs	r3, #6
 8001834:	e025      	b.n	8001882 <HAL_GPIO_Init+0x26a>
 8001836:	2305      	movs	r3, #5
 8001838:	e023      	b.n	8001882 <HAL_GPIO_Init+0x26a>
 800183a:	2304      	movs	r3, #4
 800183c:	e021      	b.n	8001882 <HAL_GPIO_Init+0x26a>
 800183e:	2303      	movs	r3, #3
 8001840:	e01f      	b.n	8001882 <HAL_GPIO_Init+0x26a>
 8001842:	2302      	movs	r3, #2
 8001844:	e01d      	b.n	8001882 <HAL_GPIO_Init+0x26a>
 8001846:	2301      	movs	r3, #1
 8001848:	e01b      	b.n	8001882 <HAL_GPIO_Init+0x26a>
 800184a:	bf00      	nop
 800184c:	58000080 	.word	0x58000080
 8001850:	58024400 	.word	0x58024400
 8001854:	58000400 	.word	0x58000400
 8001858:	58020000 	.word	0x58020000
 800185c:	58020400 	.word	0x58020400
 8001860:	58020800 	.word	0x58020800
 8001864:	58020c00 	.word	0x58020c00
 8001868:	58021000 	.word	0x58021000
 800186c:	58021400 	.word	0x58021400
 8001870:	58021800 	.word	0x58021800
 8001874:	58021c00 	.word	0x58021c00
 8001878:	58022000 	.word	0x58022000
 800187c:	58022400 	.word	0x58022400
 8001880:	2300      	movs	r3, #0
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	f002 0203 	and.w	r2, r2, #3
 8001888:	0092      	lsls	r2, r2, #2
 800188a:	4093      	lsls	r3, r2
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001892:	4938      	ldr	r1, [pc, #224]	; (8001974 <HAL_GPIO_Init+0x35c>)
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	089b      	lsrs	r3, r3, #2
 8001898:	3302      	adds	r3, #2
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	3301      	adds	r3, #1
 8001954:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	f47f ae63 	bne.w	800162c <HAL_GPIO_Init+0x14>
  }
}
 8001966:	bf00      	nop
 8001968:	bf00      	nop
 800196a:	3724      	adds	r7, #36	; 0x24
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	58000400 	.word	0x58000400

08001978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
 8001984:	4613      	mov	r3, r2
 8001986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001988:	787b      	ldrb	r3, [r7, #1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001994:	e003      	b.n	800199e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001996:	887b      	ldrh	r3, [r7, #2]
 8001998:	041a      	lsls	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	619a      	str	r2, [r3, #24]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_PWREx_ConfigSupply+0x70>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d00a      	beq.n	80019d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_PWREx_ConfigSupply+0x70>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d001      	beq.n	80019d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e01f      	b.n	8001a12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e01d      	b.n	8001a12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_PWREx_ConfigSupply+0x70>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f023 0207 	bic.w	r2, r3, #7
 80019de:	490f      	ldr	r1, [pc, #60]	; (8001a1c <HAL_PWREx_ConfigSupply+0x70>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019e6:	f7ff fcf7 	bl	80013d8 <HAL_GetTick>
 80019ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019ec:	e009      	b.n	8001a02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019ee:	f7ff fcf3 	bl	80013d8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019fc:	d901      	bls.n	8001a02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e007      	b.n	8001a12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_PWREx_ConfigSupply+0x70>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a0e:	d1ee      	bne.n	80019ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	58024800 	.word	0x58024800

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	; 0x30
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d102      	bne.n	8001a34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f000 bc48 	b.w	80022c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8088 	beq.w	8001b52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a42:	4b99      	ldr	r3, [pc, #612]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a4c:	4b96      	ldr	r3, [pc, #600]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	2b10      	cmp	r3, #16
 8001a56:	d007      	beq.n	8001a68 <HAL_RCC_OscConfig+0x48>
 8001a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5a:	2b18      	cmp	r3, #24
 8001a5c:	d111      	bne.n	8001a82 <HAL_RCC_OscConfig+0x62>
 8001a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d10c      	bne.n	8001a82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	4b8f      	ldr	r3, [pc, #572]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d06d      	beq.n	8001b50 <HAL_RCC_OscConfig+0x130>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d169      	bne.n	8001b50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f000 bc21 	b.w	80022c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x7a>
 8001a8c:	4b86      	ldr	r3, [pc, #536]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a85      	ldr	r2, [pc, #532]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	e02e      	b.n	8001af8 <HAL_RCC_OscConfig+0xd8>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0x9c>
 8001aa2:	4b81      	ldr	r3, [pc, #516]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a80      	ldr	r2, [pc, #512]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	4b7e      	ldr	r3, [pc, #504]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a7d      	ldr	r2, [pc, #500]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e01d      	b.n	8001af8 <HAL_RCC_OscConfig+0xd8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0xc0>
 8001ac6:	4b78      	ldr	r3, [pc, #480]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a77      	ldr	r2, [pc, #476]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b75      	ldr	r3, [pc, #468]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a74      	ldr	r2, [pc, #464]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e00b      	b.n	8001af8 <HAL_RCC_OscConfig+0xd8>
 8001ae0:	4b71      	ldr	r3, [pc, #452]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a70      	ldr	r2, [pc, #448]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b6e      	ldr	r3, [pc, #440]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a6d      	ldr	r2, [pc, #436]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d013      	beq.n	8001b28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff fc6a 	bl	80013d8 <HAL_GetTick>
 8001b04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff fc66 	bl	80013d8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e3d4      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0xe8>
 8001b26:	e014      	b.n	8001b52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff fc56 	bl	80013d8 <HAL_GetTick>
 8001b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff fc52 	bl	80013d8 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	; 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e3c0      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b42:	4b59      	ldr	r3, [pc, #356]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x110>
 8001b4e:	e000      	b.n	8001b52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 80ca 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b60:	4b51      	ldr	r3, [pc, #324]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b6a:	4b4f      	ldr	r3, [pc, #316]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <HAL_RCC_OscConfig+0x166>
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	2b18      	cmp	r3, #24
 8001b7a:	d156      	bne.n	8001c2a <HAL_RCC_OscConfig+0x20a>
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d151      	bne.n	8001c2a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b86:	4b48      	ldr	r3, [pc, #288]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_RCC_OscConfig+0x17e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e392      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b9e:	4b42      	ldr	r3, [pc, #264]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 0219 	bic.w	r2, r3, #25
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	493f      	ldr	r1, [pc, #252]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fc12 	bl	80013d8 <HAL_GetTick>
 8001bb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb8:	f7ff fc0e 	bl	80013d8 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e37c      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bca:	4b37      	ldr	r3, [pc, #220]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	f7ff fc2f 	bl	8001438 <HAL_GetREVID>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d817      	bhi.n	8001c14 <HAL_RCC_OscConfig+0x1f4>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b40      	cmp	r3, #64	; 0x40
 8001bea:	d108      	bne.n	8001bfe <HAL_RCC_OscConfig+0x1de>
 8001bec:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001bf4:	4a2c      	ldr	r2, [pc, #176]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bfc:	e07a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	031b      	lsls	r3, r3, #12
 8001c0c:	4926      	ldr	r1, [pc, #152]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c12:	e06f      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	061b      	lsls	r3, r3, #24
 8001c22:	4921      	ldr	r1, [pc, #132]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c28:	e064      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d047      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c32:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 0219 	bic.w	r2, r3, #25
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	491a      	ldr	r1, [pc, #104]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff fbc8 	bl	80013d8 <HAL_GetTick>
 8001c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fbc4 	bl	80013d8 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e332      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6a:	f7ff fbe5 	bl	8001438 <HAL_GetREVID>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d819      	bhi.n	8001cac <HAL_RCC_OscConfig+0x28c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	2b40      	cmp	r3, #64	; 0x40
 8001c7e:	d108      	bne.n	8001c92 <HAL_RCC_OscConfig+0x272>
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c88:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8e:	6053      	str	r3, [r2, #4]
 8001c90:	e030      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	031b      	lsls	r3, r3, #12
 8001ca0:	4901      	ldr	r1, [pc, #4]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	604b      	str	r3, [r1, #4]
 8001ca6:	e025      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
 8001ca8:	58024400 	.word	0x58024400
 8001cac:	4b9a      	ldr	r3, [pc, #616]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	061b      	lsls	r3, r3, #24
 8001cba:	4997      	ldr	r1, [pc, #604]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
 8001cc0:	e018      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc2:	4b95      	ldr	r3, [pc, #596]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a94      	ldr	r2, [pc, #592]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7ff fb83 	bl	80013d8 <HAL_GetTick>
 8001cd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7ff fb7f 	bl	80013d8 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e2ed      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ce8:	4b8b      	ldr	r3, [pc, #556]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80a9 	beq.w	8001e54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d02:	4b85      	ldr	r3, [pc, #532]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d0c:	4b82      	ldr	r3, [pc, #520]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d007      	beq.n	8001d28 <HAL_RCC_OscConfig+0x308>
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b18      	cmp	r3, #24
 8001d1c:	d13a      	bne.n	8001d94 <HAL_RCC_OscConfig+0x374>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d135      	bne.n	8001d94 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d28:	4b7b      	ldr	r3, [pc, #492]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_OscConfig+0x320>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	2b80      	cmp	r3, #128	; 0x80
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e2c1      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d40:	f7ff fb7a 	bl	8001438 <HAL_GetREVID>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d817      	bhi.n	8001d7e <HAL_RCC_OscConfig+0x35e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	d108      	bne.n	8001d68 <HAL_RCC_OscConfig+0x348>
 8001d56:	4b70      	ldr	r3, [pc, #448]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d5e:	4a6e      	ldr	r2, [pc, #440]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d64:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d66:	e075      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d68:	4b6b      	ldr	r3, [pc, #428]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	069b      	lsls	r3, r3, #26
 8001d76:	4968      	ldr	r1, [pc, #416]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d7c:	e06a      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d7e:	4b66      	ldr	r3, [pc, #408]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	061b      	lsls	r3, r3, #24
 8001d8c:	4962      	ldr	r1, [pc, #392]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d92:	e05f      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d042      	beq.n	8001e22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d9c:	4b5e      	ldr	r3, [pc, #376]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a5d      	ldr	r2, [pc, #372]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff fb16 	bl	80013d8 <HAL_GetTick>
 8001dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001db0:	f7ff fb12 	bl	80013d8 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e280      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dc2:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dce:	f7ff fb33 	bl	8001438 <HAL_GetREVID>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d817      	bhi.n	8001e0c <HAL_RCC_OscConfig+0x3ec>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d108      	bne.n	8001df6 <HAL_RCC_OscConfig+0x3d6>
 8001de4:	4b4c      	ldr	r3, [pc, #304]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001dec:	4a4a      	ldr	r2, [pc, #296]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001dee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001df2:	6053      	str	r3, [r2, #4]
 8001df4:	e02e      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
 8001df6:	4b48      	ldr	r3, [pc, #288]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	069b      	lsls	r3, r3, #26
 8001e04:	4944      	ldr	r1, [pc, #272]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
 8001e0a:	e023      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
 8001e0c:	4b42      	ldr	r3, [pc, #264]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	493f      	ldr	r1, [pc, #252]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60cb      	str	r3, [r1, #12]
 8001e20:	e018      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e22:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a3c      	ldr	r2, [pc, #240]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fad3 	bl	80013d8 <HAL_GetTick>
 8001e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e36:	f7ff facf 	bl	80013d8 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e23d      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e48:	4b33      	ldr	r3, [pc, #204]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d036      	beq.n	8001ece <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d019      	beq.n	8001e9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e68:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6c:	4a2a      	ldr	r2, [pc, #168]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7ff fab0 	bl	80013d8 <HAL_GetTick>
 8001e78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7ff faac 	bl	80013d8 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e21a      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x45c>
 8001e9a:	e018      	b.n	8001ece <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fa96 	bl	80013d8 <HAL_GetTick>
 8001eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fa92 	bl	80013d8 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e200      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d039      	beq.n	8001f4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01c      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001eee:	f7ff fa73 	bl	80013d8 <HAL_GetTick>
 8001ef2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ef6:	f7ff fa6f 	bl	80013d8 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1dd      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x4d6>
 8001f14:	e01b      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
 8001f16:	bf00      	nop
 8001f18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f1c:	4b9b      	ldr	r3, [pc, #620]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a9a      	ldr	r2, [pc, #616]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001f22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f28:	f7ff fa56 	bl	80013d8 <HAL_GetTick>
 8001f2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f30:	f7ff fa52 	bl	80013d8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e1c0      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f42:	4b92      	ldr	r3, [pc, #584]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8081 	beq.w	800205e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f5c:	4b8c      	ldr	r3, [pc, #560]	; (8002190 <HAL_RCC_OscConfig+0x770>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a8b      	ldr	r2, [pc, #556]	; (8002190 <HAL_RCC_OscConfig+0x770>)
 8001f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f68:	f7ff fa36 	bl	80013d8 <HAL_GetTick>
 8001f6c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f70:	f7ff fa32 	bl	80013d8 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1a0      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f82:	4b83      	ldr	r3, [pc, #524]	; (8002190 <HAL_RCC_OscConfig+0x770>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d106      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x584>
 8001f96:	4b7d      	ldr	r3, [pc, #500]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	4a7c      	ldr	r2, [pc, #496]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa2:	e02d      	b.n	8002000 <HAL_RCC_OscConfig+0x5e0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10c      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5a6>
 8001fac:	4b77      	ldr	r3, [pc, #476]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	4a76      	ldr	r2, [pc, #472]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb8:	4b74      	ldr	r3, [pc, #464]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbc:	4a73      	ldr	r2, [pc, #460]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fbe:	f023 0304 	bic.w	r3, r3, #4
 8001fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc4:	e01c      	b.n	8002000 <HAL_RCC_OscConfig+0x5e0>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5c8>
 8001fce:	4b6f      	ldr	r3, [pc, #444]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	4a6e      	ldr	r2, [pc, #440]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fda:	4b6c      	ldr	r3, [pc, #432]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	4a6b      	ldr	r2, [pc, #428]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0x5e0>
 8001fe8:	4b68      	ldr	r3, [pc, #416]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	4a67      	ldr	r2, [pc, #412]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fee:	f023 0301 	bic.w	r3, r3, #1
 8001ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff4:	4b65      	ldr	r3, [pc, #404]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	4a64      	ldr	r2, [pc, #400]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001ffa:	f023 0304 	bic.w	r3, r3, #4
 8001ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d015      	beq.n	8002034 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7ff f9e6 	bl	80013d8 <HAL_GetTick>
 800200c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800200e:	e00a      	b.n	8002026 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002010:	f7ff f9e2 	bl	80013d8 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e14e      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002026:	4b59      	ldr	r3, [pc, #356]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0ee      	beq.n	8002010 <HAL_RCC_OscConfig+0x5f0>
 8002032:	e014      	b.n	800205e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7ff f9d0 	bl	80013d8 <HAL_GetTick>
 8002038:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800203a:	e00a      	b.n	8002052 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7ff f9cc 	bl	80013d8 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e138      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002052:	4b4e      	ldr	r3, [pc, #312]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1ee      	bne.n	800203c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 812d 	beq.w	80022c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002068:	4b48      	ldr	r3, [pc, #288]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002070:	2b18      	cmp	r3, #24
 8002072:	f000 80bd 	beq.w	80021f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2b02      	cmp	r3, #2
 800207c:	f040 809e 	bne.w	80021bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002080:	4b42      	ldr	r3, [pc, #264]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a41      	ldr	r2, [pc, #260]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800208a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7ff f9a4 	bl	80013d8 <HAL_GetTick>
 8002090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff f9a0 	bl	80013d8 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e10e      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020a6:	4b39      	ldr	r3, [pc, #228]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 80020b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020b6:	4b37      	ldr	r3, [pc, #220]	; (8002194 <HAL_RCC_OscConfig+0x774>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020c2:	0112      	lsls	r2, r2, #4
 80020c4:	430a      	orrs	r2, r1
 80020c6:	4931      	ldr	r1, [pc, #196]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	628b      	str	r3, [r1, #40]	; 0x28
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	3b01      	subs	r3, #1
 80020d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020da:	3b01      	subs	r3, #1
 80020dc:	025b      	lsls	r3, r3, #9
 80020de:	b29b      	uxth	r3, r3
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	3b01      	subs	r3, #1
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	3b01      	subs	r3, #1
 80020f6:	061b      	lsls	r3, r3, #24
 80020f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80020fc:	4923      	ldr	r1, [pc, #140]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	4a21      	ldr	r2, [pc, #132]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800210e:	4b1f      	ldr	r3, [pc, #124]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8002114:	4013      	ands	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800211a:	00d2      	lsls	r2, r2, #3
 800211c:	491b      	ldr	r1, [pc, #108]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 800211e:	4313      	orrs	r3, r2
 8002120:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	f023 020c 	bic.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4917      	ldr	r1, [pc, #92]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002130:	4313      	orrs	r3, r2
 8002132:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	f023 0202 	bic.w	r2, r3, #2
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	4912      	ldr	r1, [pc, #72]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002142:	4313      	orrs	r3, r2
 8002144:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	4a10      	ldr	r2, [pc, #64]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	4a0d      	ldr	r2, [pc, #52]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	4a07      	ldr	r2, [pc, #28]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a04      	ldr	r2, [pc, #16]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 800217c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7ff f929 	bl	80013d8 <HAL_GetTick>
 8002186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002188:	e011      	b.n	80021ae <HAL_RCC_OscConfig+0x78e>
 800218a:	bf00      	nop
 800218c:	58024400 	.word	0x58024400
 8002190:	58024800 	.word	0x58024800
 8002194:	fffffc0c 	.word	0xfffffc0c
 8002198:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff f91c 	bl	80013d8 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e08a      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_OscConfig+0x8ac>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x77c>
 80021ba:	e082      	b.n	80022c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021bc:	4b43      	ldr	r3, [pc, #268]	; (80022cc <HAL_RCC_OscConfig+0x8ac>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a42      	ldr	r2, [pc, #264]	; (80022cc <HAL_RCC_OscConfig+0x8ac>)
 80021c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7ff f906 	bl	80013d8 <HAL_GetTick>
 80021cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d0:	f7ff f902 	bl	80013d8 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e070      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021e2:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <HAL_RCC_OscConfig+0x8ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x7b0>
 80021ee:	e068      	b.n	80022c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021f0:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x8ac>)
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021f6:	4b35      	ldr	r3, [pc, #212]	; (80022cc <HAL_RCC_OscConfig+0x8ac>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	2b01      	cmp	r3, #1
 8002202:	d031      	beq.n	8002268 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f003 0203 	and.w	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d12a      	bne.n	8002268 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d122      	bne.n	8002268 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d11a      	bne.n	8002268 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	0a5b      	lsrs	r3, r3, #9
 8002236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d111      	bne.n	8002268 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	0c1b      	lsrs	r3, r3, #16
 8002248:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d108      	bne.n	8002268 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	0e1b      	lsrs	r3, r3, #24
 800225a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002262:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e02b      	b.n	80022c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800226c:	4b17      	ldr	r3, [pc, #92]	; (80022cc <HAL_RCC_OscConfig+0x8ac>)
 800226e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002270:	08db      	lsrs	r3, r3, #3
 8002272:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002276:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	429a      	cmp	r2, r3
 8002280:	d01f      	beq.n	80022c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_RCC_OscConfig+0x8ac>)
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	4a11      	ldr	r2, [pc, #68]	; (80022cc <HAL_RCC_OscConfig+0x8ac>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800228e:	f7ff f8a3 	bl	80013d8 <HAL_GetTick>
 8002292:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002294:	bf00      	nop
 8002296:	f7ff f89f 	bl	80013d8 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	4293      	cmp	r3, r2
 80022a0:	d0f9      	beq.n	8002296 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_RCC_OscConfig+0x8ac>)
 80022a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_RCC_OscConfig+0x8b0>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022ae:	00d2      	lsls	r2, r2, #3
 80022b0:	4906      	ldr	r1, [pc, #24]	; (80022cc <HAL_RCC_OscConfig+0x8ac>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_RCC_OscConfig+0x8ac>)
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	4a04      	ldr	r2, [pc, #16]	; (80022cc <HAL_RCC_OscConfig+0x8ac>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3730      	adds	r7, #48	; 0x30
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	58024400 	.word	0x58024400
 80022d0:	ffff0007 	.word	0xffff0007

080022d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e19c      	b.n	8002622 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b8a      	ldr	r3, [pc, #552]	; (8002514 <HAL_RCC_ClockConfig+0x240>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d910      	bls.n	8002318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b87      	ldr	r3, [pc, #540]	; (8002514 <HAL_RCC_ClockConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 020f 	bic.w	r2, r3, #15
 80022fe:	4985      	ldr	r1, [pc, #532]	; (8002514 <HAL_RCC_ClockConfig+0x240>)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b83      	ldr	r3, [pc, #524]	; (8002514 <HAL_RCC_ClockConfig+0x240>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e184      	b.n	8002622 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d010      	beq.n	8002346 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	4b7b      	ldr	r3, [pc, #492]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002330:	429a      	cmp	r2, r3
 8002332:	d908      	bls.n	8002346 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002334:	4b78      	ldr	r3, [pc, #480]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	4975      	ldr	r1, [pc, #468]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 8002342:	4313      	orrs	r3, r2
 8002344:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d010      	beq.n	8002374 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	4b70      	ldr	r3, [pc, #448]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800235e:	429a      	cmp	r2, r3
 8002360:	d908      	bls.n	8002374 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002362:	4b6d      	ldr	r3, [pc, #436]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	496a      	ldr	r1, [pc, #424]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 8002370:	4313      	orrs	r3, r2
 8002372:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	d010      	beq.n	80023a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699a      	ldr	r2, [r3, #24]
 8002384:	4b64      	ldr	r3, [pc, #400]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800238c:	429a      	cmp	r2, r3
 800238e:	d908      	bls.n	80023a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002390:	4b61      	ldr	r3, [pc, #388]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	495e      	ldr	r1, [pc, #376]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d010      	beq.n	80023d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69da      	ldr	r2, [r3, #28]
 80023b2:	4b59      	ldr	r3, [pc, #356]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d908      	bls.n	80023d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023be:	4b56      	ldr	r3, [pc, #344]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	4953      	ldr	r1, [pc, #332]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d010      	beq.n	80023fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	4b4d      	ldr	r3, [pc, #308]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d908      	bls.n	80023fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ec:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f023 020f 	bic.w	r2, r3, #15
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4947      	ldr	r1, [pc, #284]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d055      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800240a:	4b43      	ldr	r3, [pc, #268]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	4940      	ldr	r1, [pc, #256]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 8002418:	4313      	orrs	r3, r2
 800241a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d107      	bne.n	8002434 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002424:	4b3c      	ldr	r3, [pc, #240]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d121      	bne.n	8002474 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0f6      	b.n	8002622 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d107      	bne.n	800244c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800243c:	4b36      	ldr	r3, [pc, #216]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d115      	bne.n	8002474 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0ea      	b.n	8002622 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d107      	bne.n	8002464 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002454:	4b30      	ldr	r3, [pc, #192]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0de      	b.n	8002622 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002464:	4b2c      	ldr	r3, [pc, #176]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0d6      	b.n	8002622 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002474:	4b28      	ldr	r3, [pc, #160]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	f023 0207 	bic.w	r2, r3, #7
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4925      	ldr	r1, [pc, #148]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 8002482:	4313      	orrs	r3, r2
 8002484:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002486:	f7fe ffa7 	bl	80013d8 <HAL_GetTick>
 800248a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248c:	e00a      	b.n	80024a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248e:	f7fe ffa3 	bl	80013d8 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	f241 3288 	movw	r2, #5000	; 0x1388
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e0be      	b.n	8002622 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a4:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d1eb      	bne.n	800248e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d208      	bcs.n	80024e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f023 020f 	bic.w	r2, r3, #15
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	490e      	ldr	r1, [pc, #56]	; (8002518 <HAL_RCC_ClockConfig+0x244>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_ClockConfig+0x240>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d214      	bcs.n	800251c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <HAL_RCC_ClockConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 020f 	bic.w	r2, r3, #15
 80024fa:	4906      	ldr	r1, [pc, #24]	; (8002514 <HAL_RCC_ClockConfig+0x240>)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <HAL_RCC_ClockConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e086      	b.n	8002622 <HAL_RCC_ClockConfig+0x34e>
 8002514:	52002000 	.word	0x52002000
 8002518:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d010      	beq.n	800254a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	4b3f      	ldr	r3, [pc, #252]	; (800262c <HAL_RCC_ClockConfig+0x358>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002534:	429a      	cmp	r2, r3
 8002536:	d208      	bcs.n	800254a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002538:	4b3c      	ldr	r3, [pc, #240]	; (800262c <HAL_RCC_ClockConfig+0x358>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	4939      	ldr	r1, [pc, #228]	; (800262c <HAL_RCC_ClockConfig+0x358>)
 8002546:	4313      	orrs	r3, r2
 8002548:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d010      	beq.n	8002578 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	4b34      	ldr	r3, [pc, #208]	; (800262c <HAL_RCC_ClockConfig+0x358>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002562:	429a      	cmp	r2, r3
 8002564:	d208      	bcs.n	8002578 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002566:	4b31      	ldr	r3, [pc, #196]	; (800262c <HAL_RCC_ClockConfig+0x358>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	492e      	ldr	r1, [pc, #184]	; (800262c <HAL_RCC_ClockConfig+0x358>)
 8002574:	4313      	orrs	r3, r2
 8002576:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	d010      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	4b28      	ldr	r3, [pc, #160]	; (800262c <HAL_RCC_ClockConfig+0x358>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002590:	429a      	cmp	r2, r3
 8002592:	d208      	bcs.n	80025a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <HAL_RCC_ClockConfig+0x358>)
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4922      	ldr	r1, [pc, #136]	; (800262c <HAL_RCC_ClockConfig+0x358>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d010      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69da      	ldr	r2, [r3, #28]
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_RCC_ClockConfig+0x358>)
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025be:	429a      	cmp	r2, r3
 80025c0:	d208      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_RCC_ClockConfig+0x358>)
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4917      	ldr	r1, [pc, #92]	; (800262c <HAL_RCC_ClockConfig+0x358>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025d4:	f000 f834 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <HAL_RCC_ClockConfig+0x358>)
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	4912      	ldr	r1, [pc, #72]	; (8002630 <HAL_RCC_ClockConfig+0x35c>)
 80025e6:	5ccb      	ldrb	r3, [r1, r3]
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
 80025f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <HAL_RCC_ClockConfig+0x358>)
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <HAL_RCC_ClockConfig+0x35c>)
 80025fc:	5cd3      	ldrb	r3, [r2, r3]
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
 8002608:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <HAL_RCC_ClockConfig+0x360>)
 800260a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_RCC_ClockConfig+0x364>)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_RCC_ClockConfig+0x368>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fe94 	bl	8001344 <HAL_InitTick>
 800261c:	4603      	mov	r3, r0
 800261e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	58024400 	.word	0x58024400
 8002630:	08004e24 	.word	0x08004e24
 8002634:	24000004 	.word	0x24000004
 8002638:	24000000 	.word	0x24000000
 800263c:	24000008 	.word	0x24000008

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002646:	4bb3      	ldr	r3, [pc, #716]	; (8002914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800264e:	2b18      	cmp	r3, #24
 8002650:	f200 8155 	bhi.w	80028fe <HAL_RCC_GetSysClockFreq+0x2be>
 8002654:	a201      	add	r2, pc, #4	; (adr r2, 800265c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265a:	bf00      	nop
 800265c:	080026c1 	.word	0x080026c1
 8002660:	080028ff 	.word	0x080028ff
 8002664:	080028ff 	.word	0x080028ff
 8002668:	080028ff 	.word	0x080028ff
 800266c:	080028ff 	.word	0x080028ff
 8002670:	080028ff 	.word	0x080028ff
 8002674:	080028ff 	.word	0x080028ff
 8002678:	080028ff 	.word	0x080028ff
 800267c:	080026e7 	.word	0x080026e7
 8002680:	080028ff 	.word	0x080028ff
 8002684:	080028ff 	.word	0x080028ff
 8002688:	080028ff 	.word	0x080028ff
 800268c:	080028ff 	.word	0x080028ff
 8002690:	080028ff 	.word	0x080028ff
 8002694:	080028ff 	.word	0x080028ff
 8002698:	080028ff 	.word	0x080028ff
 800269c:	080026ed 	.word	0x080026ed
 80026a0:	080028ff 	.word	0x080028ff
 80026a4:	080028ff 	.word	0x080028ff
 80026a8:	080028ff 	.word	0x080028ff
 80026ac:	080028ff 	.word	0x080028ff
 80026b0:	080028ff 	.word	0x080028ff
 80026b4:	080028ff 	.word	0x080028ff
 80026b8:	080028ff 	.word	0x080028ff
 80026bc:	080026f3 	.word	0x080026f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026c0:	4b94      	ldr	r3, [pc, #592]	; (8002914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026cc:	4b91      	ldr	r3, [pc, #580]	; (8002914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	08db      	lsrs	r3, r3, #3
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	4a90      	ldr	r2, [pc, #576]	; (8002918 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
 80026dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80026de:	e111      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026e0:	4b8d      	ldr	r3, [pc, #564]	; (8002918 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026e2:	61bb      	str	r3, [r7, #24]
      break;
 80026e4:	e10e      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80026e6:	4b8d      	ldr	r3, [pc, #564]	; (800291c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026e8:	61bb      	str	r3, [r7, #24]
      break;
 80026ea:	e10b      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80026ec:	4b8c      	ldr	r3, [pc, #560]	; (8002920 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026ee:	61bb      	str	r3, [r7, #24]
      break;
 80026f0:	e108      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026f2:	4b88      	ldr	r3, [pc, #544]	; (8002914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80026fc:	4b85      	ldr	r3, [pc, #532]	; (8002914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002706:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002708:	4b82      	ldr	r3, [pc, #520]	; (8002914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002712:	4b80      	ldr	r3, [pc, #512]	; (8002914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002716:	08db      	lsrs	r3, r3, #3
 8002718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	ee07 3a90 	vmov	s15, r3
 8002726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800272a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80e1 	beq.w	80028f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b02      	cmp	r3, #2
 800273a:	f000 8083 	beq.w	8002844 <HAL_RCC_GetSysClockFreq+0x204>
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b02      	cmp	r3, #2
 8002742:	f200 80a1 	bhi.w	8002888 <HAL_RCC_GetSysClockFreq+0x248>
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x114>
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d056      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002752:	e099      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002754:	4b6f      	ldr	r3, [pc, #444]	; (8002914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	2b00      	cmp	r3, #0
 800275e:	d02d      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002760:	4b6c      	ldr	r3, [pc, #432]	; (8002914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	4a6b      	ldr	r2, [pc, #428]	; (8002918 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
 8002770:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	ee07 3a90 	vmov	s15, r3
 8002778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800278a:	4b62      	ldr	r3, [pc, #392]	; (8002914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800279a:	ed97 6a02 	vldr	s12, [r7, #8]
 800279e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002924 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80027ba:	e087      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002928 <HAL_RCC_GetSysClockFreq+0x2e8>
 80027ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ce:	4b51      	ldr	r3, [pc, #324]	; (8002914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027de:	ed97 6a02 	vldr	s12, [r7, #8]
 80027e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002924 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027fe:	e065      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800292c <HAL_RCC_GetSysClockFreq+0x2ec>
 800280e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002812:	4b40      	ldr	r3, [pc, #256]	; (8002914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002822:	ed97 6a02 	vldr	s12, [r7, #8]
 8002826:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002924 <HAL_RCC_GetSysClockFreq+0x2e4>
 800282a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800282e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800283a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002842:	e043      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002930 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002856:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002866:	ed97 6a02 	vldr	s12, [r7, #8]
 800286a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002924 <HAL_RCC_GetSysClockFreq+0x2e4>
 800286e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800287a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800287e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002882:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002886:	e021      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	ee07 3a90 	vmov	s15, r3
 800288e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002892:	eddf 6a26 	vldr	s13, [pc, #152]	; 800292c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800289a:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a2:	ee07 3a90 	vmov	s15, r3
 80028a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80028ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002924 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	0a5b      	lsrs	r3, r3, #9
 80028d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028d6:	3301      	adds	r3, #1
 80028d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80028e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f0:	ee17 3a90 	vmov	r3, s15
 80028f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80028f6:	e005      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61bb      	str	r3, [r7, #24]
      break;
 80028fc:	e002      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002900:	61bb      	str	r3, [r7, #24]
      break;
 8002902:	bf00      	nop
  }

  return sysclockfreq;
 8002904:	69bb      	ldr	r3, [r7, #24]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3724      	adds	r7, #36	; 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	58024400 	.word	0x58024400
 8002918:	03d09000 	.word	0x03d09000
 800291c:	003d0900 	.word	0x003d0900
 8002920:	017d7840 	.word	0x017d7840
 8002924:	46000000 	.word	0x46000000
 8002928:	4c742400 	.word	0x4c742400
 800292c:	4a742400 	.word	0x4a742400
 8002930:	4bbebc20 	.word	0x4bbebc20

08002934 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002938:	b0ca      	sub	sp, #296	; 0x128
 800293a:	af00      	add	r7, sp, #0
 800293c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002940:	2300      	movs	r3, #0
 8002942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002946:	2300      	movs	r3, #0
 8002948:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800294c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002954:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002958:	2500      	movs	r5, #0
 800295a:	ea54 0305 	orrs.w	r3, r4, r5
 800295e:	d049      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002966:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800296a:	d02f      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800296c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002970:	d828      	bhi.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002972:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002976:	d01a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002978:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800297c:	d822      	bhi.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002986:	d007      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002988:	e01c      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800298a:	4bb8      	ldr	r3, [pc, #736]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	4ab7      	ldr	r2, [pc, #732]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002994:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002996:	e01a      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800299c:	3308      	adds	r3, #8
 800299e:	2102      	movs	r1, #2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 f9d1 	bl	8003d48 <RCCEx_PLL2_Config>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029ac:	e00f      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80029ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029b2:	3328      	adds	r3, #40	; 0x28
 80029b4:	2102      	movs	r1, #2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 fa78 	bl	8003eac <RCCEx_PLL3_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029c2:	e004      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80029ca:	e000      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80029cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10a      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80029d6:	4ba5      	ldr	r3, [pc, #660]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80029de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029e4:	4aa1      	ldr	r2, [pc, #644]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029e6:	430b      	orrs	r3, r1
 80029e8:	6513      	str	r3, [r2, #80]	; 0x50
 80029ea:	e003      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002a00:	f04f 0900 	mov.w	r9, #0
 8002a04:	ea58 0309 	orrs.w	r3, r8, r9
 8002a08:	d047      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d82a      	bhi.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002a14:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1a:	bf00      	nop
 8002a1c:	08002a31 	.word	0x08002a31
 8002a20:	08002a3f 	.word	0x08002a3f
 8002a24:	08002a55 	.word	0x08002a55
 8002a28:	08002a73 	.word	0x08002a73
 8002a2c:	08002a73 	.word	0x08002a73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a30:	4b8e      	ldr	r3, [pc, #568]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	4a8d      	ldr	r2, [pc, #564]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a3c:	e01a      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a42:	3308      	adds	r3, #8
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 f97e 	bl	8003d48 <RCCEx_PLL2_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a52:	e00f      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a58:	3328      	adds	r3, #40	; 0x28
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f001 fa25 	bl	8003eac <RCCEx_PLL3_Config>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a68:	e004      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a70:	e000      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a7c:	4b7b      	ldr	r3, [pc, #492]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a80:	f023 0107 	bic.w	r1, r3, #7
 8002a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	4a78      	ldr	r2, [pc, #480]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	6513      	str	r3, [r2, #80]	; 0x50
 8002a90:	e003      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002aa6:	f04f 0b00 	mov.w	fp, #0
 8002aaa:	ea5a 030b 	orrs.w	r3, sl, fp
 8002aae:	d04c      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aba:	d030      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac0:	d829      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ac2:	2bc0      	cmp	r3, #192	; 0xc0
 8002ac4:	d02d      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002ac6:	2bc0      	cmp	r3, #192	; 0xc0
 8002ac8:	d825      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002aca:	2b80      	cmp	r3, #128	; 0x80
 8002acc:	d018      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ace:	2b80      	cmp	r3, #128	; 0x80
 8002ad0:	d821      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	d007      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002ada:	e01c      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002adc:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	4a62      	ldr	r2, [pc, #392]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ae8:	e01c      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aee:	3308      	adds	r3, #8
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f001 f928 	bl	8003d48 <RCCEx_PLL2_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002afe:	e011      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b04:	3328      	adds	r3, #40	; 0x28
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f001 f9cf 	bl	8003eac <RCCEx_PLL3_Config>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b14:	e006      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b1c:	e002      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b1e:	bf00      	nop
 8002b20:	e000      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b2c:	4b4f      	ldr	r3, [pc, #316]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b30:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3a:	4a4c      	ldr	r2, [pc, #304]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6513      	str	r3, [r2, #80]	; 0x50
 8002b40:	e003      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002b56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002b60:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002b64:	460b      	mov	r3, r1
 8002b66:	4313      	orrs	r3, r2
 8002b68:	d053      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b76:	d035      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002b78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b7c:	d82e      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b82:	d031      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002b84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b88:	d828      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b8e:	d01a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b94:	d822      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b9e:	d007      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002ba0:	e01c      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ba2:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	4a31      	ldr	r2, [pc, #196]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bae:	e01c      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f001 f8c5 	bl	8003d48 <RCCEx_PLL2_Config>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002bc4:	e011      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bca:	3328      	adds	r3, #40	; 0x28
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 f96c 	bl	8003eac <RCCEx_PLL3_Config>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bda:	e006      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002be2:	e002      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002be4:	bf00      	nop
 8002be6:	e000      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10b      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c02:	4a1a      	ldr	r2, [pc, #104]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c04:	430b      	orrs	r3, r1
 8002c06:	6593      	str	r3, [r2, #88]	; 0x58
 8002c08:	e003      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002c1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002c22:	2300      	movs	r3, #0
 8002c24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c28:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	d056      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c3e:	d038      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002c40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c44:	d831      	bhi.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c4a:	d034      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002c4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c50:	d82b      	bhi.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c56:	d01d      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002c58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c5c:	d825      	bhi.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d006      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002c62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002c68:	e01f      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c6a:	bf00      	nop
 8002c6c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c70:	4ba2      	ldr	r3, [pc, #648]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	4aa1      	ldr	r2, [pc, #644]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c7c:	e01c      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c82:	3308      	adds	r3, #8
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 f85e 	bl	8003d48 <RCCEx_PLL2_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c92:	e011      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c98:	3328      	adds	r3, #40	; 0x28
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f001 f905 	bl	8003eac <RCCEx_PLL3_Config>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ca8:	e006      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002cb0:	e002      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002cb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002cc0:	4b8e      	ldr	r3, [pc, #568]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ccc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002cd0:	4a8a      	ldr	r2, [pc, #552]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd6:	e003      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002cec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002cf6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	d03a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d06:	2b30      	cmp	r3, #48	; 0x30
 8002d08:	d01f      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002d0a:	2b30      	cmp	r3, #48	; 0x30
 8002d0c:	d819      	bhi.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d00c      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d815      	bhi.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d019      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002d1a:	2b10      	cmp	r3, #16
 8002d1c:	d111      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d1e:	4b77      	ldr	r3, [pc, #476]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	4a76      	ldr	r2, [pc, #472]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d2a:	e011      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d30:	3308      	adds	r3, #8
 8002d32:	2102      	movs	r1, #2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f001 f807 	bl	8003d48 <RCCEx_PLL2_Config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d40:	e006      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d48:	e002      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002d4a:	bf00      	nop
 8002d4c:	e000      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10a      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d58:	4b68      	ldr	r3, [pc, #416]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d66:	4a65      	ldr	r2, [pc, #404]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d6c:	e003      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002d82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002d8c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4313      	orrs	r3, r2
 8002d94:	d051      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002da0:	d035      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002da6:	d82e      	bhi.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002da8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002dac:	d031      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002dae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002db2:	d828      	bhi.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db8:	d01a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dbe:	d822      	bhi.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc8:	d007      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002dca:	e01c      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dcc:	4b4b      	ldr	r3, [pc, #300]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	4a4a      	ldr	r2, [pc, #296]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002dd8:	e01c      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dde:	3308      	adds	r3, #8
 8002de0:	2100      	movs	r1, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 ffb0 	bl	8003d48 <RCCEx_PLL2_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002dee:	e011      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002df4:	3328      	adds	r3, #40	; 0x28
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f001 f857 	bl	8003eac <RCCEx_PLL3_Config>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e04:	e006      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e0c:	e002      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e0e:	bf00      	nop
 8002e10:	e000      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10a      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e1c:	4b37      	ldr	r3, [pc, #220]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e20:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2a:	4a34      	ldr	r2, [pc, #208]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6513      	str	r3, [r2, #80]	; 0x50
 8002e30:	e003      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e42:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002e46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002e50:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002e54:	460b      	mov	r3, r1
 8002e56:	4313      	orrs	r3, r2
 8002e58:	d056      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e64:	d033      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002e66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e6a:	d82c      	bhi.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e70:	d02f      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002e72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e76:	d826      	bhi.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e7c:	d02b      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002e7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e82:	d820      	bhi.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e88:	d012      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002e8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e8e:	d81a      	bhi.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d022      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e98:	d115      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e9e:	3308      	adds	r3, #8
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 ff50 	bl	8003d48 <RCCEx_PLL2_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002eae:	e015      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb4:	3328      	adds	r3, #40	; 0x28
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fff7 	bl	8003eac <RCCEx_PLL3_Config>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ec4:	e00a      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ecc:	e006      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ece:	bf00      	nop
 8002ed0:	e004      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ed2:	bf00      	nop
 8002ed4:	e002      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ed6:	bf00      	nop
 8002ed8:	e000      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002edc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10d      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ef2:	4a02      	ldr	r2, [pc, #8]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	6513      	str	r3, [r2, #80]	; 0x50
 8002ef8:	e006      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002efa:	bf00      	nop
 8002efc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f10:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f1e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4313      	orrs	r3, r2
 8002f26:	d055      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f34:	d033      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f3a:	d82c      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f40:	d02f      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f46:	d826      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f4c:	d02b      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002f4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f52:	d820      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f58:	d012      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f5e:	d81a      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d022      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f68:	d115      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f6e:	3308      	adds	r3, #8
 8002f70:	2101      	movs	r1, #1
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fee8 	bl	8003d48 <RCCEx_PLL2_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f7e:	e015      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f84:	3328      	adds	r3, #40	; 0x28
 8002f86:	2101      	movs	r1, #1
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 ff8f 	bl	8003eac <RCCEx_PLL3_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f94:	e00a      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f9c:	e006      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f9e:	bf00      	nop
 8002fa0:	e004      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fa2:	bf00      	nop
 8002fa4:	e002      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fa6:	bf00      	nop
 8002fa8:	e000      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002fb4:	4ba3      	ldr	r3, [pc, #652]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fc4:	4a9f      	ldr	r2, [pc, #636]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8002fca:	e003      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fdc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002fea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	d037      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ffe:	d00e      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003004:	d816      	bhi.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d018      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800300a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800300e:	d111      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003010:	4b8c      	ldr	r3, [pc, #560]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	4a8b      	ldr	r2, [pc, #556]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800301c:	e00f      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800301e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003022:	3308      	adds	r3, #8
 8003024:	2101      	movs	r1, #1
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fe8e 	bl	8003d48 <RCCEx_PLL2_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003032:	e004      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800303c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800303e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10a      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003046:	4b7f      	ldr	r3, [pc, #508]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800304e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	4a7b      	ldr	r2, [pc, #492]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003056:	430b      	orrs	r3, r1
 8003058:	6513      	str	r3, [r2, #80]	; 0x50
 800305a:	e003      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003060:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003074:	2300      	movs	r3, #0
 8003076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800307a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800307e:	460b      	mov	r3, r1
 8003080:	4313      	orrs	r3, r2
 8003082:	d039      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	2b03      	cmp	r3, #3
 800308c:	d81c      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800308e:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030d1 	.word	0x080030d1
 8003098:	080030a5 	.word	0x080030a5
 800309c:	080030b3 	.word	0x080030b3
 80030a0:	080030d1 	.word	0x080030d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030a4:	4b67      	ldr	r3, [pc, #412]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	4a66      	ldr	r2, [pc, #408]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030b0:	e00f      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b6:	3308      	adds	r3, #8
 80030b8:	2102      	movs	r1, #2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fe44 	bl	8003d48 <RCCEx_PLL2_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030c6:	e004      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030ce:	e000      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80030d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10a      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80030da:	4b5a      	ldr	r3, [pc, #360]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030de:	f023 0103 	bic.w	r1, r3, #3
 80030e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e8:	4a56      	ldr	r2, [pc, #344]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030ea:	430b      	orrs	r3, r1
 80030ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ee:	e003      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003104:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003108:	2300      	movs	r3, #0
 800310a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800310e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003112:	460b      	mov	r3, r1
 8003114:	4313      	orrs	r3, r2
 8003116:	f000 809f 	beq.w	8003258 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800311a:	4b4b      	ldr	r3, [pc, #300]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a4a      	ldr	r2, [pc, #296]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003124:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003126:	f7fe f957 	bl	80013d8 <HAL_GetTick>
 800312a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800312e:	e00b      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003130:	f7fe f952 	bl	80013d8 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b64      	cmp	r3, #100	; 0x64
 800313e:	d903      	bls.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003146:	e005      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003148:	4b3f      	ldr	r3, [pc, #252]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0ed      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003154:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003158:	2b00      	cmp	r3, #0
 800315a:	d179      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800315c:	4b39      	ldr	r3, [pc, #228]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800315e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003164:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003168:	4053      	eors	r3, r2
 800316a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316e:	2b00      	cmp	r3, #0
 8003170:	d015      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003172:	4b34      	ldr	r3, [pc, #208]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800317e:	4b31      	ldr	r3, [pc, #196]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a30      	ldr	r2, [pc, #192]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800318a:	4b2e      	ldr	r3, [pc, #184]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4a2d      	ldr	r2, [pc, #180]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003194:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003196:	4a2b      	ldr	r2, [pc, #172]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003198:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800319e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031aa:	d118      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe f914 	bl	80013d8 <HAL_GetTick>
 80031b0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031b4:	e00d      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fe f90f 	bl	80013d8 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80031c0:	1ad2      	subs	r2, r2, r3
 80031c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d903      	bls.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80031d0:	e005      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031d2:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0eb      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80031de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d129      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031f6:	d10e      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80031f8:	4b12      	ldr	r3, [pc, #72]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003204:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003208:	091a      	lsrs	r2, r3, #4
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800320c:	4013      	ands	r3, r2
 800320e:	4a0d      	ldr	r2, [pc, #52]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003210:	430b      	orrs	r3, r1
 8003212:	6113      	str	r3, [r2, #16]
 8003214:	e005      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800321c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003220:	6113      	str	r3, [r2, #16]
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003224:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800322a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800322e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003232:	4a04      	ldr	r2, [pc, #16]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003234:	430b      	orrs	r3, r1
 8003236:	6713      	str	r3, [r2, #112]	; 0x70
 8003238:	e00e      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800323a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800323e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003242:	e009      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003244:	58024400 	.word	0x58024400
 8003248:	58024800 	.word	0x58024800
 800324c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003254:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003260:	f002 0301 	and.w	r3, r2, #1
 8003264:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003268:	2300      	movs	r3, #0
 800326a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800326e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003272:	460b      	mov	r3, r1
 8003274:	4313      	orrs	r3, r2
 8003276:	f000 8089 	beq.w	800338c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800327a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800327e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003280:	2b28      	cmp	r3, #40	; 0x28
 8003282:	d86b      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003284:	a201      	add	r2, pc, #4	; (adr r2, 800328c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	08003365 	.word	0x08003365
 8003290:	0800335d 	.word	0x0800335d
 8003294:	0800335d 	.word	0x0800335d
 8003298:	0800335d 	.word	0x0800335d
 800329c:	0800335d 	.word	0x0800335d
 80032a0:	0800335d 	.word	0x0800335d
 80032a4:	0800335d 	.word	0x0800335d
 80032a8:	0800335d 	.word	0x0800335d
 80032ac:	08003331 	.word	0x08003331
 80032b0:	0800335d 	.word	0x0800335d
 80032b4:	0800335d 	.word	0x0800335d
 80032b8:	0800335d 	.word	0x0800335d
 80032bc:	0800335d 	.word	0x0800335d
 80032c0:	0800335d 	.word	0x0800335d
 80032c4:	0800335d 	.word	0x0800335d
 80032c8:	0800335d 	.word	0x0800335d
 80032cc:	08003347 	.word	0x08003347
 80032d0:	0800335d 	.word	0x0800335d
 80032d4:	0800335d 	.word	0x0800335d
 80032d8:	0800335d 	.word	0x0800335d
 80032dc:	0800335d 	.word	0x0800335d
 80032e0:	0800335d 	.word	0x0800335d
 80032e4:	0800335d 	.word	0x0800335d
 80032e8:	0800335d 	.word	0x0800335d
 80032ec:	08003365 	.word	0x08003365
 80032f0:	0800335d 	.word	0x0800335d
 80032f4:	0800335d 	.word	0x0800335d
 80032f8:	0800335d 	.word	0x0800335d
 80032fc:	0800335d 	.word	0x0800335d
 8003300:	0800335d 	.word	0x0800335d
 8003304:	0800335d 	.word	0x0800335d
 8003308:	0800335d 	.word	0x0800335d
 800330c:	08003365 	.word	0x08003365
 8003310:	0800335d 	.word	0x0800335d
 8003314:	0800335d 	.word	0x0800335d
 8003318:	0800335d 	.word	0x0800335d
 800331c:	0800335d 	.word	0x0800335d
 8003320:	0800335d 	.word	0x0800335d
 8003324:	0800335d 	.word	0x0800335d
 8003328:	0800335d 	.word	0x0800335d
 800332c:	08003365 	.word	0x08003365
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003334:	3308      	adds	r3, #8
 8003336:	2101      	movs	r1, #1
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fd05 	bl	8003d48 <RCCEx_PLL2_Config>
 800333e:	4603      	mov	r3, r0
 8003340:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003344:	e00f      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800334a:	3328      	adds	r3, #40	; 0x28
 800334c:	2101      	movs	r1, #1
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fdac 	bl	8003eac <RCCEx_PLL3_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800335a:	e004      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003362:	e000      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10a      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800336e:	4bbf      	ldr	r3, [pc, #764]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800337a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800337c:	4abb      	ldr	r2, [pc, #748]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800337e:	430b      	orrs	r3, r1
 8003380:	6553      	str	r3, [r2, #84]	; 0x54
 8003382:	e003      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003384:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003388:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800338c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	f002 0302 	and.w	r3, r2, #2
 8003398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800339c:	2300      	movs	r3, #0
 800339e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80033a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80033a6:	460b      	mov	r3, r1
 80033a8:	4313      	orrs	r3, r2
 80033aa:	d041      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80033ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d824      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80033b6:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80033b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033bc:	08003409 	.word	0x08003409
 80033c0:	080033d5 	.word	0x080033d5
 80033c4:	080033eb 	.word	0x080033eb
 80033c8:	08003409 	.word	0x08003409
 80033cc:	08003409 	.word	0x08003409
 80033d0:	08003409 	.word	0x08003409
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d8:	3308      	adds	r3, #8
 80033da:	2101      	movs	r1, #1
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fcb3 	bl	8003d48 <RCCEx_PLL2_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80033e8:	e00f      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ee:	3328      	adds	r3, #40	; 0x28
 80033f0:	2101      	movs	r1, #1
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fd5a 	bl	8003eac <RCCEx_PLL3_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80033fe:	e004      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003406:	e000      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800340a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10a      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003412:	4b96      	ldr	r3, [pc, #600]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003416:	f023 0107 	bic.w	r1, r3, #7
 800341a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800341e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003420:	4a92      	ldr	r2, [pc, #584]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003422:	430b      	orrs	r3, r1
 8003424:	6553      	str	r3, [r2, #84]	; 0x54
 8003426:	e003      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800342c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f002 0304 	and.w	r3, r2, #4
 800343c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003440:	2300      	movs	r3, #0
 8003442:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003446:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800344a:	460b      	mov	r3, r1
 800344c:	4313      	orrs	r3, r2
 800344e:	d044      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003458:	2b05      	cmp	r3, #5
 800345a:	d825      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800345c:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	080034b1 	.word	0x080034b1
 8003468:	0800347d 	.word	0x0800347d
 800346c:	08003493 	.word	0x08003493
 8003470:	080034b1 	.word	0x080034b1
 8003474:	080034b1 	.word	0x080034b1
 8003478:	080034b1 	.word	0x080034b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800347c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003480:	3308      	adds	r3, #8
 8003482:	2101      	movs	r1, #1
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fc5f 	bl	8003d48 <RCCEx_PLL2_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003490:	e00f      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003496:	3328      	adds	r3, #40	; 0x28
 8003498:	2101      	movs	r1, #1
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fd06 	bl	8003eac <RCCEx_PLL3_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80034a6:	e004      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034ae:	e000      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80034b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034ba:	4b6c      	ldr	r3, [pc, #432]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	f023 0107 	bic.w	r1, r3, #7
 80034c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ca:	4a68      	ldr	r2, [pc, #416]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6593      	str	r3, [r2, #88]	; 0x58
 80034d0:	e003      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	f002 0320 	and.w	r3, r2, #32
 80034e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034f4:	460b      	mov	r3, r1
 80034f6:	4313      	orrs	r3, r2
 80034f8:	d055      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003506:	d033      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800350c:	d82c      	bhi.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800350e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003512:	d02f      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003518:	d826      	bhi.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800351a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800351e:	d02b      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003520:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003524:	d820      	bhi.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800352a:	d012      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800352c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003530:	d81a      	bhi.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d022      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800353a:	d115      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800353c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003540:	3308      	adds	r3, #8
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fbff 	bl	8003d48 <RCCEx_PLL2_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003550:	e015      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003556:	3328      	adds	r3, #40	; 0x28
 8003558:	2102      	movs	r1, #2
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fca6 	bl	8003eac <RCCEx_PLL3_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003566:	e00a      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800356e:	e006      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003570:	bf00      	nop
 8003572:	e004      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003574:	bf00      	nop
 8003576:	e002      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003578:	bf00      	nop
 800357a:	e000      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800357c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800357e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10b      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003586:	4b39      	ldr	r3, [pc, #228]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003596:	4a35      	ldr	r2, [pc, #212]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003598:	430b      	orrs	r3, r1
 800359a:	6553      	str	r3, [r2, #84]	; 0x54
 800359c:	e003      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80035a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80035b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035b6:	2300      	movs	r3, #0
 80035b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80035bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4313      	orrs	r3, r2
 80035c4:	d058      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035d2:	d033      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80035d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035d8:	d82c      	bhi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80035da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035de:	d02f      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80035e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e4:	d826      	bhi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80035e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ea:	d02b      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80035ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035f0:	d820      	bhi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80035f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f6:	d012      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80035f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fc:	d81a      	bhi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d022      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003606:	d115      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800360c:	3308      	adds	r3, #8
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fb99 	bl	8003d48 <RCCEx_PLL2_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800361c:	e015      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003622:	3328      	adds	r3, #40	; 0x28
 8003624:	2102      	movs	r1, #2
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fc40 	bl	8003eac <RCCEx_PLL3_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003632:	e00a      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800363a:	e006      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800363c:	bf00      	nop
 800363e:	e004      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003640:	bf00      	nop
 8003642:	e002      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003644:	bf00      	nop
 8003646:	e000      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800364a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10e      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800365a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003662:	4a02      	ldr	r2, [pc, #8]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003664:	430b      	orrs	r3, r1
 8003666:	6593      	str	r3, [r2, #88]	; 0x58
 8003668:	e006      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800366a:	bf00      	nop
 800366c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003674:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003688:	2300      	movs	r3, #0
 800368a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800368e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003692:	460b      	mov	r3, r1
 8003694:	4313      	orrs	r3, r2
 8003696:	d055      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800369c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80036a4:	d033      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80036a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80036aa:	d82c      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b0:	d02f      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80036b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b6:	d826      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80036bc:	d02b      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80036be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80036c2:	d820      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c8:	d012      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80036ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ce:	d81a      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d022      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80036d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d8:	d115      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036de:	3308      	adds	r3, #8
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fb30 	bl	8003d48 <RCCEx_PLL2_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80036ee:	e015      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f4:	3328      	adds	r3, #40	; 0x28
 80036f6:	2102      	movs	r1, #2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fbd7 	bl	8003eac <RCCEx_PLL3_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003704:	e00a      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800370c:	e006      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800370e:	bf00      	nop
 8003710:	e004      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003712:	bf00      	nop
 8003714:	e002      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800371a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003724:	4ba1      	ldr	r3, [pc, #644]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003730:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003734:	4a9d      	ldr	r2, [pc, #628]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003736:	430b      	orrs	r3, r1
 8003738:	6593      	str	r3, [r2, #88]	; 0x58
 800373a:	e003      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003740:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	f002 0308 	and.w	r3, r2, #8
 8003750:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003754:	2300      	movs	r3, #0
 8003756:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800375a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800375e:	460b      	mov	r3, r1
 8003760:	4313      	orrs	r3, r2
 8003762:	d01e      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003770:	d10c      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003776:	3328      	adds	r3, #40	; 0x28
 8003778:	2102      	movs	r1, #2
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fb96 	bl	8003eac <RCCEx_PLL3_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800378c:	4b87      	ldr	r3, [pc, #540]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379c:	4a83      	ldr	r2, [pc, #524]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800379e:	430b      	orrs	r3, r1
 80037a0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	f002 0310 	and.w	r3, r2, #16
 80037ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037b2:	2300      	movs	r3, #0
 80037b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80037b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80037bc:	460b      	mov	r3, r1
 80037be:	4313      	orrs	r3, r2
 80037c0:	d01e      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ce:	d10c      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d4:	3328      	adds	r3, #40	; 0x28
 80037d6:	2102      	movs	r1, #2
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fb67 	bl	8003eac <RCCEx_PLL3_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037ea:	4b70      	ldr	r3, [pc, #448]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037fa:	4a6c      	ldr	r2, [pc, #432]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800380c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003810:	2300      	movs	r3, #0
 8003812:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003816:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800381a:	460b      	mov	r3, r1
 800381c:	4313      	orrs	r3, r2
 800381e:	d03e      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003824:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800382c:	d022      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800382e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003832:	d81b      	bhi.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d00b      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800383e:	e015      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003844:	3308      	adds	r3, #8
 8003846:	2100      	movs	r1, #0
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fa7d 	bl	8003d48 <RCCEx_PLL2_Config>
 800384e:	4603      	mov	r3, r0
 8003850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003854:	e00f      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800385a:	3328      	adds	r3, #40	; 0x28
 800385c:	2102      	movs	r1, #2
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fb24 	bl	8003eac <RCCEx_PLL3_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800386a:	e004      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003872:	e000      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003876:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10b      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800387e:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800388a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800388e:	4a47      	ldr	r2, [pc, #284]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003890:	430b      	orrs	r3, r1
 8003892:	6593      	str	r3, [r2, #88]	; 0x58
 8003894:	e003      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800389a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800389e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80038aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80038ac:	2300      	movs	r3, #0
 80038ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80038b4:	460b      	mov	r3, r1
 80038b6:	4313      	orrs	r3, r2
 80038b8:	d03b      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80038ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038c6:	d01f      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80038c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038cc:	d818      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80038ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d2:	d003      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80038d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038d8:	d007      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80038da:	e011      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038dc:	4b33      	ldr	r3, [pc, #204]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	4a32      	ldr	r2, [pc, #200]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80038e8:	e00f      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ee:	3328      	adds	r3, #40	; 0x28
 80038f0:	2101      	movs	r1, #1
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fada 	bl	8003eac <RCCEx_PLL3_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80038fe:	e004      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003906:	e000      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800390a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003912:	4b26      	ldr	r3, [pc, #152]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003916:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800391a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	4a22      	ldr	r2, [pc, #136]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003924:	430b      	orrs	r3, r1
 8003926:	6553      	str	r3, [r2, #84]	; 0x54
 8003928:	e003      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800392e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800393e:	673b      	str	r3, [r7, #112]	; 0x70
 8003940:	2300      	movs	r3, #0
 8003942:	677b      	str	r3, [r7, #116]	; 0x74
 8003944:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003948:	460b      	mov	r3, r1
 800394a:	4313      	orrs	r3, r2
 800394c:	d034      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395c:	d007      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800395e:	e011      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003960:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	4a11      	ldr	r2, [pc, #68]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800396c:	e00e      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003972:	3308      	adds	r3, #8
 8003974:	2102      	movs	r1, #2
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f9e6 	bl	8003d48 <RCCEx_PLL2_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003982:	e003      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800398a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800398c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10d      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003998:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a2:	4a02      	ldr	r2, [pc, #8]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039a4:	430b      	orrs	r3, r1
 80039a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039a8:	e006      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80039aa:	bf00      	nop
 80039ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80039c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80039c6:	2300      	movs	r3, #0
 80039c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80039ce:	460b      	mov	r3, r1
 80039d0:	4313      	orrs	r3, r2
 80039d2:	d00c      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d8:	3328      	adds	r3, #40	; 0x28
 80039da:	2102      	movs	r1, #2
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fa65 	bl	8003eac <RCCEx_PLL3_Config>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80039fa:	663b      	str	r3, [r7, #96]	; 0x60
 80039fc:	2300      	movs	r3, #0
 80039fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003a00:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003a04:	460b      	mov	r3, r1
 8003a06:	4313      	orrs	r3, r2
 8003a08:	d038      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a16:	d018      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003a18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a1c:	d811      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a22:	d014      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a28:	d80b      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d011      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a32:	d106      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a34:	4bc3      	ldr	r3, [pc, #780]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	4ac2      	ldr	r2, [pc, #776]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003a40:	e008      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a48:	e004      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a4a:	bf00      	nop
 8003a4c:	e002      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a4e:	bf00      	nop
 8003a50:	e000      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10b      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a5c:	4bb9      	ldr	r3, [pc, #740]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a6c:	4ab5      	ldr	r2, [pc, #724]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a6e:	430b      	orrs	r3, r1
 8003a70:	6553      	str	r3, [r2, #84]	; 0x54
 8003a72:	e003      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a84:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003a88:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a8e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003a92:	460b      	mov	r3, r1
 8003a94:	4313      	orrs	r3, r2
 8003a96:	d009      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a98:	4baa      	ldr	r3, [pc, #680]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa6:	4aa7      	ldr	r2, [pc, #668]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003ab8:	653b      	str	r3, [r7, #80]	; 0x50
 8003aba:	2300      	movs	r3, #0
 8003abc:	657b      	str	r3, [r7, #84]	; 0x54
 8003abe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ac8:	4b9e      	ldr	r3, [pc, #632]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ad8:	4a9a      	ldr	r2, [pc, #616]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ada:	430b      	orrs	r3, r1
 8003adc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aec:	2300      	movs	r3, #0
 8003aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003af4:	460b      	mov	r3, r1
 8003af6:	4313      	orrs	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003afa:	4b92      	ldr	r3, [pc, #584]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b08:	4a8e      	ldr	r2, [pc, #568]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b20:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003b24:	460b      	mov	r3, r1
 8003b26:	4313      	orrs	r3, r2
 8003b28:	d00e      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b2a:	4b86      	ldr	r3, [pc, #536]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	4a85      	ldr	r2, [pc, #532]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b34:	6113      	str	r3, [r2, #16]
 8003b36:	4b83      	ldr	r3, [pc, #524]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b38:	6919      	ldr	r1, [r3, #16]
 8003b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003b42:	4a80      	ldr	r2, [pc, #512]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b44:	430b      	orrs	r3, r1
 8003b46:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b50:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003b54:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b56:	2300      	movs	r3, #0
 8003b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b5a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4313      	orrs	r3, r2
 8003b62:	d009      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b64:	4b77      	ldr	r3, [pc, #476]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b68:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	4a74      	ldr	r2, [pc, #464]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b74:	430b      	orrs	r3, r1
 8003b76:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b80:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003b84:	633b      	str	r3, [r7, #48]	; 0x30
 8003b86:	2300      	movs	r3, #0
 8003b88:	637b      	str	r3, [r7, #52]	; 0x34
 8003b8a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4313      	orrs	r3, r2
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b94:	4b6b      	ldr	r3, [pc, #428]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba4:	4a67      	ldr	r2, [pc, #412]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bbc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	d011      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bca:	3308      	adds	r3, #8
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f8ba 	bl	8003d48 <RCCEx_PLL2_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003bda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003be6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	6239      	str	r1, [r7, #32]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c00:	460b      	mov	r3, r1
 8003c02:	4313      	orrs	r3, r2
 8003c04:	d011      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f89a 	bl	8003d48 <RCCEx_PLL2_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c32:	2100      	movs	r1, #0
 8003c34:	61b9      	str	r1, [r7, #24]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003c40:	460b      	mov	r3, r1
 8003c42:	4313      	orrs	r3, r2
 8003c44:	d011      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	2102      	movs	r1, #2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f87a 	bl	8003d48 <RCCEx_PLL2_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	2100      	movs	r1, #0
 8003c74:	6139      	str	r1, [r7, #16]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c80:	460b      	mov	r3, r1
 8003c82:	4313      	orrs	r3, r2
 8003c84:	d011      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c8a:	3328      	adds	r3, #40	; 0x28
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 f90c 	bl	8003eac <RCCEx_PLL3_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ca6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	d011      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cca:	3328      	adds	r3, #40	; 0x28
 8003ccc:	2101      	movs	r1, #1
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 f8ec 	bl	8003eac <RCCEx_PLL3_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ce6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	6039      	str	r1, [r7, #0]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	607b      	str	r3, [r7, #4]
 8003cfc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d00:	460b      	mov	r3, r1
 8003d02:	4313      	orrs	r3, r2
 8003d04:	d011      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0a:	3328      	adds	r3, #40	; 0x28
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f8cc 	bl	8003eac <RCCEx_PLL3_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003d2a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	e000      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d44:	58024400 	.word	0x58024400

08003d48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d56:	4b53      	ldr	r3, [pc, #332]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d101      	bne.n	8003d66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e099      	b.n	8003e9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d66:	4b4f      	ldr	r3, [pc, #316]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a4e      	ldr	r2, [pc, #312]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003d6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d72:	f7fd fb31 	bl	80013d8 <HAL_GetTick>
 8003d76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d78:	e008      	b.n	8003d8c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d7a:	f7fd fb2d 	bl	80013d8 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e086      	b.n	8003e9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d8c:	4b45      	ldr	r3, [pc, #276]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f0      	bne.n	8003d7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d98:	4b42      	ldr	r3, [pc, #264]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	031b      	lsls	r3, r3, #12
 8003da6:	493f      	ldr	r1, [pc, #252]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	628b      	str	r3, [r1, #40]	; 0x28
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	3b01      	subs	r3, #1
 8003db2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	025b      	lsls	r3, r3, #9
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	041b      	lsls	r3, r3, #16
 8003dca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	061b      	lsls	r3, r3, #24
 8003dd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ddc:	4931      	ldr	r1, [pc, #196]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003de2:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	492d      	ldr	r1, [pc, #180]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003df4:	4b2b      	ldr	r3, [pc, #172]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	f023 0220 	bic.w	r2, r3, #32
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	4928      	ldr	r1, [pc, #160]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e06:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	4a26      	ldr	r2, [pc, #152]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e0c:	f023 0310 	bic.w	r3, r3, #16
 8003e10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e12:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e16:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <RCCEx_PLL2_Config+0x160>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	69d2      	ldr	r2, [r2, #28]
 8003e1e:	00d2      	lsls	r2, r2, #3
 8003e20:	4920      	ldr	r1, [pc, #128]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e26:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	4a1e      	ldr	r2, [pc, #120]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e2c:	f043 0310 	orr.w	r3, r3, #16
 8003e30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d106      	bne.n	8003e46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e38:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e44:	e00f      	b.n	8003e66 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d106      	bne.n	8003e5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e4c:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e58:	e005      	b.n	8003e66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	4a11      	ldr	r2, [pc, #68]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e66:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e72:	f7fd fab1 	bl	80013d8 <HAL_GetTick>
 8003e76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e78:	e008      	b.n	8003e8c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e7a:	f7fd faad 	bl	80013d8 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e006      	b.n	8003e9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <RCCEx_PLL2_Config+0x15c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	58024400 	.word	0x58024400
 8003ea8:	ffff0007 	.word	0xffff0007

08003eac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003eba:	4b53      	ldr	r3, [pc, #332]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d101      	bne.n	8003eca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e099      	b.n	8003ffe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003eca:	4b4f      	ldr	r3, [pc, #316]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a4e      	ldr	r2, [pc, #312]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed6:	f7fd fa7f 	bl	80013d8 <HAL_GetTick>
 8003eda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003edc:	e008      	b.n	8003ef0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003ede:	f7fd fa7b 	bl	80013d8 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e086      	b.n	8003ffe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ef0:	4b45      	ldr	r3, [pc, #276]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f0      	bne.n	8003ede <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003efc:	4b42      	ldr	r3, [pc, #264]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	051b      	lsls	r3, r3, #20
 8003f0a:	493f      	ldr	r1, [pc, #252]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	628b      	str	r3, [r1, #40]	; 0x28
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	025b      	lsls	r3, r3, #9
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	041b      	lsls	r3, r3, #16
 8003f2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	061b      	lsls	r3, r3, #24
 8003f3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f40:	4931      	ldr	r1, [pc, #196]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f46:	4b30      	ldr	r3, [pc, #192]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	492d      	ldr	r1, [pc, #180]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f58:	4b2b      	ldr	r3, [pc, #172]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	4928      	ldr	r1, [pc, #160]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f6a:	4b27      	ldr	r3, [pc, #156]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	4a26      	ldr	r2, [pc, #152]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f76:	4b24      	ldr	r3, [pc, #144]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f7a:	4b24      	ldr	r3, [pc, #144]	; (800400c <RCCEx_PLL3_Config+0x160>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	69d2      	ldr	r2, [r2, #28]
 8003f82:	00d2      	lsls	r2, r2, #3
 8003f84:	4920      	ldr	r1, [pc, #128]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f8a:	4b1f      	ldr	r3, [pc, #124]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	4a1e      	ldr	r2, [pc, #120]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f9c:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	4a19      	ldr	r2, [pc, #100]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003fa2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fa8:	e00f      	b.n	8003fca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d106      	bne.n	8003fbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003fb0:	4b15      	ldr	r3, [pc, #84]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003fb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fbc:	e005      	b.n	8003fca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	4a11      	ldr	r2, [pc, #68]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003fc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003fca:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a0e      	ldr	r2, [pc, #56]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd6:	f7fd f9ff 	bl	80013d8 <HAL_GetTick>
 8003fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fdc:	e008      	b.n	8003ff0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003fde:	f7fd f9fb 	bl	80013d8 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e006      	b.n	8003ffe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <RCCEx_PLL3_Config+0x15c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	58024400 	.word	0x58024400
 800400c:	ffff0007 	.word	0xffff0007

08004010 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e03e      	b.n	80040a4 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f7fd f860 	bl	8001100 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3308      	adds	r3, #8
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f000 fd9a 	bl	8004b84 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	461a      	mov	r2, r3
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	f000 fe22 	bl	8004ca4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6858      	ldr	r0, [r3, #4]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	f000 fe69 	bl	8004d44 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	6892      	ldr	r2, [r2, #8]
 800407a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	6892      	ldr	r2, [r2, #8]
 8004086:	f041 0101 	orr.w	r1, r1, #1
 800408a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <HAL_SRAM_Init+0x9c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a06      	ldr	r2, [pc, #24]	; (80040ac <HAL_SRAM_Init+0x9c>)
 8004094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004098:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	52004000 	.word	0x52004000

080040b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e049      	b.n	8004156 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fc ff20 	bl	8000f1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3304      	adds	r3, #4
 80040ec:	4619      	mov	r1, r3
 80040ee:	4610      	mov	r0, r2
 80040f0:	f000 f94a 	bl	8004388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800417a:	2302      	movs	r3, #2
 800417c:	e0ff      	b.n	800437e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b14      	cmp	r3, #20
 800418a:	f200 80f0 	bhi.w	800436e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041e9 	.word	0x080041e9
 8004198:	0800436f 	.word	0x0800436f
 800419c:	0800436f 	.word	0x0800436f
 80041a0:	0800436f 	.word	0x0800436f
 80041a4:	08004229 	.word	0x08004229
 80041a8:	0800436f 	.word	0x0800436f
 80041ac:	0800436f 	.word	0x0800436f
 80041b0:	0800436f 	.word	0x0800436f
 80041b4:	0800426b 	.word	0x0800426b
 80041b8:	0800436f 	.word	0x0800436f
 80041bc:	0800436f 	.word	0x0800436f
 80041c0:	0800436f 	.word	0x0800436f
 80041c4:	080042ab 	.word	0x080042ab
 80041c8:	0800436f 	.word	0x0800436f
 80041cc:	0800436f 	.word	0x0800436f
 80041d0:	0800436f 	.word	0x0800436f
 80041d4:	080042ed 	.word	0x080042ed
 80041d8:	0800436f 	.word	0x0800436f
 80041dc:	0800436f 	.word	0x0800436f
 80041e0:	0800436f 	.word	0x0800436f
 80041e4:	0800432d 	.word	0x0800432d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f964 	bl	80044bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0208 	orr.w	r2, r2, #8
 8004202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0204 	bic.w	r2, r2, #4
 8004212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6999      	ldr	r1, [r3, #24]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	619a      	str	r2, [r3, #24]
      break;
 8004226:	e0a5      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	4618      	mov	r0, r3
 8004230:	f000 f9d4 	bl	80045dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699a      	ldr	r2, [r3, #24]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6999      	ldr	r1, [r3, #24]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	021a      	lsls	r2, r3, #8
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	619a      	str	r2, [r3, #24]
      break;
 8004268:	e084      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fa3d 	bl	80046f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0208 	orr.w	r2, r2, #8
 8004284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0204 	bic.w	r2, r2, #4
 8004294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69d9      	ldr	r1, [r3, #28]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	61da      	str	r2, [r3, #28]
      break;
 80042a8:	e064      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 faa5 	bl	8004800 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69d9      	ldr	r1, [r3, #28]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	021a      	lsls	r2, r3, #8
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	61da      	str	r2, [r3, #28]
      break;
 80042ea:	e043      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 faee 	bl	80048d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0208 	orr.w	r2, r2, #8
 8004306:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0204 	bic.w	r2, r2, #4
 8004316:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800432a:	e023      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fb32 	bl	800499c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004346:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004356:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	021a      	lsls	r2, r3, #8
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800436c:	e002      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	75fb      	strb	r3, [r7, #23]
      break;
 8004372:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800437c:	7dfb      	ldrb	r3, [r7, #23]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop

08004388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a40      	ldr	r2, [pc, #256]	; (800449c <TIM_Base_SetConfig+0x114>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d013      	beq.n	80043c8 <TIM_Base_SetConfig+0x40>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a6:	d00f      	beq.n	80043c8 <TIM_Base_SetConfig+0x40>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a3d      	ldr	r2, [pc, #244]	; (80044a0 <TIM_Base_SetConfig+0x118>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00b      	beq.n	80043c8 <TIM_Base_SetConfig+0x40>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a3c      	ldr	r2, [pc, #240]	; (80044a4 <TIM_Base_SetConfig+0x11c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d007      	beq.n	80043c8 <TIM_Base_SetConfig+0x40>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a3b      	ldr	r2, [pc, #236]	; (80044a8 <TIM_Base_SetConfig+0x120>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d003      	beq.n	80043c8 <TIM_Base_SetConfig+0x40>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a3a      	ldr	r2, [pc, #232]	; (80044ac <TIM_Base_SetConfig+0x124>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d108      	bne.n	80043da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a2f      	ldr	r2, [pc, #188]	; (800449c <TIM_Base_SetConfig+0x114>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d01f      	beq.n	8004422 <TIM_Base_SetConfig+0x9a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e8:	d01b      	beq.n	8004422 <TIM_Base_SetConfig+0x9a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a2c      	ldr	r2, [pc, #176]	; (80044a0 <TIM_Base_SetConfig+0x118>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d017      	beq.n	8004422 <TIM_Base_SetConfig+0x9a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a2b      	ldr	r2, [pc, #172]	; (80044a4 <TIM_Base_SetConfig+0x11c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d013      	beq.n	8004422 <TIM_Base_SetConfig+0x9a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a2a      	ldr	r2, [pc, #168]	; (80044a8 <TIM_Base_SetConfig+0x120>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00f      	beq.n	8004422 <TIM_Base_SetConfig+0x9a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a29      	ldr	r2, [pc, #164]	; (80044ac <TIM_Base_SetConfig+0x124>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00b      	beq.n	8004422 <TIM_Base_SetConfig+0x9a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a28      	ldr	r2, [pc, #160]	; (80044b0 <TIM_Base_SetConfig+0x128>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d007      	beq.n	8004422 <TIM_Base_SetConfig+0x9a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a27      	ldr	r2, [pc, #156]	; (80044b4 <TIM_Base_SetConfig+0x12c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d003      	beq.n	8004422 <TIM_Base_SetConfig+0x9a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a26      	ldr	r2, [pc, #152]	; (80044b8 <TIM_Base_SetConfig+0x130>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d108      	bne.n	8004434 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a10      	ldr	r2, [pc, #64]	; (800449c <TIM_Base_SetConfig+0x114>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00f      	beq.n	8004480 <TIM_Base_SetConfig+0xf8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a12      	ldr	r2, [pc, #72]	; (80044ac <TIM_Base_SetConfig+0x124>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00b      	beq.n	8004480 <TIM_Base_SetConfig+0xf8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a11      	ldr	r2, [pc, #68]	; (80044b0 <TIM_Base_SetConfig+0x128>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d007      	beq.n	8004480 <TIM_Base_SetConfig+0xf8>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a10      	ldr	r2, [pc, #64]	; (80044b4 <TIM_Base_SetConfig+0x12c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <TIM_Base_SetConfig+0xf8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a0f      	ldr	r2, [pc, #60]	; (80044b8 <TIM_Base_SetConfig+0x130>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d103      	bne.n	8004488 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	615a      	str	r2, [r3, #20]
}
 800448e:	bf00      	nop
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40010000 	.word	0x40010000
 80044a0:	40000400 	.word	0x40000400
 80044a4:	40000800 	.word	0x40000800
 80044a8:	40000c00 	.word	0x40000c00
 80044ac:	40010400 	.word	0x40010400
 80044b0:	40014000 	.word	0x40014000
 80044b4:	40014400 	.word	0x40014400
 80044b8:	40014800 	.word	0x40014800

080044bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f023 0201 	bic.w	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4b37      	ldr	r3, [pc, #220]	; (80045c4 <TIM_OC1_SetConfig+0x108>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0303 	bic.w	r3, r3, #3
 80044f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f023 0302 	bic.w	r3, r3, #2
 8004504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a2d      	ldr	r2, [pc, #180]	; (80045c8 <TIM_OC1_SetConfig+0x10c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00f      	beq.n	8004538 <TIM_OC1_SetConfig+0x7c>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a2c      	ldr	r2, [pc, #176]	; (80045cc <TIM_OC1_SetConfig+0x110>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00b      	beq.n	8004538 <TIM_OC1_SetConfig+0x7c>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a2b      	ldr	r2, [pc, #172]	; (80045d0 <TIM_OC1_SetConfig+0x114>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d007      	beq.n	8004538 <TIM_OC1_SetConfig+0x7c>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a2a      	ldr	r2, [pc, #168]	; (80045d4 <TIM_OC1_SetConfig+0x118>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_OC1_SetConfig+0x7c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a29      	ldr	r2, [pc, #164]	; (80045d8 <TIM_OC1_SetConfig+0x11c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d10c      	bne.n	8004552 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f023 0308 	bic.w	r3, r3, #8
 800453e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f023 0304 	bic.w	r3, r3, #4
 8004550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a1c      	ldr	r2, [pc, #112]	; (80045c8 <TIM_OC1_SetConfig+0x10c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00f      	beq.n	800457a <TIM_OC1_SetConfig+0xbe>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <TIM_OC1_SetConfig+0x110>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00b      	beq.n	800457a <TIM_OC1_SetConfig+0xbe>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a1a      	ldr	r2, [pc, #104]	; (80045d0 <TIM_OC1_SetConfig+0x114>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d007      	beq.n	800457a <TIM_OC1_SetConfig+0xbe>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a19      	ldr	r2, [pc, #100]	; (80045d4 <TIM_OC1_SetConfig+0x118>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d003      	beq.n	800457a <TIM_OC1_SetConfig+0xbe>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <TIM_OC1_SetConfig+0x11c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d111      	bne.n	800459e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	621a      	str	r2, [r3, #32]
}
 80045b8:	bf00      	nop
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	fffeff8f 	.word	0xfffeff8f
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40010400 	.word	0x40010400
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800

080045dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f023 0210 	bic.w	r2, r3, #16
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4b34      	ldr	r3, [pc, #208]	; (80046d8 <TIM_OC2_SetConfig+0xfc>)
 8004608:	4013      	ands	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	021b      	lsls	r3, r3, #8
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f023 0320 	bic.w	r3, r3, #32
 8004626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a29      	ldr	r2, [pc, #164]	; (80046dc <TIM_OC2_SetConfig+0x100>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <TIM_OC2_SetConfig+0x68>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a28      	ldr	r2, [pc, #160]	; (80046e0 <TIM_OC2_SetConfig+0x104>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d10d      	bne.n	8004660 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800464a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a1e      	ldr	r2, [pc, #120]	; (80046dc <TIM_OC2_SetConfig+0x100>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00f      	beq.n	8004688 <TIM_OC2_SetConfig+0xac>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a1d      	ldr	r2, [pc, #116]	; (80046e0 <TIM_OC2_SetConfig+0x104>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00b      	beq.n	8004688 <TIM_OC2_SetConfig+0xac>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a1c      	ldr	r2, [pc, #112]	; (80046e4 <TIM_OC2_SetConfig+0x108>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d007      	beq.n	8004688 <TIM_OC2_SetConfig+0xac>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a1b      	ldr	r2, [pc, #108]	; (80046e8 <TIM_OC2_SetConfig+0x10c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <TIM_OC2_SetConfig+0xac>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a1a      	ldr	r2, [pc, #104]	; (80046ec <TIM_OC2_SetConfig+0x110>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d113      	bne.n	80046b0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800468e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	feff8fff 	.word	0xfeff8fff
 80046dc:	40010000 	.word	0x40010000
 80046e0:	40010400 	.word	0x40010400
 80046e4:	40014000 	.word	0x40014000
 80046e8:	40014400 	.word	0x40014400
 80046ec:	40014800 	.word	0x40014800

080046f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4b33      	ldr	r3, [pc, #204]	; (80047e8 <TIM_OC3_SetConfig+0xf8>)
 800471c:	4013      	ands	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a28      	ldr	r2, [pc, #160]	; (80047ec <TIM_OC3_SetConfig+0xfc>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d003      	beq.n	8004756 <TIM_OC3_SetConfig+0x66>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a27      	ldr	r2, [pc, #156]	; (80047f0 <TIM_OC3_SetConfig+0x100>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d10d      	bne.n	8004772 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800475c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a1d      	ldr	r2, [pc, #116]	; (80047ec <TIM_OC3_SetConfig+0xfc>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00f      	beq.n	800479a <TIM_OC3_SetConfig+0xaa>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a1c      	ldr	r2, [pc, #112]	; (80047f0 <TIM_OC3_SetConfig+0x100>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00b      	beq.n	800479a <TIM_OC3_SetConfig+0xaa>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a1b      	ldr	r2, [pc, #108]	; (80047f4 <TIM_OC3_SetConfig+0x104>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d007      	beq.n	800479a <TIM_OC3_SetConfig+0xaa>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <TIM_OC3_SetConfig+0x108>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d003      	beq.n	800479a <TIM_OC3_SetConfig+0xaa>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a19      	ldr	r2, [pc, #100]	; (80047fc <TIM_OC3_SetConfig+0x10c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d113      	bne.n	80047c2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	621a      	str	r2, [r3, #32]
}
 80047dc:	bf00      	nop
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	fffeff8f 	.word	0xfffeff8f
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40010400 	.word	0x40010400
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40014400 	.word	0x40014400
 80047fc:	40014800 	.word	0x40014800

08004800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4b24      	ldr	r3, [pc, #144]	; (80048bc <TIM_OC4_SetConfig+0xbc>)
 800482c:	4013      	ands	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800484a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	031b      	lsls	r3, r3, #12
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a19      	ldr	r2, [pc, #100]	; (80048c0 <TIM_OC4_SetConfig+0xc0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00f      	beq.n	8004880 <TIM_OC4_SetConfig+0x80>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a18      	ldr	r2, [pc, #96]	; (80048c4 <TIM_OC4_SetConfig+0xc4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00b      	beq.n	8004880 <TIM_OC4_SetConfig+0x80>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a17      	ldr	r2, [pc, #92]	; (80048c8 <TIM_OC4_SetConfig+0xc8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d007      	beq.n	8004880 <TIM_OC4_SetConfig+0x80>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a16      	ldr	r2, [pc, #88]	; (80048cc <TIM_OC4_SetConfig+0xcc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_OC4_SetConfig+0x80>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a15      	ldr	r2, [pc, #84]	; (80048d0 <TIM_OC4_SetConfig+0xd0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d109      	bne.n	8004894 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	019b      	lsls	r3, r3, #6
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	621a      	str	r2, [r3, #32]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	feff8fff 	.word	0xfeff8fff
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40010400 	.word	0x40010400
 80048c8:	40014000 	.word	0x40014000
 80048cc:	40014400 	.word	0x40014400
 80048d0:	40014800 	.word	0x40014800

080048d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4b21      	ldr	r3, [pc, #132]	; (8004984 <TIM_OC5_SetConfig+0xb0>)
 8004900:	4013      	ands	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004914:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	041b      	lsls	r3, r3, #16
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a18      	ldr	r2, [pc, #96]	; (8004988 <TIM_OC5_SetConfig+0xb4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00f      	beq.n	800494a <TIM_OC5_SetConfig+0x76>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a17      	ldr	r2, [pc, #92]	; (800498c <TIM_OC5_SetConfig+0xb8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00b      	beq.n	800494a <TIM_OC5_SetConfig+0x76>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a16      	ldr	r2, [pc, #88]	; (8004990 <TIM_OC5_SetConfig+0xbc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d007      	beq.n	800494a <TIM_OC5_SetConfig+0x76>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a15      	ldr	r2, [pc, #84]	; (8004994 <TIM_OC5_SetConfig+0xc0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d003      	beq.n	800494a <TIM_OC5_SetConfig+0x76>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a14      	ldr	r2, [pc, #80]	; (8004998 <TIM_OC5_SetConfig+0xc4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d109      	bne.n	800495e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004950:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	621a      	str	r2, [r3, #32]
}
 8004978:	bf00      	nop
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	fffeff8f 	.word	0xfffeff8f
 8004988:	40010000 	.word	0x40010000
 800498c:	40010400 	.word	0x40010400
 8004990:	40014000 	.word	0x40014000
 8004994:	40014400 	.word	0x40014400
 8004998:	40014800 	.word	0x40014800

0800499c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4b22      	ldr	r3, [pc, #136]	; (8004a50 <TIM_OC6_SetConfig+0xb4>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	021b      	lsls	r3, r3, #8
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	051b      	lsls	r3, r3, #20
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a19      	ldr	r2, [pc, #100]	; (8004a54 <TIM_OC6_SetConfig+0xb8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00f      	beq.n	8004a14 <TIM_OC6_SetConfig+0x78>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <TIM_OC6_SetConfig+0xbc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d00b      	beq.n	8004a14 <TIM_OC6_SetConfig+0x78>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a17      	ldr	r2, [pc, #92]	; (8004a5c <TIM_OC6_SetConfig+0xc0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d007      	beq.n	8004a14 <TIM_OC6_SetConfig+0x78>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <TIM_OC6_SetConfig+0xc4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d003      	beq.n	8004a14 <TIM_OC6_SetConfig+0x78>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a15      	ldr	r2, [pc, #84]	; (8004a64 <TIM_OC6_SetConfig+0xc8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d109      	bne.n	8004a28 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	029b      	lsls	r3, r3, #10
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	feff8fff 	.word	0xfeff8fff
 8004a54:	40010000 	.word	0x40010000
 8004a58:	40010400 	.word	0x40010400
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	40014400 	.word	0x40014400
 8004a64:	40014800 	.word	0x40014800

08004a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e06d      	b.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a30      	ldr	r2, [pc, #192]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2f      	ldr	r2, [pc, #188]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d108      	bne.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004aba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004acc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a20      	ldr	r2, [pc, #128]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d022      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af2:	d01d      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1d      	ldr	r2, [pc, #116]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d018      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d013      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1a      	ldr	r2, [pc, #104]	; (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00e      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a15      	ldr	r2, [pc, #84]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d009      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a16      	ldr	r2, [pc, #88]	; (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a15      	ldr	r2, [pc, #84]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d10c      	bne.n	8004b4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	40010400 	.word	0x40010400
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000800 	.word	0x40000800
 8004b78:	40000c00 	.word	0x40000c00
 8004b7c:	40001800 	.word	0x40001800
 8004b80:	40014000 	.word	0x40014000

08004b84 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	f023 0101 	bic.w	r1, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d102      	bne.n	8004bb4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004bae:	2340      	movs	r3, #64	; 0x40
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e001      	b.n	8004bb8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004bc4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004bca:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004bd0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004bd6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8004bdc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8004be2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8004be8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8004bee:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8004bf4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8004c1c:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <FMC_NORSRAM_Init+0x11c>)
 8004c1e:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c26:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c2e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004c36:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	43db      	mvns	r3, r3
 8004c46:	ea02 0103 	and.w	r1, r2, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	4319      	orrs	r1, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c60:	d10c      	bne.n	8004c7c <FMC_NORSRAM_Init+0xf8>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d008      	beq.n	8004c7c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d006      	beq.n	8004c92 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	0008fb7f 	.word	0x0008fb7f

08004ca4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cba:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	041b      	lsls	r3, r3, #16
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	051b      	lsls	r3, r3, #20
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	3b02      	subs	r3, #2
 8004cea:	061b      	lsls	r3, r3, #24
 8004cec:	431a      	orrs	r2, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	3201      	adds	r2, #1
 8004cf8:	4319      	orrs	r1, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d0c:	d113      	bne.n	8004d36 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d16:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	051b      	lsls	r3, r3, #20
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	431a      	orrs	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d58:	d11d      	bne.n	8004d96 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d62:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	6811      	ldr	r1, [r2, #0]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	6852      	ldr	r2, [r2, #4]
 8004d6e:	0112      	lsls	r2, r2, #4
 8004d70:	4311      	orrs	r1, r2
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	6892      	ldr	r2, [r2, #8]
 8004d76:	0212      	lsls	r2, r2, #8
 8004d78:	4311      	orrs	r1, r2
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	6992      	ldr	r2, [r2, #24]
 8004d7e:	4311      	orrs	r1, r2
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	68d2      	ldr	r2, [r2, #12]
 8004d84:	0412      	lsls	r2, r2, #16
 8004d86:	430a      	orrs	r2, r1
 8004d88:	ea43 0102 	orr.w	r1, r3, r2
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004d94:	e005      	b.n	8004da2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	cff00000 	.word	0xcff00000

08004db4 <memset>:
 8004db4:	4402      	add	r2, r0
 8004db6:	4603      	mov	r3, r0
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d100      	bne.n	8004dbe <memset+0xa>
 8004dbc:	4770      	bx	lr
 8004dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc2:	e7f9      	b.n	8004db8 <memset+0x4>

08004dc4 <__libc_init_array>:
 8004dc4:	b570      	push	{r4, r5, r6, lr}
 8004dc6:	4d0d      	ldr	r5, [pc, #52]	; (8004dfc <__libc_init_array+0x38>)
 8004dc8:	4c0d      	ldr	r4, [pc, #52]	; (8004e00 <__libc_init_array+0x3c>)
 8004dca:	1b64      	subs	r4, r4, r5
 8004dcc:	10a4      	asrs	r4, r4, #2
 8004dce:	2600      	movs	r6, #0
 8004dd0:	42a6      	cmp	r6, r4
 8004dd2:	d109      	bne.n	8004de8 <__libc_init_array+0x24>
 8004dd4:	4d0b      	ldr	r5, [pc, #44]	; (8004e04 <__libc_init_array+0x40>)
 8004dd6:	4c0c      	ldr	r4, [pc, #48]	; (8004e08 <__libc_init_array+0x44>)
 8004dd8:	f000 f818 	bl	8004e0c <_init>
 8004ddc:	1b64      	subs	r4, r4, r5
 8004dde:	10a4      	asrs	r4, r4, #2
 8004de0:	2600      	movs	r6, #0
 8004de2:	42a6      	cmp	r6, r4
 8004de4:	d105      	bne.n	8004df2 <__libc_init_array+0x2e>
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
 8004de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dec:	4798      	blx	r3
 8004dee:	3601      	adds	r6, #1
 8004df0:	e7ee      	b.n	8004dd0 <__libc_init_array+0xc>
 8004df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df6:	4798      	blx	r3
 8004df8:	3601      	adds	r6, #1
 8004dfa:	e7f2      	b.n	8004de2 <__libc_init_array+0x1e>
 8004dfc:	08004e34 	.word	0x08004e34
 8004e00:	08004e34 	.word	0x08004e34
 8004e04:	08004e34 	.word	0x08004e34
 8004e08:	08004e38 	.word	0x08004e38

08004e0c <_init>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	bf00      	nop
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr

08004e18 <_fini>:
 8004e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1a:	bf00      	nop
 8004e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1e:	bc08      	pop	{r3}
 8004e20:	469e      	mov	lr, r3
 8004e22:	4770      	bx	lr
